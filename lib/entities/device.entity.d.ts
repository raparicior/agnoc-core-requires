import { Entity } from '../base-classes/entity.base';
import { DeviceBattery } from '../value-objects/device-battery.value-object';
import { DeviceConfig } from '../value-objects/device-config.value-object';
import { DeviceConsumable } from '../value-objects/device-consumable.value-object';
import { DeviceCurrentClean } from '../value-objects/device-current-clean.value-object';
import { DeviceError } from '../value-objects/device-error.value-object';
import { DeviceFanSpeed } from '../value-objects/device-fan-speed.value-object';
import { DeviceMode } from '../value-objects/device-mode.value-object';
import { DeviceOperationMode } from '../value-objects/device-operation-mode.value-object';
import { DeviceState } from '../value-objects/device-state.value-object';
import { DeviceSystem } from '../value-objects/device-system.value-object';
import { DeviceVersion } from '../value-objects/device-version.value-object';
import { DeviceWaterLevel } from '../value-objects/device-water-level.value-object';
import { DeviceWlan } from '../value-objects/device-wlan.value-object';
import { ID } from '../value-objects/id.value-object';
import { DeviceMap } from './device-map.entity';
import { DeviceOrder } from './device-order.entity';
export interface DeviceProps {
    id: ID;
    system: DeviceSystem;
    version: DeviceVersion;
    config?: DeviceConfig;
    currentClean?: DeviceCurrentClean;
    orders?: DeviceOrder[];
    consumables?: DeviceConsumable[];
    map?: DeviceMap;
    wlan?: DeviceWlan;
    battery?: DeviceBattery;
    state?: DeviceState;
    mode?: DeviceMode;
    error?: DeviceError;
    fanSpeed?: DeviceFanSpeed;
    operationMode?: DeviceOperationMode;
    waterLevel?: DeviceWaterLevel;
    hasMopAttached?: boolean;
    hasWaitingMap?: boolean;
}
export declare class Device extends Entity<DeviceProps> {
    constructor(props: DeviceProps);
    get system(): DeviceSystem;
    get version(): DeviceVersion;
    get config(): DeviceConfig | undefined;
    get currentClean(): DeviceCurrentClean | undefined;
    get orders(): DeviceOrder[] | undefined;
    get consumables(): DeviceConsumable[] | undefined;
    get map(): DeviceMap | undefined;
    get wlan(): DeviceWlan | undefined;
    get battery(): DeviceBattery | undefined;
    get state(): DeviceState | undefined;
    get mode(): DeviceMode | undefined;
    get error(): DeviceError | undefined;
    get fanSpeed(): DeviceFanSpeed | undefined;
    get operationMode(): DeviceOperationMode | undefined;
    get waterLevel(): DeviceWaterLevel | undefined;
    get hasMopAttached(): boolean | undefined;
    get hasWaitingMap(): boolean | undefined;
    updateSystem(system: DeviceSystem): void;
    updateVersion(version: DeviceVersion): void;
    updateConfig(config: DeviceConfig): void;
    updateCurrentClean(currentClean: DeviceCurrentClean): void;
    updateOrders(orders: DeviceOrder[]): void;
    updateConsumables(consumables: DeviceConsumable[]): void;
    updateMap(map: DeviceMap): void;
    updateWlan(wlan: DeviceWlan): void;
    updateBattery(battery: DeviceBattery): void;
    updateState(state: DeviceState): void;
    updateMode(mode: DeviceMode): void;
    updateOperationMode(operationMode: DeviceOperationMode): void;
    updateError(error: DeviceError): void;
    updateFanSpeed(fanSpeed: DeviceFanSpeed): void;
    updateWaterLevel(waterLevel: DeviceWaterLevel): void;
    updateHasMopAttached(value: boolean): void;
    updateHasWaitingMap(value: boolean): void;
    protected validate(props: DeviceProps): void;
}
