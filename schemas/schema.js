// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.COMMON_ERROR_REPLY = (function() {

    /**
     * Properties of a COMMON_ERROR_REPLY.
     * @exports ICOMMON_ERROR_REPLY
     * @interface ICOMMON_ERROR_REPLY
     * @property {number} result COMMON_ERROR_REPLY result
     * @property {string} error COMMON_ERROR_REPLY error
     * @property {number|null} [opcode] COMMON_ERROR_REPLY opcode
     */

    /**
     * Constructs a new COMMON_ERROR_REPLY.
     * @exports COMMON_ERROR_REPLY
     * @classdesc Represents a COMMON_ERROR_REPLY.
     * @implements ICOMMON_ERROR_REPLY
     * @constructor
     * @param {ICOMMON_ERROR_REPLY=} [properties] Properties to set
     */
    function COMMON_ERROR_REPLY(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * COMMON_ERROR_REPLY result.
     * @member {number} result
     * @memberof COMMON_ERROR_REPLY
     * @instance
     */
    COMMON_ERROR_REPLY.prototype.result = 0;

    /**
     * COMMON_ERROR_REPLY error.
     * @member {string} error
     * @memberof COMMON_ERROR_REPLY
     * @instance
     */
    COMMON_ERROR_REPLY.prototype.error = "";

    /**
     * COMMON_ERROR_REPLY opcode.
     * @member {number} opcode
     * @memberof COMMON_ERROR_REPLY
     * @instance
     */
    COMMON_ERROR_REPLY.prototype.opcode = 0;

    /**
     * Creates a new COMMON_ERROR_REPLY instance using the specified properties.
     * @function create
     * @memberof COMMON_ERROR_REPLY
     * @static
     * @param {ICOMMON_ERROR_REPLY=} [properties] Properties to set
     * @returns {COMMON_ERROR_REPLY} COMMON_ERROR_REPLY instance
     */
    COMMON_ERROR_REPLY.create = function create(properties) {
        return new COMMON_ERROR_REPLY(properties);
    };

    /**
     * Encodes the specified COMMON_ERROR_REPLY message. Does not implicitly {@link COMMON_ERROR_REPLY.verify|verify} messages.
     * @function encode
     * @memberof COMMON_ERROR_REPLY
     * @static
     * @param {ICOMMON_ERROR_REPLY} message COMMON_ERROR_REPLY message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    COMMON_ERROR_REPLY.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.error);
        if (message.opcode != null && Object.hasOwnProperty.call(message, "opcode"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.opcode);
        return writer;
    };

    /**
     * Encodes the specified COMMON_ERROR_REPLY message, length delimited. Does not implicitly {@link COMMON_ERROR_REPLY.verify|verify} messages.
     * @function encodeDelimited
     * @memberof COMMON_ERROR_REPLY
     * @static
     * @param {ICOMMON_ERROR_REPLY} message COMMON_ERROR_REPLY message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    COMMON_ERROR_REPLY.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a COMMON_ERROR_REPLY message from the specified reader or buffer.
     * @function decode
     * @memberof COMMON_ERROR_REPLY
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {COMMON_ERROR_REPLY} COMMON_ERROR_REPLY
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    COMMON_ERROR_REPLY.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.COMMON_ERROR_REPLY();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 2: {
                    message.error = reader.string();
                    break;
                }
            case 3: {
                    message.opcode = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("error"))
            throw $util.ProtocolError("missing required 'error'", { instance: message });
        return message;
    };

    /**
     * Decodes a COMMON_ERROR_REPLY message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof COMMON_ERROR_REPLY
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {COMMON_ERROR_REPLY} COMMON_ERROR_REPLY
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    COMMON_ERROR_REPLY.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a COMMON_ERROR_REPLY message.
     * @function verify
     * @memberof COMMON_ERROR_REPLY
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    COMMON_ERROR_REPLY.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        if (!$util.isString(message.error))
            return "error: string expected";
        if (message.opcode != null && message.hasOwnProperty("opcode"))
            if (!$util.isInteger(message.opcode))
                return "opcode: integer expected";
        return null;
    };

    /**
     * Creates a COMMON_ERROR_REPLY message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof COMMON_ERROR_REPLY
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {COMMON_ERROR_REPLY} COMMON_ERROR_REPLY
     */
    COMMON_ERROR_REPLY.fromObject = function fromObject(object) {
        if (object instanceof $root.COMMON_ERROR_REPLY)
            return object;
        var message = new $root.COMMON_ERROR_REPLY();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.error != null)
            message.error = String(object.error);
        if (object.opcode != null)
            message.opcode = object.opcode >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a COMMON_ERROR_REPLY message. Also converts values to other types if specified.
     * @function toObject
     * @memberof COMMON_ERROR_REPLY
     * @static
     * @param {COMMON_ERROR_REPLY} message COMMON_ERROR_REPLY
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    COMMON_ERROR_REPLY.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.error = "";
            object.opcode = 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.opcode != null && message.hasOwnProperty("opcode"))
            object.opcode = message.opcode;
        return object;
    };

    /**
     * Converts this COMMON_ERROR_REPLY to JSON.
     * @function toJSON
     * @memberof COMMON_ERROR_REPLY
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    COMMON_ERROR_REPLY.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for COMMON_ERROR_REPLY
     * @function getTypeUrl
     * @memberof COMMON_ERROR_REPLY
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    COMMON_ERROR_REPLY.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/COMMON_ERROR_REPLY";
    };

    return COMMON_ERROR_REPLY;
})();

$root.CLIENT_IDLE_TIMEOUT = (function() {

    /**
     * Properties of a CLIENT_IDLE_TIMEOUT.
     * @exports ICLIENT_IDLE_TIMEOUT
     * @interface ICLIENT_IDLE_TIMEOUT
     */

    /**
     * Constructs a new CLIENT_IDLE_TIMEOUT.
     * @exports CLIENT_IDLE_TIMEOUT
     * @classdesc Represents a CLIENT_IDLE_TIMEOUT.
     * @implements ICLIENT_IDLE_TIMEOUT
     * @constructor
     * @param {ICLIENT_IDLE_TIMEOUT=} [properties] Properties to set
     */
    function CLIENT_IDLE_TIMEOUT(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CLIENT_IDLE_TIMEOUT instance using the specified properties.
     * @function create
     * @memberof CLIENT_IDLE_TIMEOUT
     * @static
     * @param {ICLIENT_IDLE_TIMEOUT=} [properties] Properties to set
     * @returns {CLIENT_IDLE_TIMEOUT} CLIENT_IDLE_TIMEOUT instance
     */
    CLIENT_IDLE_TIMEOUT.create = function create(properties) {
        return new CLIENT_IDLE_TIMEOUT(properties);
    };

    /**
     * Encodes the specified CLIENT_IDLE_TIMEOUT message. Does not implicitly {@link CLIENT_IDLE_TIMEOUT.verify|verify} messages.
     * @function encode
     * @memberof CLIENT_IDLE_TIMEOUT
     * @static
     * @param {ICLIENT_IDLE_TIMEOUT} message CLIENT_IDLE_TIMEOUT message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CLIENT_IDLE_TIMEOUT.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CLIENT_IDLE_TIMEOUT message, length delimited. Does not implicitly {@link CLIENT_IDLE_TIMEOUT.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CLIENT_IDLE_TIMEOUT
     * @static
     * @param {ICLIENT_IDLE_TIMEOUT} message CLIENT_IDLE_TIMEOUT message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CLIENT_IDLE_TIMEOUT.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CLIENT_IDLE_TIMEOUT message from the specified reader or buffer.
     * @function decode
     * @memberof CLIENT_IDLE_TIMEOUT
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CLIENT_IDLE_TIMEOUT} CLIENT_IDLE_TIMEOUT
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CLIENT_IDLE_TIMEOUT.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CLIENT_IDLE_TIMEOUT();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CLIENT_IDLE_TIMEOUT message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CLIENT_IDLE_TIMEOUT
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CLIENT_IDLE_TIMEOUT} CLIENT_IDLE_TIMEOUT
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CLIENT_IDLE_TIMEOUT.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CLIENT_IDLE_TIMEOUT message.
     * @function verify
     * @memberof CLIENT_IDLE_TIMEOUT
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CLIENT_IDLE_TIMEOUT.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CLIENT_IDLE_TIMEOUT message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CLIENT_IDLE_TIMEOUT
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CLIENT_IDLE_TIMEOUT} CLIENT_IDLE_TIMEOUT
     */
    CLIENT_IDLE_TIMEOUT.fromObject = function fromObject(object) {
        if (object instanceof $root.CLIENT_IDLE_TIMEOUT)
            return object;
        return new $root.CLIENT_IDLE_TIMEOUT();
    };

    /**
     * Creates a plain object from a CLIENT_IDLE_TIMEOUT message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CLIENT_IDLE_TIMEOUT
     * @static
     * @param {CLIENT_IDLE_TIMEOUT} message CLIENT_IDLE_TIMEOUT
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CLIENT_IDLE_TIMEOUT.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CLIENT_IDLE_TIMEOUT to JSON.
     * @function toJSON
     * @memberof CLIENT_IDLE_TIMEOUT
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CLIENT_IDLE_TIMEOUT.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CLIENT_IDLE_TIMEOUT
     * @function getTypeUrl
     * @memberof CLIENT_IDLE_TIMEOUT
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CLIENT_IDLE_TIMEOUT.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CLIENT_IDLE_TIMEOUT";
    };

    return CLIENT_IDLE_TIMEOUT;
})();

$root.DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED = (function() {

    /**
     * Properties of a DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.
     * @exports IDEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @interface IDEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @property {number} result DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED result
     */

    /**
     * Constructs a new DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.
     * @exports DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @classdesc Represents a DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.
     * @implements IDEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @constructor
     * @param {IDEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED=} [properties] Properties to set
     */
    function DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED result.
     * @member {number} result
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @instance
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.prototype.result = 0;

    /**
     * Creates a new DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @static
     * @param {IDEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED=} [properties] Properties to set
     * @returns {DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED} DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED instance
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.create = function create(properties) {
        return new DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED message. Does not implicitly {@link DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @static
     * @param {IDEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED} message DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED message, length delimited. Does not implicitly {@link DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @static
     * @param {IDEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED} message DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED} DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED} DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED message.
     * @function verify
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED} DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED)
            return object;
        var message = new $root.DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @static
     * @param {DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED} message DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED";
    };

    return DEVICE_MAPID_PUSH_HAS_WAITING_BE_SAVED;
})();

$root.CLIENT_HEARTBEAT_REQ = (function() {

    /**
     * Properties of a CLIENT_HEARTBEAT_REQ.
     * @exports ICLIENT_HEARTBEAT_REQ
     * @interface ICLIENT_HEARTBEAT_REQ
     */

    /**
     * Constructs a new CLIENT_HEARTBEAT_REQ.
     * @exports CLIENT_HEARTBEAT_REQ
     * @classdesc Represents a CLIENT_HEARTBEAT_REQ.
     * @implements ICLIENT_HEARTBEAT_REQ
     * @constructor
     * @param {ICLIENT_HEARTBEAT_REQ=} [properties] Properties to set
     */
    function CLIENT_HEARTBEAT_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CLIENT_HEARTBEAT_REQ instance using the specified properties.
     * @function create
     * @memberof CLIENT_HEARTBEAT_REQ
     * @static
     * @param {ICLIENT_HEARTBEAT_REQ=} [properties] Properties to set
     * @returns {CLIENT_HEARTBEAT_REQ} CLIENT_HEARTBEAT_REQ instance
     */
    CLIENT_HEARTBEAT_REQ.create = function create(properties) {
        return new CLIENT_HEARTBEAT_REQ(properties);
    };

    /**
     * Encodes the specified CLIENT_HEARTBEAT_REQ message. Does not implicitly {@link CLIENT_HEARTBEAT_REQ.verify|verify} messages.
     * @function encode
     * @memberof CLIENT_HEARTBEAT_REQ
     * @static
     * @param {ICLIENT_HEARTBEAT_REQ} message CLIENT_HEARTBEAT_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CLIENT_HEARTBEAT_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CLIENT_HEARTBEAT_REQ message, length delimited. Does not implicitly {@link CLIENT_HEARTBEAT_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CLIENT_HEARTBEAT_REQ
     * @static
     * @param {ICLIENT_HEARTBEAT_REQ} message CLIENT_HEARTBEAT_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CLIENT_HEARTBEAT_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CLIENT_HEARTBEAT_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof CLIENT_HEARTBEAT_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CLIENT_HEARTBEAT_REQ} CLIENT_HEARTBEAT_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CLIENT_HEARTBEAT_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CLIENT_HEARTBEAT_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CLIENT_HEARTBEAT_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CLIENT_HEARTBEAT_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CLIENT_HEARTBEAT_REQ} CLIENT_HEARTBEAT_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CLIENT_HEARTBEAT_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CLIENT_HEARTBEAT_REQ message.
     * @function verify
     * @memberof CLIENT_HEARTBEAT_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CLIENT_HEARTBEAT_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CLIENT_HEARTBEAT_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CLIENT_HEARTBEAT_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CLIENT_HEARTBEAT_REQ} CLIENT_HEARTBEAT_REQ
     */
    CLIENT_HEARTBEAT_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.CLIENT_HEARTBEAT_REQ)
            return object;
        return new $root.CLIENT_HEARTBEAT_REQ();
    };

    /**
     * Creates a plain object from a CLIENT_HEARTBEAT_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CLIENT_HEARTBEAT_REQ
     * @static
     * @param {CLIENT_HEARTBEAT_REQ} message CLIENT_HEARTBEAT_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CLIENT_HEARTBEAT_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CLIENT_HEARTBEAT_REQ to JSON.
     * @function toJSON
     * @memberof CLIENT_HEARTBEAT_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CLIENT_HEARTBEAT_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CLIENT_HEARTBEAT_REQ
     * @function getTypeUrl
     * @memberof CLIENT_HEARTBEAT_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CLIENT_HEARTBEAT_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CLIENT_HEARTBEAT_REQ";
    };

    return CLIENT_HEARTBEAT_REQ;
})();

$root.CLIENT_HEARTBEAT_RSP = (function() {

    /**
     * Properties of a CLIENT_HEARTBEAT_RSP.
     * @exports ICLIENT_HEARTBEAT_RSP
     * @interface ICLIENT_HEARTBEAT_RSP
     */

    /**
     * Constructs a new CLIENT_HEARTBEAT_RSP.
     * @exports CLIENT_HEARTBEAT_RSP
     * @classdesc Represents a CLIENT_HEARTBEAT_RSP.
     * @implements ICLIENT_HEARTBEAT_RSP
     * @constructor
     * @param {ICLIENT_HEARTBEAT_RSP=} [properties] Properties to set
     */
    function CLIENT_HEARTBEAT_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new CLIENT_HEARTBEAT_RSP instance using the specified properties.
     * @function create
     * @memberof CLIENT_HEARTBEAT_RSP
     * @static
     * @param {ICLIENT_HEARTBEAT_RSP=} [properties] Properties to set
     * @returns {CLIENT_HEARTBEAT_RSP} CLIENT_HEARTBEAT_RSP instance
     */
    CLIENT_HEARTBEAT_RSP.create = function create(properties) {
        return new CLIENT_HEARTBEAT_RSP(properties);
    };

    /**
     * Encodes the specified CLIENT_HEARTBEAT_RSP message. Does not implicitly {@link CLIENT_HEARTBEAT_RSP.verify|verify} messages.
     * @function encode
     * @memberof CLIENT_HEARTBEAT_RSP
     * @static
     * @param {ICLIENT_HEARTBEAT_RSP} message CLIENT_HEARTBEAT_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CLIENT_HEARTBEAT_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified CLIENT_HEARTBEAT_RSP message, length delimited. Does not implicitly {@link CLIENT_HEARTBEAT_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CLIENT_HEARTBEAT_RSP
     * @static
     * @param {ICLIENT_HEARTBEAT_RSP} message CLIENT_HEARTBEAT_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CLIENT_HEARTBEAT_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CLIENT_HEARTBEAT_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof CLIENT_HEARTBEAT_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CLIENT_HEARTBEAT_RSP} CLIENT_HEARTBEAT_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CLIENT_HEARTBEAT_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CLIENT_HEARTBEAT_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CLIENT_HEARTBEAT_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CLIENT_HEARTBEAT_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CLIENT_HEARTBEAT_RSP} CLIENT_HEARTBEAT_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CLIENT_HEARTBEAT_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CLIENT_HEARTBEAT_RSP message.
     * @function verify
     * @memberof CLIENT_HEARTBEAT_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CLIENT_HEARTBEAT_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a CLIENT_HEARTBEAT_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CLIENT_HEARTBEAT_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CLIENT_HEARTBEAT_RSP} CLIENT_HEARTBEAT_RSP
     */
    CLIENT_HEARTBEAT_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.CLIENT_HEARTBEAT_RSP)
            return object;
        return new $root.CLIENT_HEARTBEAT_RSP();
    };

    /**
     * Creates a plain object from a CLIENT_HEARTBEAT_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CLIENT_HEARTBEAT_RSP
     * @static
     * @param {CLIENT_HEARTBEAT_RSP} message CLIENT_HEARTBEAT_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CLIENT_HEARTBEAT_RSP.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this CLIENT_HEARTBEAT_RSP to JSON.
     * @function toJSON
     * @memberof CLIENT_HEARTBEAT_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CLIENT_HEARTBEAT_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CLIENT_HEARTBEAT_RSP
     * @function getTypeUrl
     * @memberof CLIENT_HEARTBEAT_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CLIENT_HEARTBEAT_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CLIENT_HEARTBEAT_RSP";
    };

    return CLIENT_HEARTBEAT_RSP;
})();

$root.CLIENT_ONLINE_REQ = (function() {

    /**
     * Properties of a CLIENT_ONLINE_REQ.
     * @exports ICLIENT_ONLINE_REQ
     * @interface ICLIENT_ONLINE_REQ
     * @property {string} deviceSerialNumber CLIENT_ONLINE_REQ deviceSerialNumber
     * @property {boolean} unk1 CLIENT_ONLINE_REQ unk1
     * @property {number} unk2 CLIENT_ONLINE_REQ unk2
     */

    /**
     * Constructs a new CLIENT_ONLINE_REQ.
     * @exports CLIENT_ONLINE_REQ
     * @classdesc Represents a CLIENT_ONLINE_REQ.
     * @implements ICLIENT_ONLINE_REQ
     * @constructor
     * @param {ICLIENT_ONLINE_REQ=} [properties] Properties to set
     */
    function CLIENT_ONLINE_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CLIENT_ONLINE_REQ deviceSerialNumber.
     * @member {string} deviceSerialNumber
     * @memberof CLIENT_ONLINE_REQ
     * @instance
     */
    CLIENT_ONLINE_REQ.prototype.deviceSerialNumber = "";

    /**
     * CLIENT_ONLINE_REQ unk1.
     * @member {boolean} unk1
     * @memberof CLIENT_ONLINE_REQ
     * @instance
     */
    CLIENT_ONLINE_REQ.prototype.unk1 = false;

    /**
     * CLIENT_ONLINE_REQ unk2.
     * @member {number} unk2
     * @memberof CLIENT_ONLINE_REQ
     * @instance
     */
    CLIENT_ONLINE_REQ.prototype.unk2 = 0;

    /**
     * Creates a new CLIENT_ONLINE_REQ instance using the specified properties.
     * @function create
     * @memberof CLIENT_ONLINE_REQ
     * @static
     * @param {ICLIENT_ONLINE_REQ=} [properties] Properties to set
     * @returns {CLIENT_ONLINE_REQ} CLIENT_ONLINE_REQ instance
     */
    CLIENT_ONLINE_REQ.create = function create(properties) {
        return new CLIENT_ONLINE_REQ(properties);
    };

    /**
     * Encodes the specified CLIENT_ONLINE_REQ message. Does not implicitly {@link CLIENT_ONLINE_REQ.verify|verify} messages.
     * @function encode
     * @memberof CLIENT_ONLINE_REQ
     * @static
     * @param {ICLIENT_ONLINE_REQ} message CLIENT_ONLINE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CLIENT_ONLINE_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 2 =*/10).string(message.deviceSerialNumber);
        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.unk1);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.unk2);
        return writer;
    };

    /**
     * Encodes the specified CLIENT_ONLINE_REQ message, length delimited. Does not implicitly {@link CLIENT_ONLINE_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CLIENT_ONLINE_REQ
     * @static
     * @param {ICLIENT_ONLINE_REQ} message CLIENT_ONLINE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CLIENT_ONLINE_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CLIENT_ONLINE_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof CLIENT_ONLINE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CLIENT_ONLINE_REQ} CLIENT_ONLINE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CLIENT_ONLINE_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CLIENT_ONLINE_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.deviceSerialNumber = reader.string();
                    break;
                }
            case 2: {
                    message.unk1 = reader.bool();
                    break;
                }
            case 3: {
                    message.unk2 = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("deviceSerialNumber"))
            throw $util.ProtocolError("missing required 'deviceSerialNumber'", { instance: message });
        if (!message.hasOwnProperty("unk1"))
            throw $util.ProtocolError("missing required 'unk1'", { instance: message });
        if (!message.hasOwnProperty("unk2"))
            throw $util.ProtocolError("missing required 'unk2'", { instance: message });
        return message;
    };

    /**
     * Decodes a CLIENT_ONLINE_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CLIENT_ONLINE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CLIENT_ONLINE_REQ} CLIENT_ONLINE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CLIENT_ONLINE_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CLIENT_ONLINE_REQ message.
     * @function verify
     * @memberof CLIENT_ONLINE_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CLIENT_ONLINE_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isString(message.deviceSerialNumber))
            return "deviceSerialNumber: string expected";
        if (typeof message.unk1 !== "boolean")
            return "unk1: boolean expected";
        if (!$util.isInteger(message.unk2))
            return "unk2: integer expected";
        return null;
    };

    /**
     * Creates a CLIENT_ONLINE_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CLIENT_ONLINE_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CLIENT_ONLINE_REQ} CLIENT_ONLINE_REQ
     */
    CLIENT_ONLINE_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.CLIENT_ONLINE_REQ)
            return object;
        var message = new $root.CLIENT_ONLINE_REQ();
        if (object.deviceSerialNumber != null)
            message.deviceSerialNumber = String(object.deviceSerialNumber);
        if (object.unk1 != null)
            message.unk1 = Boolean(object.unk1);
        if (object.unk2 != null)
            message.unk2 = object.unk2 >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CLIENT_ONLINE_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CLIENT_ONLINE_REQ
     * @static
     * @param {CLIENT_ONLINE_REQ} message CLIENT_ONLINE_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CLIENT_ONLINE_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.deviceSerialNumber = "";
            object.unk1 = false;
            object.unk2 = 0;
        }
        if (message.deviceSerialNumber != null && message.hasOwnProperty("deviceSerialNumber"))
            object.deviceSerialNumber = message.deviceSerialNumber;
        if (message.unk1 != null && message.hasOwnProperty("unk1"))
            object.unk1 = message.unk1;
        if (message.unk2 != null && message.hasOwnProperty("unk2"))
            object.unk2 = message.unk2;
        return object;
    };

    /**
     * Converts this CLIENT_ONLINE_REQ to JSON.
     * @function toJSON
     * @memberof CLIENT_ONLINE_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CLIENT_ONLINE_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CLIENT_ONLINE_REQ
     * @function getTypeUrl
     * @memberof CLIENT_ONLINE_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CLIENT_ONLINE_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CLIENT_ONLINE_REQ";
    };

    return CLIENT_ONLINE_REQ;
})();

$root.CLIENT_ONLINE_RSP = (function() {

    /**
     * Properties of a CLIENT_ONLINE_RSP.
     * @exports ICLIENT_ONLINE_RSP
     * @interface ICLIENT_ONLINE_RSP
     * @property {number} result CLIENT_ONLINE_RSP result
     * @property {string|null} [reason] CLIENT_ONLINE_RSP reason
     */

    /**
     * Constructs a new CLIENT_ONLINE_RSP.
     * @exports CLIENT_ONLINE_RSP
     * @classdesc Represents a CLIENT_ONLINE_RSP.
     * @implements ICLIENT_ONLINE_RSP
     * @constructor
     * @param {ICLIENT_ONLINE_RSP=} [properties] Properties to set
     */
    function CLIENT_ONLINE_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CLIENT_ONLINE_RSP result.
     * @member {number} result
     * @memberof CLIENT_ONLINE_RSP
     * @instance
     */
    CLIENT_ONLINE_RSP.prototype.result = 0;

    /**
     * CLIENT_ONLINE_RSP reason.
     * @member {string} reason
     * @memberof CLIENT_ONLINE_RSP
     * @instance
     */
    CLIENT_ONLINE_RSP.prototype.reason = "";

    /**
     * Creates a new CLIENT_ONLINE_RSP instance using the specified properties.
     * @function create
     * @memberof CLIENT_ONLINE_RSP
     * @static
     * @param {ICLIENT_ONLINE_RSP=} [properties] Properties to set
     * @returns {CLIENT_ONLINE_RSP} CLIENT_ONLINE_RSP instance
     */
    CLIENT_ONLINE_RSP.create = function create(properties) {
        return new CLIENT_ONLINE_RSP(properties);
    };

    /**
     * Encodes the specified CLIENT_ONLINE_RSP message. Does not implicitly {@link CLIENT_ONLINE_RSP.verify|verify} messages.
     * @function encode
     * @memberof CLIENT_ONLINE_RSP
     * @static
     * @param {ICLIENT_ONLINE_RSP} message CLIENT_ONLINE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CLIENT_ONLINE_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
        return writer;
    };

    /**
     * Encodes the specified CLIENT_ONLINE_RSP message, length delimited. Does not implicitly {@link CLIENT_ONLINE_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CLIENT_ONLINE_RSP
     * @static
     * @param {ICLIENT_ONLINE_RSP} message CLIENT_ONLINE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CLIENT_ONLINE_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CLIENT_ONLINE_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof CLIENT_ONLINE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CLIENT_ONLINE_RSP} CLIENT_ONLINE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CLIENT_ONLINE_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CLIENT_ONLINE_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 2: {
                    message.reason = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a CLIENT_ONLINE_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CLIENT_ONLINE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CLIENT_ONLINE_RSP} CLIENT_ONLINE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CLIENT_ONLINE_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CLIENT_ONLINE_RSP message.
     * @function verify
     * @memberof CLIENT_ONLINE_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CLIENT_ONLINE_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        if (message.reason != null && message.hasOwnProperty("reason"))
            if (!$util.isString(message.reason))
                return "reason: string expected";
        return null;
    };

    /**
     * Creates a CLIENT_ONLINE_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CLIENT_ONLINE_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CLIENT_ONLINE_RSP} CLIENT_ONLINE_RSP
     */
    CLIENT_ONLINE_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.CLIENT_ONLINE_RSP)
            return object;
        var message = new $root.CLIENT_ONLINE_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.reason != null)
            message.reason = String(object.reason);
        return message;
    };

    /**
     * Creates a plain object from a CLIENT_ONLINE_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CLIENT_ONLINE_RSP
     * @static
     * @param {CLIENT_ONLINE_RSP} message CLIENT_ONLINE_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CLIENT_ONLINE_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.reason = "";
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.reason != null && message.hasOwnProperty("reason"))
            object.reason = message.reason;
        return object;
    };

    /**
     * Converts this CLIENT_ONLINE_RSP to JSON.
     * @function toJSON
     * @memberof CLIENT_ONLINE_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CLIENT_ONLINE_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CLIENT_ONLINE_RSP
     * @function getTypeUrl
     * @memberof CLIENT_ONLINE_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CLIENT_ONLINE_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CLIENT_ONLINE_RSP";
    };

    return CLIENT_ONLINE_RSP;
})();

$root.DEVICE_REGISTER_REQ = (function() {

    /**
     * Properties of a DEVICE_REGISTER_REQ.
     * @exports IDEVICE_REGISTER_REQ
     * @interface IDEVICE_REGISTER_REQ
     * @property {string} softwareVersion DEVICE_REGISTER_REQ softwareVersion
     * @property {string} hardwareVersion DEVICE_REGISTER_REQ hardwareVersion
     * @property {string} deviceSerialNumber DEVICE_REGISTER_REQ deviceSerialNumber
     * @property {string} deviceMac DEVICE_REGISTER_REQ deviceMac
     * @property {number} deviceType DEVICE_REGISTER_REQ deviceType
     * @property {number} customerFirmwareId DEVICE_REGISTER_REQ customerFirmwareId
     * @property {string} ctrlVersion DEVICE_REGISTER_REQ ctrlVersion
     */

    /**
     * Constructs a new DEVICE_REGISTER_REQ.
     * @exports DEVICE_REGISTER_REQ
     * @classdesc Represents a DEVICE_REGISTER_REQ.
     * @implements IDEVICE_REGISTER_REQ
     * @constructor
     * @param {IDEVICE_REGISTER_REQ=} [properties] Properties to set
     */
    function DEVICE_REGISTER_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_REGISTER_REQ softwareVersion.
     * @member {string} softwareVersion
     * @memberof DEVICE_REGISTER_REQ
     * @instance
     */
    DEVICE_REGISTER_REQ.prototype.softwareVersion = "";

    /**
     * DEVICE_REGISTER_REQ hardwareVersion.
     * @member {string} hardwareVersion
     * @memberof DEVICE_REGISTER_REQ
     * @instance
     */
    DEVICE_REGISTER_REQ.prototype.hardwareVersion = "";

    /**
     * DEVICE_REGISTER_REQ deviceSerialNumber.
     * @member {string} deviceSerialNumber
     * @memberof DEVICE_REGISTER_REQ
     * @instance
     */
    DEVICE_REGISTER_REQ.prototype.deviceSerialNumber = "";

    /**
     * DEVICE_REGISTER_REQ deviceMac.
     * @member {string} deviceMac
     * @memberof DEVICE_REGISTER_REQ
     * @instance
     */
    DEVICE_REGISTER_REQ.prototype.deviceMac = "";

    /**
     * DEVICE_REGISTER_REQ deviceType.
     * @member {number} deviceType
     * @memberof DEVICE_REGISTER_REQ
     * @instance
     */
    DEVICE_REGISTER_REQ.prototype.deviceType = 0;

    /**
     * DEVICE_REGISTER_REQ customerFirmwareId.
     * @member {number} customerFirmwareId
     * @memberof DEVICE_REGISTER_REQ
     * @instance
     */
    DEVICE_REGISTER_REQ.prototype.customerFirmwareId = 0;

    /**
     * DEVICE_REGISTER_REQ ctrlVersion.
     * @member {string} ctrlVersion
     * @memberof DEVICE_REGISTER_REQ
     * @instance
     */
    DEVICE_REGISTER_REQ.prototype.ctrlVersion = "";

    /**
     * Creates a new DEVICE_REGISTER_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_REGISTER_REQ
     * @static
     * @param {IDEVICE_REGISTER_REQ=} [properties] Properties to set
     * @returns {DEVICE_REGISTER_REQ} DEVICE_REGISTER_REQ instance
     */
    DEVICE_REGISTER_REQ.create = function create(properties) {
        return new DEVICE_REGISTER_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_REGISTER_REQ message. Does not implicitly {@link DEVICE_REGISTER_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_REGISTER_REQ
     * @static
     * @param {IDEVICE_REGISTER_REQ} message DEVICE_REGISTER_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_REGISTER_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 2 =*/10).string(message.softwareVersion);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.hardwareVersion);
        writer.uint32(/* id 3, wireType 2 =*/26).string(message.deviceSerialNumber);
        writer.uint32(/* id 4, wireType 2 =*/34).string(message.deviceMac);
        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.deviceType);
        writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.customerFirmwareId);
        writer.uint32(/* id 7, wireType 2 =*/58).string(message.ctrlVersion);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_REGISTER_REQ message, length delimited. Does not implicitly {@link DEVICE_REGISTER_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_REGISTER_REQ
     * @static
     * @param {IDEVICE_REGISTER_REQ} message DEVICE_REGISTER_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_REGISTER_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_REGISTER_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_REGISTER_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_REGISTER_REQ} DEVICE_REGISTER_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_REGISTER_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_REGISTER_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.softwareVersion = reader.string();
                    break;
                }
            case 2: {
                    message.hardwareVersion = reader.string();
                    break;
                }
            case 3: {
                    message.deviceSerialNumber = reader.string();
                    break;
                }
            case 4: {
                    message.deviceMac = reader.string();
                    break;
                }
            case 5: {
                    message.deviceType = reader.uint32();
                    break;
                }
            case 6: {
                    message.customerFirmwareId = reader.uint32();
                    break;
                }
            case 7: {
                    message.ctrlVersion = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("softwareVersion"))
            throw $util.ProtocolError("missing required 'softwareVersion'", { instance: message });
        if (!message.hasOwnProperty("hardwareVersion"))
            throw $util.ProtocolError("missing required 'hardwareVersion'", { instance: message });
        if (!message.hasOwnProperty("deviceSerialNumber"))
            throw $util.ProtocolError("missing required 'deviceSerialNumber'", { instance: message });
        if (!message.hasOwnProperty("deviceMac"))
            throw $util.ProtocolError("missing required 'deviceMac'", { instance: message });
        if (!message.hasOwnProperty("deviceType"))
            throw $util.ProtocolError("missing required 'deviceType'", { instance: message });
        if (!message.hasOwnProperty("customerFirmwareId"))
            throw $util.ProtocolError("missing required 'customerFirmwareId'", { instance: message });
        if (!message.hasOwnProperty("ctrlVersion"))
            throw $util.ProtocolError("missing required 'ctrlVersion'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_REGISTER_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_REGISTER_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_REGISTER_REQ} DEVICE_REGISTER_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_REGISTER_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_REGISTER_REQ message.
     * @function verify
     * @memberof DEVICE_REGISTER_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_REGISTER_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isString(message.softwareVersion))
            return "softwareVersion: string expected";
        if (!$util.isString(message.hardwareVersion))
            return "hardwareVersion: string expected";
        if (!$util.isString(message.deviceSerialNumber))
            return "deviceSerialNumber: string expected";
        if (!$util.isString(message.deviceMac))
            return "deviceMac: string expected";
        if (!$util.isInteger(message.deviceType))
            return "deviceType: integer expected";
        if (!$util.isInteger(message.customerFirmwareId))
            return "customerFirmwareId: integer expected";
        if (!$util.isString(message.ctrlVersion))
            return "ctrlVersion: string expected";
        return null;
    };

    /**
     * Creates a DEVICE_REGISTER_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_REGISTER_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_REGISTER_REQ} DEVICE_REGISTER_REQ
     */
    DEVICE_REGISTER_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_REGISTER_REQ)
            return object;
        var message = new $root.DEVICE_REGISTER_REQ();
        if (object.softwareVersion != null)
            message.softwareVersion = String(object.softwareVersion);
        if (object.hardwareVersion != null)
            message.hardwareVersion = String(object.hardwareVersion);
        if (object.deviceSerialNumber != null)
            message.deviceSerialNumber = String(object.deviceSerialNumber);
        if (object.deviceMac != null)
            message.deviceMac = String(object.deviceMac);
        if (object.deviceType != null)
            message.deviceType = object.deviceType >>> 0;
        if (object.customerFirmwareId != null)
            message.customerFirmwareId = object.customerFirmwareId >>> 0;
        if (object.ctrlVersion != null)
            message.ctrlVersion = String(object.ctrlVersion);
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_REGISTER_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_REGISTER_REQ
     * @static
     * @param {DEVICE_REGISTER_REQ} message DEVICE_REGISTER_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_REGISTER_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.softwareVersion = "";
            object.hardwareVersion = "";
            object.deviceSerialNumber = "";
            object.deviceMac = "";
            object.deviceType = 0;
            object.customerFirmwareId = 0;
            object.ctrlVersion = "";
        }
        if (message.softwareVersion != null && message.hasOwnProperty("softwareVersion"))
            object.softwareVersion = message.softwareVersion;
        if (message.hardwareVersion != null && message.hasOwnProperty("hardwareVersion"))
            object.hardwareVersion = message.hardwareVersion;
        if (message.deviceSerialNumber != null && message.hasOwnProperty("deviceSerialNumber"))
            object.deviceSerialNumber = message.deviceSerialNumber;
        if (message.deviceMac != null && message.hasOwnProperty("deviceMac"))
            object.deviceMac = message.deviceMac;
        if (message.deviceType != null && message.hasOwnProperty("deviceType"))
            object.deviceType = message.deviceType;
        if (message.customerFirmwareId != null && message.hasOwnProperty("customerFirmwareId"))
            object.customerFirmwareId = message.customerFirmwareId;
        if (message.ctrlVersion != null && message.hasOwnProperty("ctrlVersion"))
            object.ctrlVersion = message.ctrlVersion;
        return object;
    };

    /**
     * Converts this DEVICE_REGISTER_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_REGISTER_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_REGISTER_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_REGISTER_REQ
     * @function getTypeUrl
     * @memberof DEVICE_REGISTER_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_REGISTER_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_REGISTER_REQ";
    };

    return DEVICE_REGISTER_REQ;
})();

$root.DEVICE_REGISTER_RSP = (function() {

    /**
     * Properties of a DEVICE_REGISTER_RSP.
     * @exports IDEVICE_REGISTER_RSP
     * @interface IDEVICE_REGISTER_RSP
     * @property {number} result DEVICE_REGISTER_RSP result
     * @property {DEVICE_REGISTER_RSP.IDevice} device DEVICE_REGISTER_RSP device
     */

    /**
     * Constructs a new DEVICE_REGISTER_RSP.
     * @exports DEVICE_REGISTER_RSP
     * @classdesc Represents a DEVICE_REGISTER_RSP.
     * @implements IDEVICE_REGISTER_RSP
     * @constructor
     * @param {IDEVICE_REGISTER_RSP=} [properties] Properties to set
     */
    function DEVICE_REGISTER_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_REGISTER_RSP result.
     * @member {number} result
     * @memberof DEVICE_REGISTER_RSP
     * @instance
     */
    DEVICE_REGISTER_RSP.prototype.result = 0;

    /**
     * DEVICE_REGISTER_RSP device.
     * @member {DEVICE_REGISTER_RSP.IDevice} device
     * @memberof DEVICE_REGISTER_RSP
     * @instance
     */
    DEVICE_REGISTER_RSP.prototype.device = null;

    /**
     * Creates a new DEVICE_REGISTER_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_REGISTER_RSP
     * @static
     * @param {IDEVICE_REGISTER_RSP=} [properties] Properties to set
     * @returns {DEVICE_REGISTER_RSP} DEVICE_REGISTER_RSP instance
     */
    DEVICE_REGISTER_RSP.create = function create(properties) {
        return new DEVICE_REGISTER_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_REGISTER_RSP message. Does not implicitly {@link DEVICE_REGISTER_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_REGISTER_RSP
     * @static
     * @param {IDEVICE_REGISTER_RSP} message DEVICE_REGISTER_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_REGISTER_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        $root.DEVICE_REGISTER_RSP.Device.encode(message.device, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_REGISTER_RSP message, length delimited. Does not implicitly {@link DEVICE_REGISTER_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_REGISTER_RSP
     * @static
     * @param {IDEVICE_REGISTER_RSP} message DEVICE_REGISTER_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_REGISTER_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_REGISTER_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_REGISTER_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_REGISTER_RSP} DEVICE_REGISTER_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_REGISTER_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_REGISTER_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.device = $root.DEVICE_REGISTER_RSP.Device.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("device"))
            throw $util.ProtocolError("missing required 'device'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_REGISTER_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_REGISTER_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_REGISTER_RSP} DEVICE_REGISTER_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_REGISTER_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_REGISTER_RSP message.
     * @function verify
     * @memberof DEVICE_REGISTER_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_REGISTER_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        {
            var error = $root.DEVICE_REGISTER_RSP.Device.verify(message.device);
            if (error)
                return "device." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_REGISTER_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_REGISTER_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_REGISTER_RSP} DEVICE_REGISTER_RSP
     */
    DEVICE_REGISTER_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_REGISTER_RSP)
            return object;
        var message = new $root.DEVICE_REGISTER_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.device != null) {
            if (typeof object.device !== "object")
                throw TypeError(".DEVICE_REGISTER_RSP.device: object expected");
            message.device = $root.DEVICE_REGISTER_RSP.Device.fromObject(object.device);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_REGISTER_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_REGISTER_RSP
     * @static
     * @param {DEVICE_REGISTER_RSP} message DEVICE_REGISTER_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_REGISTER_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.device = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.device != null && message.hasOwnProperty("device"))
            object.device = $root.DEVICE_REGISTER_RSP.Device.toObject(message.device, options);
        return object;
    };

    /**
     * Converts this DEVICE_REGISTER_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_REGISTER_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_REGISTER_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_REGISTER_RSP
     * @function getTypeUrl
     * @memberof DEVICE_REGISTER_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_REGISTER_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_REGISTER_RSP";
    };

    DEVICE_REGISTER_RSP.Device = (function() {

        /**
         * Properties of a Device.
         * @memberof DEVICE_REGISTER_RSP
         * @interface IDevice
         * @property {number} id Device id
         */

        /**
         * Constructs a new Device.
         * @memberof DEVICE_REGISTER_RSP
         * @classdesc Represents a Device.
         * @implements IDevice
         * @constructor
         * @param {DEVICE_REGISTER_RSP.IDevice=} [properties] Properties to set
         */
        function Device(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Device id.
         * @member {number} id
         * @memberof DEVICE_REGISTER_RSP.Device
         * @instance
         */
        Device.prototype.id = 0;

        /**
         * Creates a new Device instance using the specified properties.
         * @function create
         * @memberof DEVICE_REGISTER_RSP.Device
         * @static
         * @param {DEVICE_REGISTER_RSP.IDevice=} [properties] Properties to set
         * @returns {DEVICE_REGISTER_RSP.Device} Device instance
         */
        Device.create = function create(properties) {
            return new Device(properties);
        };

        /**
         * Encodes the specified Device message. Does not implicitly {@link DEVICE_REGISTER_RSP.Device.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_REGISTER_RSP.Device
         * @static
         * @param {DEVICE_REGISTER_RSP.IDevice} message Device message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Device.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            return writer;
        };

        /**
         * Encodes the specified Device message, length delimited. Does not implicitly {@link DEVICE_REGISTER_RSP.Device.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_REGISTER_RSP.Device
         * @static
         * @param {DEVICE_REGISTER_RSP.IDevice} message Device message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Device.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Device message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_REGISTER_RSP.Device
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_REGISTER_RSP.Device} Device
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Device.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_REGISTER_RSP.Device();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.id = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            return message;
        };

        /**
         * Decodes a Device message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_REGISTER_RSP.Device
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_REGISTER_RSP.Device} Device
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Device.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Device message.
         * @function verify
         * @memberof DEVICE_REGISTER_RSP.Device
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Device.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            return null;
        };

        /**
         * Creates a Device message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_REGISTER_RSP.Device
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_REGISTER_RSP.Device} Device
         */
        Device.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_REGISTER_RSP.Device)
                return object;
            var message = new $root.DEVICE_REGISTER_RSP.Device();
            if (object.id != null)
                message.id = object.id >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Device message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_REGISTER_RSP.Device
         * @static
         * @param {DEVICE_REGISTER_RSP.Device} message Device
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Device.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this Device to JSON.
         * @function toJSON
         * @memberof DEVICE_REGISTER_RSP.Device
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Device.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Device
         * @function getTypeUrl
         * @memberof DEVICE_REGISTER_RSP.Device
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Device.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_REGISTER_RSP.Device";
        };

        return Device;
    })();

    return DEVICE_REGISTER_RSP;
})();

$root.DEVICE_VERSION_INFO_UPDATE_REQ = (function() {

    /**
     * Properties of a DEVICE_VERSION_INFO_UPDATE_REQ.
     * @exports IDEVICE_VERSION_INFO_UPDATE_REQ
     * @interface IDEVICE_VERSION_INFO_UPDATE_REQ
     * @property {string} softwareVersion DEVICE_VERSION_INFO_UPDATE_REQ softwareVersion
     * @property {string} hardwareVersion DEVICE_VERSION_INFO_UPDATE_REQ hardwareVersion
     */

    /**
     * Constructs a new DEVICE_VERSION_INFO_UPDATE_REQ.
     * @exports DEVICE_VERSION_INFO_UPDATE_REQ
     * @classdesc Represents a DEVICE_VERSION_INFO_UPDATE_REQ.
     * @implements IDEVICE_VERSION_INFO_UPDATE_REQ
     * @constructor
     * @param {IDEVICE_VERSION_INFO_UPDATE_REQ=} [properties] Properties to set
     */
    function DEVICE_VERSION_INFO_UPDATE_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_VERSION_INFO_UPDATE_REQ softwareVersion.
     * @member {string} softwareVersion
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @instance
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.prototype.softwareVersion = "";

    /**
     * DEVICE_VERSION_INFO_UPDATE_REQ hardwareVersion.
     * @member {string} hardwareVersion
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @instance
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.prototype.hardwareVersion = "";

    /**
     * Creates a new DEVICE_VERSION_INFO_UPDATE_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @static
     * @param {IDEVICE_VERSION_INFO_UPDATE_REQ=} [properties] Properties to set
     * @returns {DEVICE_VERSION_INFO_UPDATE_REQ} DEVICE_VERSION_INFO_UPDATE_REQ instance
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.create = function create(properties) {
        return new DEVICE_VERSION_INFO_UPDATE_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_VERSION_INFO_UPDATE_REQ message. Does not implicitly {@link DEVICE_VERSION_INFO_UPDATE_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @static
     * @param {IDEVICE_VERSION_INFO_UPDATE_REQ} message DEVICE_VERSION_INFO_UPDATE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 2 =*/10).string(message.softwareVersion);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.hardwareVersion);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_VERSION_INFO_UPDATE_REQ message, length delimited. Does not implicitly {@link DEVICE_VERSION_INFO_UPDATE_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @static
     * @param {IDEVICE_VERSION_INFO_UPDATE_REQ} message DEVICE_VERSION_INFO_UPDATE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_VERSION_INFO_UPDATE_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_VERSION_INFO_UPDATE_REQ} DEVICE_VERSION_INFO_UPDATE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_VERSION_INFO_UPDATE_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.softwareVersion = reader.string();
                    break;
                }
            case 2: {
                    message.hardwareVersion = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("softwareVersion"))
            throw $util.ProtocolError("missing required 'softwareVersion'", { instance: message });
        if (!message.hasOwnProperty("hardwareVersion"))
            throw $util.ProtocolError("missing required 'hardwareVersion'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_VERSION_INFO_UPDATE_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_VERSION_INFO_UPDATE_REQ} DEVICE_VERSION_INFO_UPDATE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_VERSION_INFO_UPDATE_REQ message.
     * @function verify
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isString(message.softwareVersion))
            return "softwareVersion: string expected";
        if (!$util.isString(message.hardwareVersion))
            return "hardwareVersion: string expected";
        return null;
    };

    /**
     * Creates a DEVICE_VERSION_INFO_UPDATE_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_VERSION_INFO_UPDATE_REQ} DEVICE_VERSION_INFO_UPDATE_REQ
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_VERSION_INFO_UPDATE_REQ)
            return object;
        var message = new $root.DEVICE_VERSION_INFO_UPDATE_REQ();
        if (object.softwareVersion != null)
            message.softwareVersion = String(object.softwareVersion);
        if (object.hardwareVersion != null)
            message.hardwareVersion = String(object.hardwareVersion);
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_VERSION_INFO_UPDATE_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @static
     * @param {DEVICE_VERSION_INFO_UPDATE_REQ} message DEVICE_VERSION_INFO_UPDATE_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.softwareVersion = "";
            object.hardwareVersion = "";
        }
        if (message.softwareVersion != null && message.hasOwnProperty("softwareVersion"))
            object.softwareVersion = message.softwareVersion;
        if (message.hardwareVersion != null && message.hasOwnProperty("hardwareVersion"))
            object.hardwareVersion = message.hardwareVersion;
        return object;
    };

    /**
     * Converts this DEVICE_VERSION_INFO_UPDATE_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_VERSION_INFO_UPDATE_REQ
     * @function getTypeUrl
     * @memberof DEVICE_VERSION_INFO_UPDATE_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_VERSION_INFO_UPDATE_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_VERSION_INFO_UPDATE_REQ";
    };

    return DEVICE_VERSION_INFO_UPDATE_REQ;
})();

$root.DEVICE_VERSION_INFO_UPDATE_RSP = (function() {

    /**
     * Properties of a DEVICE_VERSION_INFO_UPDATE_RSP.
     * @exports IDEVICE_VERSION_INFO_UPDATE_RSP
     * @interface IDEVICE_VERSION_INFO_UPDATE_RSP
     * @property {number} result DEVICE_VERSION_INFO_UPDATE_RSP result
     */

    /**
     * Constructs a new DEVICE_VERSION_INFO_UPDATE_RSP.
     * @exports DEVICE_VERSION_INFO_UPDATE_RSP
     * @classdesc Represents a DEVICE_VERSION_INFO_UPDATE_RSP.
     * @implements IDEVICE_VERSION_INFO_UPDATE_RSP
     * @constructor
     * @param {IDEVICE_VERSION_INFO_UPDATE_RSP=} [properties] Properties to set
     */
    function DEVICE_VERSION_INFO_UPDATE_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_VERSION_INFO_UPDATE_RSP result.
     * @member {number} result
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @instance
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_VERSION_INFO_UPDATE_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @static
     * @param {IDEVICE_VERSION_INFO_UPDATE_RSP=} [properties] Properties to set
     * @returns {DEVICE_VERSION_INFO_UPDATE_RSP} DEVICE_VERSION_INFO_UPDATE_RSP instance
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.create = function create(properties) {
        return new DEVICE_VERSION_INFO_UPDATE_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_VERSION_INFO_UPDATE_RSP message. Does not implicitly {@link DEVICE_VERSION_INFO_UPDATE_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @static
     * @param {IDEVICE_VERSION_INFO_UPDATE_RSP} message DEVICE_VERSION_INFO_UPDATE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_VERSION_INFO_UPDATE_RSP message, length delimited. Does not implicitly {@link DEVICE_VERSION_INFO_UPDATE_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @static
     * @param {IDEVICE_VERSION_INFO_UPDATE_RSP} message DEVICE_VERSION_INFO_UPDATE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_VERSION_INFO_UPDATE_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_VERSION_INFO_UPDATE_RSP} DEVICE_VERSION_INFO_UPDATE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_VERSION_INFO_UPDATE_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_VERSION_INFO_UPDATE_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_VERSION_INFO_UPDATE_RSP} DEVICE_VERSION_INFO_UPDATE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_VERSION_INFO_UPDATE_RSP message.
     * @function verify
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_VERSION_INFO_UPDATE_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_VERSION_INFO_UPDATE_RSP} DEVICE_VERSION_INFO_UPDATE_RSP
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_VERSION_INFO_UPDATE_RSP)
            return object;
        var message = new $root.DEVICE_VERSION_INFO_UPDATE_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_VERSION_INFO_UPDATE_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @static
     * @param {DEVICE_VERSION_INFO_UPDATE_RSP} message DEVICE_VERSION_INFO_UPDATE_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_VERSION_INFO_UPDATE_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_VERSION_INFO_UPDATE_RSP
     * @function getTypeUrl
     * @memberof DEVICE_VERSION_INFO_UPDATE_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_VERSION_INFO_UPDATE_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_VERSION_INFO_UPDATE_RSP";
    };

    return DEVICE_VERSION_INFO_UPDATE_RSP;
})();

$root.PUSH_DEVICE_AGENT_SETTING_REQ = (function() {

    /**
     * Properties of a PUSH_DEVICE_AGENT_SETTING_REQ.
     * @exports IPUSH_DEVICE_AGENT_SETTING_REQ
     * @interface IPUSH_DEVICE_AGENT_SETTING_REQ
     * @property {number} deviceId PUSH_DEVICE_AGENT_SETTING_REQ deviceId
     * @property {IUSER_SET_DEVICE_CTRL_SETTING_REQ} voice PUSH_DEVICE_AGENT_SETTING_REQ voice
     * @property {IUSER_SET_DEVICE_CLEANPREFERENCE_REQ} cleanPreference PUSH_DEVICE_AGENT_SETTING_REQ cleanPreference
     * @property {IDEVICE_ORDERLIST_SETTING_REQ|null} [taskList] PUSH_DEVICE_AGENT_SETTING_REQ taskList
     * @property {IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ} ota PUSH_DEVICE_AGENT_SETTING_REQ ota
     * @property {IUSER_SET_DEVICE_QUIETHOURS_REQ} quietHours PUSH_DEVICE_AGENT_SETTING_REQ quietHours
     */

    /**
     * Constructs a new PUSH_DEVICE_AGENT_SETTING_REQ.
     * @exports PUSH_DEVICE_AGENT_SETTING_REQ
     * @classdesc Represents a PUSH_DEVICE_AGENT_SETTING_REQ.
     * @implements IPUSH_DEVICE_AGENT_SETTING_REQ
     * @constructor
     * @param {IPUSH_DEVICE_AGENT_SETTING_REQ=} [properties] Properties to set
     */
    function PUSH_DEVICE_AGENT_SETTING_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PUSH_DEVICE_AGENT_SETTING_REQ deviceId.
     * @member {number} deviceId
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @instance
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.prototype.deviceId = 0;

    /**
     * PUSH_DEVICE_AGENT_SETTING_REQ voice.
     * @member {IUSER_SET_DEVICE_CTRL_SETTING_REQ} voice
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @instance
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.prototype.voice = null;

    /**
     * PUSH_DEVICE_AGENT_SETTING_REQ cleanPreference.
     * @member {IUSER_SET_DEVICE_CLEANPREFERENCE_REQ} cleanPreference
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @instance
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.prototype.cleanPreference = null;

    /**
     * PUSH_DEVICE_AGENT_SETTING_REQ taskList.
     * @member {IDEVICE_ORDERLIST_SETTING_REQ|null|undefined} taskList
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @instance
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.prototype.taskList = null;

    /**
     * PUSH_DEVICE_AGENT_SETTING_REQ ota.
     * @member {IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ} ota
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @instance
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.prototype.ota = null;

    /**
     * PUSH_DEVICE_AGENT_SETTING_REQ quietHours.
     * @member {IUSER_SET_DEVICE_QUIETHOURS_REQ} quietHours
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @instance
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.prototype.quietHours = null;

    /**
     * Creates a new PUSH_DEVICE_AGENT_SETTING_REQ instance using the specified properties.
     * @function create
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @static
     * @param {IPUSH_DEVICE_AGENT_SETTING_REQ=} [properties] Properties to set
     * @returns {PUSH_DEVICE_AGENT_SETTING_REQ} PUSH_DEVICE_AGENT_SETTING_REQ instance
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.create = function create(properties) {
        return new PUSH_DEVICE_AGENT_SETTING_REQ(properties);
    };

    /**
     * Encodes the specified PUSH_DEVICE_AGENT_SETTING_REQ message. Does not implicitly {@link PUSH_DEVICE_AGENT_SETTING_REQ.verify|verify} messages.
     * @function encode
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @static
     * @param {IPUSH_DEVICE_AGENT_SETTING_REQ} message PUSH_DEVICE_AGENT_SETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.deviceId);
        $root.USER_SET_DEVICE_CTRL_SETTING_REQ.encode(message.voice, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        $root.USER_SET_DEVICE_CLEANPREFERENCE_REQ.encode(message.cleanPreference, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.taskList != null && Object.hasOwnProperty.call(message, "taskList"))
            $root.DEVICE_ORDERLIST_SETTING_REQ.encode(message.taskList, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.encode(message.ota, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        $root.USER_SET_DEVICE_QUIETHOURS_REQ.encode(message.quietHours, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PUSH_DEVICE_AGENT_SETTING_REQ message, length delimited. Does not implicitly {@link PUSH_DEVICE_AGENT_SETTING_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @static
     * @param {IPUSH_DEVICE_AGENT_SETTING_REQ} message PUSH_DEVICE_AGENT_SETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PUSH_DEVICE_AGENT_SETTING_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PUSH_DEVICE_AGENT_SETTING_REQ} PUSH_DEVICE_AGENT_SETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PUSH_DEVICE_AGENT_SETTING_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.deviceId = reader.uint32();
                    break;
                }
            case 2: {
                    message.voice = $root.USER_SET_DEVICE_CTRL_SETTING_REQ.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.cleanPreference = $root.USER_SET_DEVICE_CLEANPREFERENCE_REQ.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.taskList = $root.DEVICE_ORDERLIST_SETTING_REQ.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.ota = $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.quietHours = $root.USER_SET_DEVICE_QUIETHOURS_REQ.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("deviceId"))
            throw $util.ProtocolError("missing required 'deviceId'", { instance: message });
        if (!message.hasOwnProperty("voice"))
            throw $util.ProtocolError("missing required 'voice'", { instance: message });
        if (!message.hasOwnProperty("cleanPreference"))
            throw $util.ProtocolError("missing required 'cleanPreference'", { instance: message });
        if (!message.hasOwnProperty("ota"))
            throw $util.ProtocolError("missing required 'ota'", { instance: message });
        if (!message.hasOwnProperty("quietHours"))
            throw $util.ProtocolError("missing required 'quietHours'", { instance: message });
        return message;
    };

    /**
     * Decodes a PUSH_DEVICE_AGENT_SETTING_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PUSH_DEVICE_AGENT_SETTING_REQ} PUSH_DEVICE_AGENT_SETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PUSH_DEVICE_AGENT_SETTING_REQ message.
     * @function verify
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.deviceId))
            return "deviceId: integer expected";
        {
            var error = $root.USER_SET_DEVICE_CTRL_SETTING_REQ.verify(message.voice);
            if (error)
                return "voice." + error;
        }
        {
            var error = $root.USER_SET_DEVICE_CLEANPREFERENCE_REQ.verify(message.cleanPreference);
            if (error)
                return "cleanPreference." + error;
        }
        if (message.taskList != null && message.hasOwnProperty("taskList")) {
            var error = $root.DEVICE_ORDERLIST_SETTING_REQ.verify(message.taskList);
            if (error)
                return "taskList." + error;
        }
        {
            var error = $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.verify(message.ota);
            if (error)
                return "ota." + error;
        }
        {
            var error = $root.USER_SET_DEVICE_QUIETHOURS_REQ.verify(message.quietHours);
            if (error)
                return "quietHours." + error;
        }
        return null;
    };

    /**
     * Creates a PUSH_DEVICE_AGENT_SETTING_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PUSH_DEVICE_AGENT_SETTING_REQ} PUSH_DEVICE_AGENT_SETTING_REQ
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_DEVICE_AGENT_SETTING_REQ)
            return object;
        var message = new $root.PUSH_DEVICE_AGENT_SETTING_REQ();
        if (object.deviceId != null)
            message.deviceId = object.deviceId >>> 0;
        if (object.voice != null) {
            if (typeof object.voice !== "object")
                throw TypeError(".PUSH_DEVICE_AGENT_SETTING_REQ.voice: object expected");
            message.voice = $root.USER_SET_DEVICE_CTRL_SETTING_REQ.fromObject(object.voice);
        }
        if (object.cleanPreference != null) {
            if (typeof object.cleanPreference !== "object")
                throw TypeError(".PUSH_DEVICE_AGENT_SETTING_REQ.cleanPreference: object expected");
            message.cleanPreference = $root.USER_SET_DEVICE_CLEANPREFERENCE_REQ.fromObject(object.cleanPreference);
        }
        if (object.taskList != null) {
            if (typeof object.taskList !== "object")
                throw TypeError(".PUSH_DEVICE_AGENT_SETTING_REQ.taskList: object expected");
            message.taskList = $root.DEVICE_ORDERLIST_SETTING_REQ.fromObject(object.taskList);
        }
        if (object.ota != null) {
            if (typeof object.ota !== "object")
                throw TypeError(".PUSH_DEVICE_AGENT_SETTING_REQ.ota: object expected");
            message.ota = $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.fromObject(object.ota);
        }
        if (object.quietHours != null) {
            if (typeof object.quietHours !== "object")
                throw TypeError(".PUSH_DEVICE_AGENT_SETTING_REQ.quietHours: object expected");
            message.quietHours = $root.USER_SET_DEVICE_QUIETHOURS_REQ.fromObject(object.quietHours);
        }
        return message;
    };

    /**
     * Creates a plain object from a PUSH_DEVICE_AGENT_SETTING_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @static
     * @param {PUSH_DEVICE_AGENT_SETTING_REQ} message PUSH_DEVICE_AGENT_SETTING_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.deviceId = 0;
            object.voice = null;
            object.cleanPreference = null;
            object.taskList = null;
            object.ota = null;
            object.quietHours = null;
        }
        if (message.deviceId != null && message.hasOwnProperty("deviceId"))
            object.deviceId = message.deviceId;
        if (message.voice != null && message.hasOwnProperty("voice"))
            object.voice = $root.USER_SET_DEVICE_CTRL_SETTING_REQ.toObject(message.voice, options);
        if (message.cleanPreference != null && message.hasOwnProperty("cleanPreference"))
            object.cleanPreference = $root.USER_SET_DEVICE_CLEANPREFERENCE_REQ.toObject(message.cleanPreference, options);
        if (message.taskList != null && message.hasOwnProperty("taskList"))
            object.taskList = $root.DEVICE_ORDERLIST_SETTING_REQ.toObject(message.taskList, options);
        if (message.ota != null && message.hasOwnProperty("ota"))
            object.ota = $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.toObject(message.ota, options);
        if (message.quietHours != null && message.hasOwnProperty("quietHours"))
            object.quietHours = $root.USER_SET_DEVICE_QUIETHOURS_REQ.toObject(message.quietHours, options);
        return object;
    };

    /**
     * Converts this PUSH_DEVICE_AGENT_SETTING_REQ to JSON.
     * @function toJSON
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PUSH_DEVICE_AGENT_SETTING_REQ
     * @function getTypeUrl
     * @memberof PUSH_DEVICE_AGENT_SETTING_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PUSH_DEVICE_AGENT_SETTING_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PUSH_DEVICE_AGENT_SETTING_REQ";
    };

    return PUSH_DEVICE_AGENT_SETTING_REQ;
})();

$root.PUSH_DEVICE_AGENT_SETTING_RSP = (function() {

    /**
     * Properties of a PUSH_DEVICE_AGENT_SETTING_RSP.
     * @exports IPUSH_DEVICE_AGENT_SETTING_RSP
     * @interface IPUSH_DEVICE_AGENT_SETTING_RSP
     * @property {number} result PUSH_DEVICE_AGENT_SETTING_RSP result
     */

    /**
     * Constructs a new PUSH_DEVICE_AGENT_SETTING_RSP.
     * @exports PUSH_DEVICE_AGENT_SETTING_RSP
     * @classdesc Represents a PUSH_DEVICE_AGENT_SETTING_RSP.
     * @implements IPUSH_DEVICE_AGENT_SETTING_RSP
     * @constructor
     * @param {IPUSH_DEVICE_AGENT_SETTING_RSP=} [properties] Properties to set
     */
    function PUSH_DEVICE_AGENT_SETTING_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PUSH_DEVICE_AGENT_SETTING_RSP result.
     * @member {number} result
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @instance
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.prototype.result = 0;

    /**
     * Creates a new PUSH_DEVICE_AGENT_SETTING_RSP instance using the specified properties.
     * @function create
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @static
     * @param {IPUSH_DEVICE_AGENT_SETTING_RSP=} [properties] Properties to set
     * @returns {PUSH_DEVICE_AGENT_SETTING_RSP} PUSH_DEVICE_AGENT_SETTING_RSP instance
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.create = function create(properties) {
        return new PUSH_DEVICE_AGENT_SETTING_RSP(properties);
    };

    /**
     * Encodes the specified PUSH_DEVICE_AGENT_SETTING_RSP message. Does not implicitly {@link PUSH_DEVICE_AGENT_SETTING_RSP.verify|verify} messages.
     * @function encode
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @static
     * @param {IPUSH_DEVICE_AGENT_SETTING_RSP} message PUSH_DEVICE_AGENT_SETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified PUSH_DEVICE_AGENT_SETTING_RSP message, length delimited. Does not implicitly {@link PUSH_DEVICE_AGENT_SETTING_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @static
     * @param {IPUSH_DEVICE_AGENT_SETTING_RSP} message PUSH_DEVICE_AGENT_SETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PUSH_DEVICE_AGENT_SETTING_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PUSH_DEVICE_AGENT_SETTING_RSP} PUSH_DEVICE_AGENT_SETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PUSH_DEVICE_AGENT_SETTING_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a PUSH_DEVICE_AGENT_SETTING_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PUSH_DEVICE_AGENT_SETTING_RSP} PUSH_DEVICE_AGENT_SETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PUSH_DEVICE_AGENT_SETTING_RSP message.
     * @function verify
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a PUSH_DEVICE_AGENT_SETTING_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PUSH_DEVICE_AGENT_SETTING_RSP} PUSH_DEVICE_AGENT_SETTING_RSP
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_DEVICE_AGENT_SETTING_RSP)
            return object;
        var message = new $root.PUSH_DEVICE_AGENT_SETTING_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a PUSH_DEVICE_AGENT_SETTING_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @static
     * @param {PUSH_DEVICE_AGENT_SETTING_RSP} message PUSH_DEVICE_AGENT_SETTING_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this PUSH_DEVICE_AGENT_SETTING_RSP to JSON.
     * @function toJSON
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PUSH_DEVICE_AGENT_SETTING_RSP
     * @function getTypeUrl
     * @memberof PUSH_DEVICE_AGENT_SETTING_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PUSH_DEVICE_AGENT_SETTING_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PUSH_DEVICE_AGENT_SETTING_RSP";
    };

    return PUSH_DEVICE_AGENT_SETTING_RSP;
})();

$root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ = (function() {

    /**
     * Properties of a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.
     * @exports IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @interface IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @property {boolean} newVersion PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ newVersion
     * @property {string} packageSize PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ packageSize
     * @property {string} systemVersion PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ systemVersion
     * @property {string} otaPackageVersion PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ otaPackageVersion
     * @property {string} remoteUrl PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ remoteUrl
     * @property {boolean} forceupgrade PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ forceupgrade
     */

    /**
     * Constructs a new PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.
     * @exports PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @classdesc Represents a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.
     * @implements IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @constructor
     * @param {IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ=} [properties] Properties to set
     */
    function PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ newVersion.
     * @member {boolean} newVersion
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @instance
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.prototype.newVersion = false;

    /**
     * PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ packageSize.
     * @member {string} packageSize
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @instance
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.prototype.packageSize = "";

    /**
     * PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ systemVersion.
     * @member {string} systemVersion
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @instance
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.prototype.systemVersion = "";

    /**
     * PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ otaPackageVersion.
     * @member {string} otaPackageVersion
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @instance
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.prototype.otaPackageVersion = "";

    /**
     * PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ remoteUrl.
     * @member {string} remoteUrl
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @instance
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.prototype.remoteUrl = "";

    /**
     * PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ forceupgrade.
     * @member {boolean} forceupgrade
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @instance
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.prototype.forceupgrade = false;

    /**
     * Creates a new PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ instance using the specified properties.
     * @function create
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @static
     * @param {IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ=} [properties] Properties to set
     * @returns {PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ} PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ instance
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.create = function create(properties) {
        return new PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ(properties);
    };

    /**
     * Encodes the specified PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ message. Does not implicitly {@link PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.verify|verify} messages.
     * @function encode
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @static
     * @param {IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ} message PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.newVersion);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.packageSize);
        writer.uint32(/* id 3, wireType 2 =*/26).string(message.systemVersion);
        writer.uint32(/* id 4, wireType 2 =*/34).string(message.otaPackageVersion);
        writer.uint32(/* id 5, wireType 2 =*/42).string(message.remoteUrl);
        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.forceupgrade);
        return writer;
    };

    /**
     * Encodes the specified PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ message, length delimited. Does not implicitly {@link PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @static
     * @param {IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ} message PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ} PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.newVersion = reader.bool();
                    break;
                }
            case 2: {
                    message.packageSize = reader.string();
                    break;
                }
            case 3: {
                    message.systemVersion = reader.string();
                    break;
                }
            case 4: {
                    message.otaPackageVersion = reader.string();
                    break;
                }
            case 5: {
                    message.remoteUrl = reader.string();
                    break;
                }
            case 6: {
                    message.forceupgrade = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("newVersion"))
            throw $util.ProtocolError("missing required 'newVersion'", { instance: message });
        if (!message.hasOwnProperty("packageSize"))
            throw $util.ProtocolError("missing required 'packageSize'", { instance: message });
        if (!message.hasOwnProperty("systemVersion"))
            throw $util.ProtocolError("missing required 'systemVersion'", { instance: message });
        if (!message.hasOwnProperty("otaPackageVersion"))
            throw $util.ProtocolError("missing required 'otaPackageVersion'", { instance: message });
        if (!message.hasOwnProperty("remoteUrl"))
            throw $util.ProtocolError("missing required 'remoteUrl'", { instance: message });
        if (!message.hasOwnProperty("forceupgrade"))
            throw $util.ProtocolError("missing required 'forceupgrade'", { instance: message });
        return message;
    };

    /**
     * Decodes a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ} PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ message.
     * @function verify
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (typeof message.newVersion !== "boolean")
            return "newVersion: boolean expected";
        if (!$util.isString(message.packageSize))
            return "packageSize: string expected";
        if (!$util.isString(message.systemVersion))
            return "systemVersion: string expected";
        if (!$util.isString(message.otaPackageVersion))
            return "otaPackageVersion: string expected";
        if (!$util.isString(message.remoteUrl))
            return "remoteUrl: string expected";
        if (typeof message.forceupgrade !== "boolean")
            return "forceupgrade: boolean expected";
        return null;
    };

    /**
     * Creates a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ} PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ)
            return object;
        var message = new $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ();
        if (object.newVersion != null)
            message.newVersion = Boolean(object.newVersion);
        if (object.packageSize != null)
            message.packageSize = String(object.packageSize);
        if (object.systemVersion != null)
            message.systemVersion = String(object.systemVersion);
        if (object.otaPackageVersion != null)
            message.otaPackageVersion = String(object.otaPackageVersion);
        if (object.remoteUrl != null)
            message.remoteUrl = String(object.remoteUrl);
        if (object.forceupgrade != null)
            message.forceupgrade = Boolean(object.forceupgrade);
        return message;
    };

    /**
     * Creates a plain object from a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @static
     * @param {PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ} message PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.newVersion = false;
            object.packageSize = "";
            object.systemVersion = "";
            object.otaPackageVersion = "";
            object.remoteUrl = "";
            object.forceupgrade = false;
        }
        if (message.newVersion != null && message.hasOwnProperty("newVersion"))
            object.newVersion = message.newVersion;
        if (message.packageSize != null && message.hasOwnProperty("packageSize"))
            object.packageSize = message.packageSize;
        if (message.systemVersion != null && message.hasOwnProperty("systemVersion"))
            object.systemVersion = message.systemVersion;
        if (message.otaPackageVersion != null && message.hasOwnProperty("otaPackageVersion"))
            object.otaPackageVersion = message.otaPackageVersion;
        if (message.remoteUrl != null && message.hasOwnProperty("remoteUrl"))
            object.remoteUrl = message.remoteUrl;
        if (message.forceupgrade != null && message.hasOwnProperty("forceupgrade"))
            object.forceupgrade = message.forceupgrade;
        return object;
    };

    /**
     * Converts this PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ to JSON.
     * @function toJSON
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @function getTypeUrl
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ";
    };

    return PUSH_DEVICE_PACKAGE_UPGRADE_INFO_REQ;
})();

$root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP = (function() {

    /**
     * Properties of a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.
     * @exports IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @interface IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @property {number} result PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP result
     */

    /**
     * Constructs a new PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.
     * @exports PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @classdesc Represents a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.
     * @implements IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @constructor
     * @param {IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP=} [properties] Properties to set
     */
    function PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP result.
     * @member {number} result
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @instance
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.prototype.result = 0;

    /**
     * Creates a new PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP instance using the specified properties.
     * @function create
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @static
     * @param {IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP=} [properties] Properties to set
     * @returns {PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP} PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP instance
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.create = function create(properties) {
        return new PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP(properties);
    };

    /**
     * Encodes the specified PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP message. Does not implicitly {@link PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.verify|verify} messages.
     * @function encode
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @static
     * @param {IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP} message PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP message, length delimited. Does not implicitly {@link PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @static
     * @param {IPUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP} message PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP} PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP} PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP message.
     * @function verify
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP} PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP)
            return object;
        var message = new $root.PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @static
     * @param {PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP} message PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP to JSON.
     * @function toJSON
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @function getTypeUrl
     * @memberof PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP";
    };

    return PUSH_DEVICE_PACKAGE_UPGRADE_INFO_RSP;
})();

$root.PUSH_DEVICE_BATTERY_INFO_REQ = (function() {

    /**
     * Properties of a PUSH_DEVICE_BATTERY_INFO_REQ.
     * @exports IPUSH_DEVICE_BATTERY_INFO_REQ
     * @interface IPUSH_DEVICE_BATTERY_INFO_REQ
     * @property {PUSH_DEVICE_BATTERY_INFO_REQ.IBattery} battery PUSH_DEVICE_BATTERY_INFO_REQ battery
     */

    /**
     * Constructs a new PUSH_DEVICE_BATTERY_INFO_REQ.
     * @exports PUSH_DEVICE_BATTERY_INFO_REQ
     * @classdesc Represents a PUSH_DEVICE_BATTERY_INFO_REQ.
     * @implements IPUSH_DEVICE_BATTERY_INFO_REQ
     * @constructor
     * @param {IPUSH_DEVICE_BATTERY_INFO_REQ=} [properties] Properties to set
     */
    function PUSH_DEVICE_BATTERY_INFO_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PUSH_DEVICE_BATTERY_INFO_REQ battery.
     * @member {PUSH_DEVICE_BATTERY_INFO_REQ.IBattery} battery
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @instance
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.prototype.battery = null;

    /**
     * Creates a new PUSH_DEVICE_BATTERY_INFO_REQ instance using the specified properties.
     * @function create
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @static
     * @param {IPUSH_DEVICE_BATTERY_INFO_REQ=} [properties] Properties to set
     * @returns {PUSH_DEVICE_BATTERY_INFO_REQ} PUSH_DEVICE_BATTERY_INFO_REQ instance
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.create = function create(properties) {
        return new PUSH_DEVICE_BATTERY_INFO_REQ(properties);
    };

    /**
     * Encodes the specified PUSH_DEVICE_BATTERY_INFO_REQ message. Does not implicitly {@link PUSH_DEVICE_BATTERY_INFO_REQ.verify|verify} messages.
     * @function encode
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @static
     * @param {IPUSH_DEVICE_BATTERY_INFO_REQ} message PUSH_DEVICE_BATTERY_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        $root.PUSH_DEVICE_BATTERY_INFO_REQ.Battery.encode(message.battery, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PUSH_DEVICE_BATTERY_INFO_REQ message, length delimited. Does not implicitly {@link PUSH_DEVICE_BATTERY_INFO_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @static
     * @param {IPUSH_DEVICE_BATTERY_INFO_REQ} message PUSH_DEVICE_BATTERY_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PUSH_DEVICE_BATTERY_INFO_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PUSH_DEVICE_BATTERY_INFO_REQ} PUSH_DEVICE_BATTERY_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PUSH_DEVICE_BATTERY_INFO_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.battery = $root.PUSH_DEVICE_BATTERY_INFO_REQ.Battery.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("battery"))
            throw $util.ProtocolError("missing required 'battery'", { instance: message });
        return message;
    };

    /**
     * Decodes a PUSH_DEVICE_BATTERY_INFO_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PUSH_DEVICE_BATTERY_INFO_REQ} PUSH_DEVICE_BATTERY_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PUSH_DEVICE_BATTERY_INFO_REQ message.
     * @function verify
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        {
            var error = $root.PUSH_DEVICE_BATTERY_INFO_REQ.Battery.verify(message.battery);
            if (error)
                return "battery." + error;
        }
        return null;
    };

    /**
     * Creates a PUSH_DEVICE_BATTERY_INFO_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PUSH_DEVICE_BATTERY_INFO_REQ} PUSH_DEVICE_BATTERY_INFO_REQ
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_DEVICE_BATTERY_INFO_REQ)
            return object;
        var message = new $root.PUSH_DEVICE_BATTERY_INFO_REQ();
        if (object.battery != null) {
            if (typeof object.battery !== "object")
                throw TypeError(".PUSH_DEVICE_BATTERY_INFO_REQ.battery: object expected");
            message.battery = $root.PUSH_DEVICE_BATTERY_INFO_REQ.Battery.fromObject(object.battery);
        }
        return message;
    };

    /**
     * Creates a plain object from a PUSH_DEVICE_BATTERY_INFO_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @static
     * @param {PUSH_DEVICE_BATTERY_INFO_REQ} message PUSH_DEVICE_BATTERY_INFO_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.battery = null;
        if (message.battery != null && message.hasOwnProperty("battery"))
            object.battery = $root.PUSH_DEVICE_BATTERY_INFO_REQ.Battery.toObject(message.battery, options);
        return object;
    };

    /**
     * Converts this PUSH_DEVICE_BATTERY_INFO_REQ to JSON.
     * @function toJSON
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PUSH_DEVICE_BATTERY_INFO_REQ
     * @function getTypeUrl
     * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PUSH_DEVICE_BATTERY_INFO_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PUSH_DEVICE_BATTERY_INFO_REQ";
    };

    PUSH_DEVICE_BATTERY_INFO_REQ.Battery = (function() {

        /**
         * Properties of a Battery.
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
         * @interface IBattery
         * @property {number} level Battery level
         */

        /**
         * Constructs a new Battery.
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ
         * @classdesc Represents a Battery.
         * @implements IBattery
         * @constructor
         * @param {PUSH_DEVICE_BATTERY_INFO_REQ.IBattery=} [properties] Properties to set
         */
        function Battery(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Battery level.
         * @member {number} level
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @instance
         */
        Battery.prototype.level = 0;

        /**
         * Creates a new Battery instance using the specified properties.
         * @function create
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @static
         * @param {PUSH_DEVICE_BATTERY_INFO_REQ.IBattery=} [properties] Properties to set
         * @returns {PUSH_DEVICE_BATTERY_INFO_REQ.Battery} Battery instance
         */
        Battery.create = function create(properties) {
            return new Battery(properties);
        };

        /**
         * Encodes the specified Battery message. Does not implicitly {@link PUSH_DEVICE_BATTERY_INFO_REQ.Battery.verify|verify} messages.
         * @function encode
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @static
         * @param {PUSH_DEVICE_BATTERY_INFO_REQ.IBattery} message Battery message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Battery.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.level);
            return writer;
        };

        /**
         * Encodes the specified Battery message, length delimited. Does not implicitly {@link PUSH_DEVICE_BATTERY_INFO_REQ.Battery.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @static
         * @param {PUSH_DEVICE_BATTERY_INFO_REQ.IBattery} message Battery message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Battery.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Battery message from the specified reader or buffer.
         * @function decode
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PUSH_DEVICE_BATTERY_INFO_REQ.Battery} Battery
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Battery.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PUSH_DEVICE_BATTERY_INFO_REQ.Battery();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.level = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("level"))
                throw $util.ProtocolError("missing required 'level'", { instance: message });
            return message;
        };

        /**
         * Decodes a Battery message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PUSH_DEVICE_BATTERY_INFO_REQ.Battery} Battery
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Battery.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Battery message.
         * @function verify
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Battery.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.level))
                return "level: integer expected";
            return null;
        };

        /**
         * Creates a Battery message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {PUSH_DEVICE_BATTERY_INFO_REQ.Battery} Battery
         */
        Battery.fromObject = function fromObject(object) {
            if (object instanceof $root.PUSH_DEVICE_BATTERY_INFO_REQ.Battery)
                return object;
            var message = new $root.PUSH_DEVICE_BATTERY_INFO_REQ.Battery();
            if (object.level != null)
                message.level = object.level >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Battery message. Also converts values to other types if specified.
         * @function toObject
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @static
         * @param {PUSH_DEVICE_BATTERY_INFO_REQ.Battery} message Battery
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Battery.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.level = 0;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            return object;
        };

        /**
         * Converts this Battery to JSON.
         * @function toJSON
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Battery.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Battery
         * @function getTypeUrl
         * @memberof PUSH_DEVICE_BATTERY_INFO_REQ.Battery
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Battery.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/PUSH_DEVICE_BATTERY_INFO_REQ.Battery";
        };

        return Battery;
    })();

    return PUSH_DEVICE_BATTERY_INFO_REQ;
})();

$root.PUSH_DEVICE_BATTERY_INFO_RSP = (function() {

    /**
     * Properties of a PUSH_DEVICE_BATTERY_INFO_RSP.
     * @exports IPUSH_DEVICE_BATTERY_INFO_RSP
     * @interface IPUSH_DEVICE_BATTERY_INFO_RSP
     * @property {number} result PUSH_DEVICE_BATTERY_INFO_RSP result
     */

    /**
     * Constructs a new PUSH_DEVICE_BATTERY_INFO_RSP.
     * @exports PUSH_DEVICE_BATTERY_INFO_RSP
     * @classdesc Represents a PUSH_DEVICE_BATTERY_INFO_RSP.
     * @implements IPUSH_DEVICE_BATTERY_INFO_RSP
     * @constructor
     * @param {IPUSH_DEVICE_BATTERY_INFO_RSP=} [properties] Properties to set
     */
    function PUSH_DEVICE_BATTERY_INFO_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PUSH_DEVICE_BATTERY_INFO_RSP result.
     * @member {number} result
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @instance
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.prototype.result = 0;

    /**
     * Creates a new PUSH_DEVICE_BATTERY_INFO_RSP instance using the specified properties.
     * @function create
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @static
     * @param {IPUSH_DEVICE_BATTERY_INFO_RSP=} [properties] Properties to set
     * @returns {PUSH_DEVICE_BATTERY_INFO_RSP} PUSH_DEVICE_BATTERY_INFO_RSP instance
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.create = function create(properties) {
        return new PUSH_DEVICE_BATTERY_INFO_RSP(properties);
    };

    /**
     * Encodes the specified PUSH_DEVICE_BATTERY_INFO_RSP message. Does not implicitly {@link PUSH_DEVICE_BATTERY_INFO_RSP.verify|verify} messages.
     * @function encode
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @static
     * @param {IPUSH_DEVICE_BATTERY_INFO_RSP} message PUSH_DEVICE_BATTERY_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified PUSH_DEVICE_BATTERY_INFO_RSP message, length delimited. Does not implicitly {@link PUSH_DEVICE_BATTERY_INFO_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @static
     * @param {IPUSH_DEVICE_BATTERY_INFO_RSP} message PUSH_DEVICE_BATTERY_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PUSH_DEVICE_BATTERY_INFO_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PUSH_DEVICE_BATTERY_INFO_RSP} PUSH_DEVICE_BATTERY_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PUSH_DEVICE_BATTERY_INFO_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a PUSH_DEVICE_BATTERY_INFO_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PUSH_DEVICE_BATTERY_INFO_RSP} PUSH_DEVICE_BATTERY_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PUSH_DEVICE_BATTERY_INFO_RSP message.
     * @function verify
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a PUSH_DEVICE_BATTERY_INFO_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PUSH_DEVICE_BATTERY_INFO_RSP} PUSH_DEVICE_BATTERY_INFO_RSP
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.PUSH_DEVICE_BATTERY_INFO_RSP)
            return object;
        var message = new $root.PUSH_DEVICE_BATTERY_INFO_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a PUSH_DEVICE_BATTERY_INFO_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @static
     * @param {PUSH_DEVICE_BATTERY_INFO_RSP} message PUSH_DEVICE_BATTERY_INFO_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this PUSH_DEVICE_BATTERY_INFO_RSP to JSON.
     * @function toJSON
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PUSH_DEVICE_BATTERY_INFO_RSP
     * @function getTypeUrl
     * @memberof PUSH_DEVICE_BATTERY_INFO_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PUSH_DEVICE_BATTERY_INFO_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PUSH_DEVICE_BATTERY_INFO_RSP";
    };

    return PUSH_DEVICE_BATTERY_INFO_RSP;
})();

$root.DEVICE_SEEK_LOCATION_REQ = (function() {

    /**
     * Properties of a DEVICE_SEEK_LOCATION_REQ.
     * @exports IDEVICE_SEEK_LOCATION_REQ
     * @interface IDEVICE_SEEK_LOCATION_REQ
     */

    /**
     * Constructs a new DEVICE_SEEK_LOCATION_REQ.
     * @exports DEVICE_SEEK_LOCATION_REQ
     * @classdesc Represents a DEVICE_SEEK_LOCATION_REQ.
     * @implements IDEVICE_SEEK_LOCATION_REQ
     * @constructor
     * @param {IDEVICE_SEEK_LOCATION_REQ=} [properties] Properties to set
     */
    function DEVICE_SEEK_LOCATION_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_SEEK_LOCATION_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_SEEK_LOCATION_REQ
     * @static
     * @param {IDEVICE_SEEK_LOCATION_REQ=} [properties] Properties to set
     * @returns {DEVICE_SEEK_LOCATION_REQ} DEVICE_SEEK_LOCATION_REQ instance
     */
    DEVICE_SEEK_LOCATION_REQ.create = function create(properties) {
        return new DEVICE_SEEK_LOCATION_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_SEEK_LOCATION_REQ message. Does not implicitly {@link DEVICE_SEEK_LOCATION_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_SEEK_LOCATION_REQ
     * @static
     * @param {IDEVICE_SEEK_LOCATION_REQ} message DEVICE_SEEK_LOCATION_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SEEK_LOCATION_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_SEEK_LOCATION_REQ message, length delimited. Does not implicitly {@link DEVICE_SEEK_LOCATION_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_SEEK_LOCATION_REQ
     * @static
     * @param {IDEVICE_SEEK_LOCATION_REQ} message DEVICE_SEEK_LOCATION_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SEEK_LOCATION_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_SEEK_LOCATION_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_SEEK_LOCATION_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_SEEK_LOCATION_REQ} DEVICE_SEEK_LOCATION_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SEEK_LOCATION_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_SEEK_LOCATION_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_SEEK_LOCATION_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_SEEK_LOCATION_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_SEEK_LOCATION_REQ} DEVICE_SEEK_LOCATION_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SEEK_LOCATION_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_SEEK_LOCATION_REQ message.
     * @function verify
     * @memberof DEVICE_SEEK_LOCATION_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_SEEK_LOCATION_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_SEEK_LOCATION_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_SEEK_LOCATION_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_SEEK_LOCATION_REQ} DEVICE_SEEK_LOCATION_REQ
     */
    DEVICE_SEEK_LOCATION_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_SEEK_LOCATION_REQ)
            return object;
        return new $root.DEVICE_SEEK_LOCATION_REQ();
    };

    /**
     * Creates a plain object from a DEVICE_SEEK_LOCATION_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_SEEK_LOCATION_REQ
     * @static
     * @param {DEVICE_SEEK_LOCATION_REQ} message DEVICE_SEEK_LOCATION_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_SEEK_LOCATION_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_SEEK_LOCATION_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_SEEK_LOCATION_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_SEEK_LOCATION_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_SEEK_LOCATION_REQ
     * @function getTypeUrl
     * @memberof DEVICE_SEEK_LOCATION_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_SEEK_LOCATION_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_SEEK_LOCATION_REQ";
    };

    return DEVICE_SEEK_LOCATION_REQ;
})();

$root.DEVICE_SEEK_LOCATION_RSP = (function() {

    /**
     * Properties of a DEVICE_SEEK_LOCATION_RSP.
     * @exports IDEVICE_SEEK_LOCATION_RSP
     * @interface IDEVICE_SEEK_LOCATION_RSP
     */

    /**
     * Constructs a new DEVICE_SEEK_LOCATION_RSP.
     * @exports DEVICE_SEEK_LOCATION_RSP
     * @classdesc Represents a DEVICE_SEEK_LOCATION_RSP.
     * @implements IDEVICE_SEEK_LOCATION_RSP
     * @constructor
     * @param {IDEVICE_SEEK_LOCATION_RSP=} [properties] Properties to set
     */
    function DEVICE_SEEK_LOCATION_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_SEEK_LOCATION_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_SEEK_LOCATION_RSP
     * @static
     * @param {IDEVICE_SEEK_LOCATION_RSP=} [properties] Properties to set
     * @returns {DEVICE_SEEK_LOCATION_RSP} DEVICE_SEEK_LOCATION_RSP instance
     */
    DEVICE_SEEK_LOCATION_RSP.create = function create(properties) {
        return new DEVICE_SEEK_LOCATION_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_SEEK_LOCATION_RSP message. Does not implicitly {@link DEVICE_SEEK_LOCATION_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_SEEK_LOCATION_RSP
     * @static
     * @param {IDEVICE_SEEK_LOCATION_RSP} message DEVICE_SEEK_LOCATION_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SEEK_LOCATION_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_SEEK_LOCATION_RSP message, length delimited. Does not implicitly {@link DEVICE_SEEK_LOCATION_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_SEEK_LOCATION_RSP
     * @static
     * @param {IDEVICE_SEEK_LOCATION_RSP} message DEVICE_SEEK_LOCATION_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SEEK_LOCATION_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_SEEK_LOCATION_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_SEEK_LOCATION_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_SEEK_LOCATION_RSP} DEVICE_SEEK_LOCATION_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SEEK_LOCATION_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_SEEK_LOCATION_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_SEEK_LOCATION_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_SEEK_LOCATION_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_SEEK_LOCATION_RSP} DEVICE_SEEK_LOCATION_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SEEK_LOCATION_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_SEEK_LOCATION_RSP message.
     * @function verify
     * @memberof DEVICE_SEEK_LOCATION_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_SEEK_LOCATION_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_SEEK_LOCATION_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_SEEK_LOCATION_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_SEEK_LOCATION_RSP} DEVICE_SEEK_LOCATION_RSP
     */
    DEVICE_SEEK_LOCATION_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_SEEK_LOCATION_RSP)
            return object;
        return new $root.DEVICE_SEEK_LOCATION_RSP();
    };

    /**
     * Creates a plain object from a DEVICE_SEEK_LOCATION_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_SEEK_LOCATION_RSP
     * @static
     * @param {DEVICE_SEEK_LOCATION_RSP} message DEVICE_SEEK_LOCATION_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_SEEK_LOCATION_RSP.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_SEEK_LOCATION_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_SEEK_LOCATION_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_SEEK_LOCATION_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_SEEK_LOCATION_RSP
     * @function getTypeUrl
     * @memberof DEVICE_SEEK_LOCATION_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_SEEK_LOCATION_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_SEEK_LOCATION_RSP";
    };

    return DEVICE_SEEK_LOCATION_RSP;
})();

$root.DEVICE_STATUS_GETTING_REQ = (function() {

    /**
     * Properties of a DEVICE_STATUS_GETTING_REQ.
     * @exports IDEVICE_STATUS_GETTING_REQ
     * @interface IDEVICE_STATUS_GETTING_REQ
     */

    /**
     * Constructs a new DEVICE_STATUS_GETTING_REQ.
     * @exports DEVICE_STATUS_GETTING_REQ
     * @classdesc Represents a DEVICE_STATUS_GETTING_REQ.
     * @implements IDEVICE_STATUS_GETTING_REQ
     * @constructor
     * @param {IDEVICE_STATUS_GETTING_REQ=} [properties] Properties to set
     */
    function DEVICE_STATUS_GETTING_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_STATUS_GETTING_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_STATUS_GETTING_REQ
     * @static
     * @param {IDEVICE_STATUS_GETTING_REQ=} [properties] Properties to set
     * @returns {DEVICE_STATUS_GETTING_REQ} DEVICE_STATUS_GETTING_REQ instance
     */
    DEVICE_STATUS_GETTING_REQ.create = function create(properties) {
        return new DEVICE_STATUS_GETTING_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_STATUS_GETTING_REQ message. Does not implicitly {@link DEVICE_STATUS_GETTING_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_STATUS_GETTING_REQ
     * @static
     * @param {IDEVICE_STATUS_GETTING_REQ} message DEVICE_STATUS_GETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_STATUS_GETTING_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_STATUS_GETTING_REQ message, length delimited. Does not implicitly {@link DEVICE_STATUS_GETTING_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_STATUS_GETTING_REQ
     * @static
     * @param {IDEVICE_STATUS_GETTING_REQ} message DEVICE_STATUS_GETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_STATUS_GETTING_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_STATUS_GETTING_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_STATUS_GETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_STATUS_GETTING_REQ} DEVICE_STATUS_GETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_STATUS_GETTING_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_STATUS_GETTING_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_STATUS_GETTING_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_STATUS_GETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_STATUS_GETTING_REQ} DEVICE_STATUS_GETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_STATUS_GETTING_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_STATUS_GETTING_REQ message.
     * @function verify
     * @memberof DEVICE_STATUS_GETTING_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_STATUS_GETTING_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_STATUS_GETTING_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_STATUS_GETTING_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_STATUS_GETTING_REQ} DEVICE_STATUS_GETTING_REQ
     */
    DEVICE_STATUS_GETTING_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_STATUS_GETTING_REQ)
            return object;
        return new $root.DEVICE_STATUS_GETTING_REQ();
    };

    /**
     * Creates a plain object from a DEVICE_STATUS_GETTING_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_STATUS_GETTING_REQ
     * @static
     * @param {DEVICE_STATUS_GETTING_REQ} message DEVICE_STATUS_GETTING_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_STATUS_GETTING_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_STATUS_GETTING_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_STATUS_GETTING_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_STATUS_GETTING_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_STATUS_GETTING_REQ
     * @function getTypeUrl
     * @memberof DEVICE_STATUS_GETTING_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_STATUS_GETTING_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_STATUS_GETTING_REQ";
    };

    return DEVICE_STATUS_GETTING_REQ;
})();

$root.DEVICE_MAPID_WORK_STATUS_PUSH_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_WORK_STATUS_PUSH_REQ.
     * @exports IDEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @interface IDEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @property {number} mapHeadId DEVICE_MAPID_WORK_STATUS_PUSH_REQ mapHeadId
     * @property {boolean} areaCleanFlag DEVICE_MAPID_WORK_STATUS_PUSH_REQ areaCleanFlag
     * @property {number} workMode DEVICE_MAPID_WORK_STATUS_PUSH_REQ workMode
     * @property {number} battery DEVICE_MAPID_WORK_STATUS_PUSH_REQ battery
     * @property {boolean} chargeStatus DEVICE_MAPID_WORK_STATUS_PUSH_REQ chargeStatus
     * @property {number} type DEVICE_MAPID_WORK_STATUS_PUSH_REQ type
     * @property {number} faultCode DEVICE_MAPID_WORK_STATUS_PUSH_REQ faultCode
     * @property {number} cleanPreference DEVICE_MAPID_WORK_STATUS_PUSH_REQ cleanPreference
     * @property {boolean} repeatClean DEVICE_MAPID_WORK_STATUS_PUSH_REQ repeatClean
     * @property {number} cleanTime DEVICE_MAPID_WORK_STATUS_PUSH_REQ cleanTime
     * @property {number} cleanSize DEVICE_MAPID_WORK_STATUS_PUSH_REQ cleanSize
     * @property {number|null} [waterLevel] DEVICE_MAPID_WORK_STATUS_PUSH_REQ waterLevel
     * @property {number|null} [dustBoxType] DEVICE_MAPID_WORK_STATUS_PUSH_REQ dustBoxType
     * @property {boolean|null} [mopType] DEVICE_MAPID_WORK_STATUS_PUSH_REQ mopType
     */

    /**
     * Constructs a new DEVICE_MAPID_WORK_STATUS_PUSH_REQ.
     * @exports DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @classdesc Represents a DEVICE_MAPID_WORK_STATUS_PUSH_REQ.
     * @implements IDEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @constructor
     * @param {IDEVICE_MAPID_WORK_STATUS_PUSH_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_WORK_STATUS_PUSH_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ mapHeadId.
     * @member {number} mapHeadId
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.mapHeadId = 0;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ areaCleanFlag.
     * @member {boolean} areaCleanFlag
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.areaCleanFlag = false;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ workMode.
     * @member {number} workMode
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.workMode = 0;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ battery.
     * @member {number} battery
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.battery = 0;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ chargeStatus.
     * @member {boolean} chargeStatus
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.chargeStatus = false;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ type.
     * @member {number} type
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.type = 0;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ faultCode.
     * @member {number} faultCode
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.faultCode = 0;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ cleanPreference.
     * @member {number} cleanPreference
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.cleanPreference = 0;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ repeatClean.
     * @member {boolean} repeatClean
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.repeatClean = false;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ cleanTime.
     * @member {number} cleanTime
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.cleanTime = 0;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ cleanSize.
     * @member {number} cleanSize
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.cleanSize = 0;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ waterLevel.
     * @member {number} waterLevel
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.waterLevel = 0;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ dustBoxType.
     * @member {number} dustBoxType
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.dustBoxType = 0;

    /**
     * DEVICE_MAPID_WORK_STATUS_PUSH_REQ mopType.
     * @member {boolean} mopType
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.mopType = false;

    /**
     * Creates a new DEVICE_MAPID_WORK_STATUS_PUSH_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @static
     * @param {IDEVICE_MAPID_WORK_STATUS_PUSH_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_WORK_STATUS_PUSH_REQ} DEVICE_MAPID_WORK_STATUS_PUSH_REQ instance
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.create = function create(properties) {
        return new DEVICE_MAPID_WORK_STATUS_PUSH_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_WORK_STATUS_PUSH_REQ message. Does not implicitly {@link DEVICE_MAPID_WORK_STATUS_PUSH_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @static
     * @param {IDEVICE_MAPID_WORK_STATUS_PUSH_REQ} message DEVICE_MAPID_WORK_STATUS_PUSH_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mapHeadId);
        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.areaCleanFlag);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.workMode);
        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.battery);
        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.chargeStatus);
        writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.type);
        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.faultCode);
        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.cleanPreference);
        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.repeatClean);
        writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.cleanTime);
        writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.cleanSize);
        if (message.waterLevel != null && Object.hasOwnProperty.call(message, "waterLevel"))
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.waterLevel);
        if (message.dustBoxType != null && Object.hasOwnProperty.call(message, "dustBoxType"))
            writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.dustBoxType);
        if (message.mopType != null && Object.hasOwnProperty.call(message, "mopType"))
            writer.uint32(/* id 14, wireType 0 =*/112).bool(message.mopType);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_WORK_STATUS_PUSH_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_WORK_STATUS_PUSH_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @static
     * @param {IDEVICE_MAPID_WORK_STATUS_PUSH_REQ} message DEVICE_MAPID_WORK_STATUS_PUSH_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_WORK_STATUS_PUSH_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_WORK_STATUS_PUSH_REQ} DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_WORK_STATUS_PUSH_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mapHeadId = reader.uint32();
                    break;
                }
            case 2: {
                    message.areaCleanFlag = reader.bool();
                    break;
                }
            case 3: {
                    message.workMode = reader.uint32();
                    break;
                }
            case 4: {
                    message.battery = reader.uint32();
                    break;
                }
            case 5: {
                    message.chargeStatus = reader.bool();
                    break;
                }
            case 6: {
                    message.type = reader.uint32();
                    break;
                }
            case 7: {
                    message.faultCode = reader.uint32();
                    break;
                }
            case 8: {
                    message.cleanPreference = reader.uint32();
                    break;
                }
            case 9: {
                    message.repeatClean = reader.bool();
                    break;
                }
            case 10: {
                    message.cleanTime = reader.uint32();
                    break;
                }
            case 11: {
                    message.cleanSize = reader.uint32();
                    break;
                }
            case 12: {
                    message.waterLevel = reader.uint32();
                    break;
                }
            case 13: {
                    message.dustBoxType = reader.uint32();
                    break;
                }
            case 14: {
                    message.mopType = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mapHeadId"))
            throw $util.ProtocolError("missing required 'mapHeadId'", { instance: message });
        if (!message.hasOwnProperty("areaCleanFlag"))
            throw $util.ProtocolError("missing required 'areaCleanFlag'", { instance: message });
        if (!message.hasOwnProperty("workMode"))
            throw $util.ProtocolError("missing required 'workMode'", { instance: message });
        if (!message.hasOwnProperty("battery"))
            throw $util.ProtocolError("missing required 'battery'", { instance: message });
        if (!message.hasOwnProperty("chargeStatus"))
            throw $util.ProtocolError("missing required 'chargeStatus'", { instance: message });
        if (!message.hasOwnProperty("type"))
            throw $util.ProtocolError("missing required 'type'", { instance: message });
        if (!message.hasOwnProperty("faultCode"))
            throw $util.ProtocolError("missing required 'faultCode'", { instance: message });
        if (!message.hasOwnProperty("cleanPreference"))
            throw $util.ProtocolError("missing required 'cleanPreference'", { instance: message });
        if (!message.hasOwnProperty("repeatClean"))
            throw $util.ProtocolError("missing required 'repeatClean'", { instance: message });
        if (!message.hasOwnProperty("cleanTime"))
            throw $util.ProtocolError("missing required 'cleanTime'", { instance: message });
        if (!message.hasOwnProperty("cleanSize"))
            throw $util.ProtocolError("missing required 'cleanSize'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_WORK_STATUS_PUSH_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_WORK_STATUS_PUSH_REQ} DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_WORK_STATUS_PUSH_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mapHeadId))
            return "mapHeadId: integer expected";
        if (typeof message.areaCleanFlag !== "boolean")
            return "areaCleanFlag: boolean expected";
        if (!$util.isInteger(message.workMode))
            return "workMode: integer expected";
        if (!$util.isInteger(message.battery))
            return "battery: integer expected";
        if (typeof message.chargeStatus !== "boolean")
            return "chargeStatus: boolean expected";
        if (!$util.isInteger(message.type))
            return "type: integer expected";
        if (!$util.isInteger(message.faultCode))
            return "faultCode: integer expected";
        if (!$util.isInteger(message.cleanPreference))
            return "cleanPreference: integer expected";
        if (typeof message.repeatClean !== "boolean")
            return "repeatClean: boolean expected";
        if (!$util.isInteger(message.cleanTime))
            return "cleanTime: integer expected";
        if (!$util.isInteger(message.cleanSize))
            return "cleanSize: integer expected";
        if (message.waterLevel != null && message.hasOwnProperty("waterLevel"))
            if (!$util.isInteger(message.waterLevel))
                return "waterLevel: integer expected";
        if (message.dustBoxType != null && message.hasOwnProperty("dustBoxType"))
            if (!$util.isInteger(message.dustBoxType))
                return "dustBoxType: integer expected";
        if (message.mopType != null && message.hasOwnProperty("mopType"))
            if (typeof message.mopType !== "boolean")
                return "mopType: boolean expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_WORK_STATUS_PUSH_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_WORK_STATUS_PUSH_REQ} DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_WORK_STATUS_PUSH_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_WORK_STATUS_PUSH_REQ();
        if (object.mapHeadId != null)
            message.mapHeadId = object.mapHeadId >>> 0;
        if (object.areaCleanFlag != null)
            message.areaCleanFlag = Boolean(object.areaCleanFlag);
        if (object.workMode != null)
            message.workMode = object.workMode >>> 0;
        if (object.battery != null)
            message.battery = object.battery >>> 0;
        if (object.chargeStatus != null)
            message.chargeStatus = Boolean(object.chargeStatus);
        if (object.type != null)
            message.type = object.type >>> 0;
        if (object.faultCode != null)
            message.faultCode = object.faultCode >>> 0;
        if (object.cleanPreference != null)
            message.cleanPreference = object.cleanPreference >>> 0;
        if (object.repeatClean != null)
            message.repeatClean = Boolean(object.repeatClean);
        if (object.cleanTime != null)
            message.cleanTime = object.cleanTime >>> 0;
        if (object.cleanSize != null)
            message.cleanSize = object.cleanSize >>> 0;
        if (object.waterLevel != null)
            message.waterLevel = object.waterLevel >>> 0;
        if (object.dustBoxType != null)
            message.dustBoxType = object.dustBoxType >>> 0;
        if (object.mopType != null)
            message.mopType = Boolean(object.mopType);
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_WORK_STATUS_PUSH_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @static
     * @param {DEVICE_MAPID_WORK_STATUS_PUSH_REQ} message DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.mapHeadId = 0;
            object.areaCleanFlag = false;
            object.workMode = 0;
            object.battery = 0;
            object.chargeStatus = false;
            object.type = 0;
            object.faultCode = 0;
            object.cleanPreference = 0;
            object.repeatClean = false;
            object.cleanTime = 0;
            object.cleanSize = 0;
            object.waterLevel = 0;
            object.dustBoxType = 0;
            object.mopType = false;
        }
        if (message.mapHeadId != null && message.hasOwnProperty("mapHeadId"))
            object.mapHeadId = message.mapHeadId;
        if (message.areaCleanFlag != null && message.hasOwnProperty("areaCleanFlag"))
            object.areaCleanFlag = message.areaCleanFlag;
        if (message.workMode != null && message.hasOwnProperty("workMode"))
            object.workMode = message.workMode;
        if (message.battery != null && message.hasOwnProperty("battery"))
            object.battery = message.battery;
        if (message.chargeStatus != null && message.hasOwnProperty("chargeStatus"))
            object.chargeStatus = message.chargeStatus;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.faultCode != null && message.hasOwnProperty("faultCode"))
            object.faultCode = message.faultCode;
        if (message.cleanPreference != null && message.hasOwnProperty("cleanPreference"))
            object.cleanPreference = message.cleanPreference;
        if (message.repeatClean != null && message.hasOwnProperty("repeatClean"))
            object.repeatClean = message.repeatClean;
        if (message.cleanTime != null && message.hasOwnProperty("cleanTime"))
            object.cleanTime = message.cleanTime;
        if (message.cleanSize != null && message.hasOwnProperty("cleanSize"))
            object.cleanSize = message.cleanSize;
        if (message.waterLevel != null && message.hasOwnProperty("waterLevel"))
            object.waterLevel = message.waterLevel;
        if (message.dustBoxType != null && message.hasOwnProperty("dustBoxType"))
            object.dustBoxType = message.dustBoxType;
        if (message.mopType != null && message.hasOwnProperty("mopType"))
            object.mopType = message.mopType;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_WORK_STATUS_PUSH_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_WORK_STATUS_PUSH_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_WORK_STATUS_PUSH_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_WORK_STATUS_PUSH_REQ";
    };

    return DEVICE_MAPID_WORK_STATUS_PUSH_REQ;
})();

$root.DEVICE_SET_CLEAN_PREFERENCE_REQ = (function() {

    /**
     * Properties of a DEVICE_SET_CLEAN_PREFERENCE_REQ.
     * @exports IDEVICE_SET_CLEAN_PREFERENCE_REQ
     * @interface IDEVICE_SET_CLEAN_PREFERENCE_REQ
     * @property {number} mode DEVICE_SET_CLEAN_PREFERENCE_REQ mode
     */

    /**
     * Constructs a new DEVICE_SET_CLEAN_PREFERENCE_REQ.
     * @exports DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @classdesc Represents a DEVICE_SET_CLEAN_PREFERENCE_REQ.
     * @implements IDEVICE_SET_CLEAN_PREFERENCE_REQ
     * @constructor
     * @param {IDEVICE_SET_CLEAN_PREFERENCE_REQ=} [properties] Properties to set
     */
    function DEVICE_SET_CLEAN_PREFERENCE_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_SET_CLEAN_PREFERENCE_REQ mode.
     * @member {number} mode
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @instance
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.prototype.mode = 0;

    /**
     * Creates a new DEVICE_SET_CLEAN_PREFERENCE_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @static
     * @param {IDEVICE_SET_CLEAN_PREFERENCE_REQ=} [properties] Properties to set
     * @returns {DEVICE_SET_CLEAN_PREFERENCE_REQ} DEVICE_SET_CLEAN_PREFERENCE_REQ instance
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.create = function create(properties) {
        return new DEVICE_SET_CLEAN_PREFERENCE_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_SET_CLEAN_PREFERENCE_REQ message. Does not implicitly {@link DEVICE_SET_CLEAN_PREFERENCE_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @static
     * @param {IDEVICE_SET_CLEAN_PREFERENCE_REQ} message DEVICE_SET_CLEAN_PREFERENCE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mode);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_SET_CLEAN_PREFERENCE_REQ message, length delimited. Does not implicitly {@link DEVICE_SET_CLEAN_PREFERENCE_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @static
     * @param {IDEVICE_SET_CLEAN_PREFERENCE_REQ} message DEVICE_SET_CLEAN_PREFERENCE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_SET_CLEAN_PREFERENCE_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_SET_CLEAN_PREFERENCE_REQ} DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_SET_CLEAN_PREFERENCE_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mode = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mode"))
            throw $util.ProtocolError("missing required 'mode'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_SET_CLEAN_PREFERENCE_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_SET_CLEAN_PREFERENCE_REQ} DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_SET_CLEAN_PREFERENCE_REQ message.
     * @function verify
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mode))
            return "mode: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_SET_CLEAN_PREFERENCE_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_SET_CLEAN_PREFERENCE_REQ} DEVICE_SET_CLEAN_PREFERENCE_REQ
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_SET_CLEAN_PREFERENCE_REQ)
            return object;
        var message = new $root.DEVICE_SET_CLEAN_PREFERENCE_REQ();
        if (object.mode != null)
            message.mode = object.mode >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_SET_CLEAN_PREFERENCE_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @static
     * @param {DEVICE_SET_CLEAN_PREFERENCE_REQ} message DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.mode = 0;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = message.mode;
        return object;
    };

    /**
     * Converts this DEVICE_SET_CLEAN_PREFERENCE_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @function getTypeUrl
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_SET_CLEAN_PREFERENCE_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_SET_CLEAN_PREFERENCE_REQ";
    };

    return DEVICE_SET_CLEAN_PREFERENCE_REQ;
})();

$root.DEVICE_SET_CLEAN_PREFERENCE_RSP = (function() {

    /**
     * Properties of a DEVICE_SET_CLEAN_PREFERENCE_RSP.
     * @exports IDEVICE_SET_CLEAN_PREFERENCE_RSP
     * @interface IDEVICE_SET_CLEAN_PREFERENCE_RSP
     * @property {number} result DEVICE_SET_CLEAN_PREFERENCE_RSP result
     */

    /**
     * Constructs a new DEVICE_SET_CLEAN_PREFERENCE_RSP.
     * @exports DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @classdesc Represents a DEVICE_SET_CLEAN_PREFERENCE_RSP.
     * @implements IDEVICE_SET_CLEAN_PREFERENCE_RSP
     * @constructor
     * @param {IDEVICE_SET_CLEAN_PREFERENCE_RSP=} [properties] Properties to set
     */
    function DEVICE_SET_CLEAN_PREFERENCE_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_SET_CLEAN_PREFERENCE_RSP result.
     * @member {number} result
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @instance
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_SET_CLEAN_PREFERENCE_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @static
     * @param {IDEVICE_SET_CLEAN_PREFERENCE_RSP=} [properties] Properties to set
     * @returns {DEVICE_SET_CLEAN_PREFERENCE_RSP} DEVICE_SET_CLEAN_PREFERENCE_RSP instance
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.create = function create(properties) {
        return new DEVICE_SET_CLEAN_PREFERENCE_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_SET_CLEAN_PREFERENCE_RSP message. Does not implicitly {@link DEVICE_SET_CLEAN_PREFERENCE_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @static
     * @param {IDEVICE_SET_CLEAN_PREFERENCE_RSP} message DEVICE_SET_CLEAN_PREFERENCE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_SET_CLEAN_PREFERENCE_RSP message, length delimited. Does not implicitly {@link DEVICE_SET_CLEAN_PREFERENCE_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @static
     * @param {IDEVICE_SET_CLEAN_PREFERENCE_RSP} message DEVICE_SET_CLEAN_PREFERENCE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_SET_CLEAN_PREFERENCE_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_SET_CLEAN_PREFERENCE_RSP} DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_SET_CLEAN_PREFERENCE_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_SET_CLEAN_PREFERENCE_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_SET_CLEAN_PREFERENCE_RSP} DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_SET_CLEAN_PREFERENCE_RSP message.
     * @function verify
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_SET_CLEAN_PREFERENCE_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_SET_CLEAN_PREFERENCE_RSP} DEVICE_SET_CLEAN_PREFERENCE_RSP
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_SET_CLEAN_PREFERENCE_RSP)
            return object;
        var message = new $root.DEVICE_SET_CLEAN_PREFERENCE_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_SET_CLEAN_PREFERENCE_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @static
     * @param {DEVICE_SET_CLEAN_PREFERENCE_RSP} message DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_SET_CLEAN_PREFERENCE_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @function getTypeUrl
     * @memberof DEVICE_SET_CLEAN_PREFERENCE_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_SET_CLEAN_PREFERENCE_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_SET_CLEAN_PREFERENCE_RSP";
    };

    return DEVICE_SET_CLEAN_PREFERENCE_RSP;
})();

$root.DEVICE_AUTO_CLEAN_REQ = (function() {

    /**
     * Properties of a DEVICE_AUTO_CLEAN_REQ.
     * @exports IDEVICE_AUTO_CLEAN_REQ
     * @interface IDEVICE_AUTO_CLEAN_REQ
     * @property {number} ctrlValue DEVICE_AUTO_CLEAN_REQ ctrlValue
     * @property {number} cleanType DEVICE_AUTO_CLEAN_REQ cleanType
     */

    /**
     * Constructs a new DEVICE_AUTO_CLEAN_REQ.
     * @exports DEVICE_AUTO_CLEAN_REQ
     * @classdesc Represents a DEVICE_AUTO_CLEAN_REQ.
     * @implements IDEVICE_AUTO_CLEAN_REQ
     * @constructor
     * @param {IDEVICE_AUTO_CLEAN_REQ=} [properties] Properties to set
     */
    function DEVICE_AUTO_CLEAN_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_AUTO_CLEAN_REQ ctrlValue.
     * @member {number} ctrlValue
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @instance
     */
    DEVICE_AUTO_CLEAN_REQ.prototype.ctrlValue = 0;

    /**
     * DEVICE_AUTO_CLEAN_REQ cleanType.
     * @member {number} cleanType
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @instance
     */
    DEVICE_AUTO_CLEAN_REQ.prototype.cleanType = 0;

    /**
     * Creates a new DEVICE_AUTO_CLEAN_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @static
     * @param {IDEVICE_AUTO_CLEAN_REQ=} [properties] Properties to set
     * @returns {DEVICE_AUTO_CLEAN_REQ} DEVICE_AUTO_CLEAN_REQ instance
     */
    DEVICE_AUTO_CLEAN_REQ.create = function create(properties) {
        return new DEVICE_AUTO_CLEAN_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_AUTO_CLEAN_REQ message. Does not implicitly {@link DEVICE_AUTO_CLEAN_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @static
     * @param {IDEVICE_AUTO_CLEAN_REQ} message DEVICE_AUTO_CLEAN_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_AUTO_CLEAN_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ctrlValue);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cleanType);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_AUTO_CLEAN_REQ message, length delimited. Does not implicitly {@link DEVICE_AUTO_CLEAN_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @static
     * @param {IDEVICE_AUTO_CLEAN_REQ} message DEVICE_AUTO_CLEAN_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_AUTO_CLEAN_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_AUTO_CLEAN_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_AUTO_CLEAN_REQ} DEVICE_AUTO_CLEAN_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_AUTO_CLEAN_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_AUTO_CLEAN_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.ctrlValue = reader.uint32();
                    break;
                }
            case 2: {
                    message.cleanType = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ctrlValue"))
            throw $util.ProtocolError("missing required 'ctrlValue'", { instance: message });
        if (!message.hasOwnProperty("cleanType"))
            throw $util.ProtocolError("missing required 'cleanType'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_AUTO_CLEAN_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_AUTO_CLEAN_REQ} DEVICE_AUTO_CLEAN_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_AUTO_CLEAN_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_AUTO_CLEAN_REQ message.
     * @function verify
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_AUTO_CLEAN_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ctrlValue))
            return "ctrlValue: integer expected";
        if (!$util.isInteger(message.cleanType))
            return "cleanType: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_AUTO_CLEAN_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_AUTO_CLEAN_REQ} DEVICE_AUTO_CLEAN_REQ
     */
    DEVICE_AUTO_CLEAN_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_AUTO_CLEAN_REQ)
            return object;
        var message = new $root.DEVICE_AUTO_CLEAN_REQ();
        if (object.ctrlValue != null)
            message.ctrlValue = object.ctrlValue >>> 0;
        if (object.cleanType != null)
            message.cleanType = object.cleanType >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_AUTO_CLEAN_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @static
     * @param {DEVICE_AUTO_CLEAN_REQ} message DEVICE_AUTO_CLEAN_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_AUTO_CLEAN_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.ctrlValue = 0;
            object.cleanType = 0;
        }
        if (message.ctrlValue != null && message.hasOwnProperty("ctrlValue"))
            object.ctrlValue = message.ctrlValue;
        if (message.cleanType != null && message.hasOwnProperty("cleanType"))
            object.cleanType = message.cleanType;
        return object;
    };

    /**
     * Converts this DEVICE_AUTO_CLEAN_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_AUTO_CLEAN_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_AUTO_CLEAN_REQ
     * @function getTypeUrl
     * @memberof DEVICE_AUTO_CLEAN_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_AUTO_CLEAN_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_AUTO_CLEAN_REQ";
    };

    return DEVICE_AUTO_CLEAN_REQ;
})();

$root.DEVICE_AUTO_CLEAN_RSP = (function() {

    /**
     * Properties of a DEVICE_AUTO_CLEAN_RSP.
     * @exports IDEVICE_AUTO_CLEAN_RSP
     * @interface IDEVICE_AUTO_CLEAN_RSP
     */

    /**
     * Constructs a new DEVICE_AUTO_CLEAN_RSP.
     * @exports DEVICE_AUTO_CLEAN_RSP
     * @classdesc Represents a DEVICE_AUTO_CLEAN_RSP.
     * @implements IDEVICE_AUTO_CLEAN_RSP
     * @constructor
     * @param {IDEVICE_AUTO_CLEAN_RSP=} [properties] Properties to set
     */
    function DEVICE_AUTO_CLEAN_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_AUTO_CLEAN_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_AUTO_CLEAN_RSP
     * @static
     * @param {IDEVICE_AUTO_CLEAN_RSP=} [properties] Properties to set
     * @returns {DEVICE_AUTO_CLEAN_RSP} DEVICE_AUTO_CLEAN_RSP instance
     */
    DEVICE_AUTO_CLEAN_RSP.create = function create(properties) {
        return new DEVICE_AUTO_CLEAN_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_AUTO_CLEAN_RSP message. Does not implicitly {@link DEVICE_AUTO_CLEAN_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_AUTO_CLEAN_RSP
     * @static
     * @param {IDEVICE_AUTO_CLEAN_RSP} message DEVICE_AUTO_CLEAN_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_AUTO_CLEAN_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_AUTO_CLEAN_RSP message, length delimited. Does not implicitly {@link DEVICE_AUTO_CLEAN_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_AUTO_CLEAN_RSP
     * @static
     * @param {IDEVICE_AUTO_CLEAN_RSP} message DEVICE_AUTO_CLEAN_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_AUTO_CLEAN_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_AUTO_CLEAN_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_AUTO_CLEAN_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_AUTO_CLEAN_RSP} DEVICE_AUTO_CLEAN_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_AUTO_CLEAN_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_AUTO_CLEAN_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_AUTO_CLEAN_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_AUTO_CLEAN_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_AUTO_CLEAN_RSP} DEVICE_AUTO_CLEAN_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_AUTO_CLEAN_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_AUTO_CLEAN_RSP message.
     * @function verify
     * @memberof DEVICE_AUTO_CLEAN_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_AUTO_CLEAN_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_AUTO_CLEAN_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_AUTO_CLEAN_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_AUTO_CLEAN_RSP} DEVICE_AUTO_CLEAN_RSP
     */
    DEVICE_AUTO_CLEAN_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_AUTO_CLEAN_RSP)
            return object;
        return new $root.DEVICE_AUTO_CLEAN_RSP();
    };

    /**
     * Creates a plain object from a DEVICE_AUTO_CLEAN_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_AUTO_CLEAN_RSP
     * @static
     * @param {DEVICE_AUTO_CLEAN_RSP} message DEVICE_AUTO_CLEAN_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_AUTO_CLEAN_RSP.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_AUTO_CLEAN_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_AUTO_CLEAN_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_AUTO_CLEAN_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_AUTO_CLEAN_RSP
     * @function getTypeUrl
     * @memberof DEVICE_AUTO_CLEAN_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_AUTO_CLEAN_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_AUTO_CLEAN_RSP";
    };

    return DEVICE_AUTO_CLEAN_RSP;
})();

$root.DEVICE_CHARGE_REQ = (function() {

    /**
     * Properties of a DEVICE_CHARGE_REQ.
     * @exports IDEVICE_CHARGE_REQ
     * @interface IDEVICE_CHARGE_REQ
     * @property {number} enable DEVICE_CHARGE_REQ enable
     */

    /**
     * Constructs a new DEVICE_CHARGE_REQ.
     * @exports DEVICE_CHARGE_REQ
     * @classdesc Represents a DEVICE_CHARGE_REQ.
     * @implements IDEVICE_CHARGE_REQ
     * @constructor
     * @param {IDEVICE_CHARGE_REQ=} [properties] Properties to set
     */
    function DEVICE_CHARGE_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_CHARGE_REQ enable.
     * @member {number} enable
     * @memberof DEVICE_CHARGE_REQ
     * @instance
     */
    DEVICE_CHARGE_REQ.prototype.enable = 0;

    /**
     * Creates a new DEVICE_CHARGE_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_CHARGE_REQ
     * @static
     * @param {IDEVICE_CHARGE_REQ=} [properties] Properties to set
     * @returns {DEVICE_CHARGE_REQ} DEVICE_CHARGE_REQ instance
     */
    DEVICE_CHARGE_REQ.create = function create(properties) {
        return new DEVICE_CHARGE_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_CHARGE_REQ message. Does not implicitly {@link DEVICE_CHARGE_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_CHARGE_REQ
     * @static
     * @param {IDEVICE_CHARGE_REQ} message DEVICE_CHARGE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CHARGE_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.enable);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_CHARGE_REQ message, length delimited. Does not implicitly {@link DEVICE_CHARGE_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_CHARGE_REQ
     * @static
     * @param {IDEVICE_CHARGE_REQ} message DEVICE_CHARGE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CHARGE_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_CHARGE_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_CHARGE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_CHARGE_REQ} DEVICE_CHARGE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CHARGE_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_CHARGE_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.enable = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("enable"))
            throw $util.ProtocolError("missing required 'enable'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_CHARGE_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_CHARGE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_CHARGE_REQ} DEVICE_CHARGE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CHARGE_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_CHARGE_REQ message.
     * @function verify
     * @memberof DEVICE_CHARGE_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_CHARGE_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.enable))
            return "enable: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_CHARGE_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_CHARGE_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_CHARGE_REQ} DEVICE_CHARGE_REQ
     */
    DEVICE_CHARGE_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_CHARGE_REQ)
            return object;
        var message = new $root.DEVICE_CHARGE_REQ();
        if (object.enable != null)
            message.enable = object.enable >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_CHARGE_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_CHARGE_REQ
     * @static
     * @param {DEVICE_CHARGE_REQ} message DEVICE_CHARGE_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_CHARGE_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.enable = 0;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        return object;
    };

    /**
     * Converts this DEVICE_CHARGE_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_CHARGE_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_CHARGE_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_CHARGE_REQ
     * @function getTypeUrl
     * @memberof DEVICE_CHARGE_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_CHARGE_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_CHARGE_REQ";
    };

    return DEVICE_CHARGE_REQ;
})();

$root.DEVICE_CHARGE_RSP = (function() {

    /**
     * Properties of a DEVICE_CHARGE_RSP.
     * @exports IDEVICE_CHARGE_RSP
     * @interface IDEVICE_CHARGE_RSP
     * @property {number} result DEVICE_CHARGE_RSP result
     */

    /**
     * Constructs a new DEVICE_CHARGE_RSP.
     * @exports DEVICE_CHARGE_RSP
     * @classdesc Represents a DEVICE_CHARGE_RSP.
     * @implements IDEVICE_CHARGE_RSP
     * @constructor
     * @param {IDEVICE_CHARGE_RSP=} [properties] Properties to set
     */
    function DEVICE_CHARGE_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_CHARGE_RSP result.
     * @member {number} result
     * @memberof DEVICE_CHARGE_RSP
     * @instance
     */
    DEVICE_CHARGE_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_CHARGE_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_CHARGE_RSP
     * @static
     * @param {IDEVICE_CHARGE_RSP=} [properties] Properties to set
     * @returns {DEVICE_CHARGE_RSP} DEVICE_CHARGE_RSP instance
     */
    DEVICE_CHARGE_RSP.create = function create(properties) {
        return new DEVICE_CHARGE_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_CHARGE_RSP message. Does not implicitly {@link DEVICE_CHARGE_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_CHARGE_RSP
     * @static
     * @param {IDEVICE_CHARGE_RSP} message DEVICE_CHARGE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CHARGE_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_CHARGE_RSP message, length delimited. Does not implicitly {@link DEVICE_CHARGE_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_CHARGE_RSP
     * @static
     * @param {IDEVICE_CHARGE_RSP} message DEVICE_CHARGE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CHARGE_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_CHARGE_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_CHARGE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_CHARGE_RSP} DEVICE_CHARGE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CHARGE_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_CHARGE_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_CHARGE_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_CHARGE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_CHARGE_RSP} DEVICE_CHARGE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CHARGE_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_CHARGE_RSP message.
     * @function verify
     * @memberof DEVICE_CHARGE_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_CHARGE_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_CHARGE_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_CHARGE_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_CHARGE_RSP} DEVICE_CHARGE_RSP
     */
    DEVICE_CHARGE_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_CHARGE_RSP)
            return object;
        var message = new $root.DEVICE_CHARGE_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_CHARGE_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_CHARGE_RSP
     * @static
     * @param {DEVICE_CHARGE_RSP} message DEVICE_CHARGE_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_CHARGE_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_CHARGE_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_CHARGE_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_CHARGE_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_CHARGE_RSP
     * @function getTypeUrl
     * @memberof DEVICE_CHARGE_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_CHARGE_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_CHARGE_RSP";
    };

    return DEVICE_CHARGE_RSP;
})();

$root.DEVICE_MAPID_GET_GLOBAL_INFO_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_GET_GLOBAL_INFO_REQ.
     * @exports IDEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @interface IDEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @property {number} mask DEVICE_MAPID_GET_GLOBAL_INFO_REQ mask
     */

    /**
     * Constructs a new DEVICE_MAPID_GET_GLOBAL_INFO_REQ.
     * @exports DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @classdesc Represents a DEVICE_MAPID_GET_GLOBAL_INFO_REQ.
     * @implements IDEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @constructor
     * @param {IDEVICE_MAPID_GET_GLOBAL_INFO_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_GET_GLOBAL_INFO_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_GET_GLOBAL_INFO_REQ mask.
     * @member {number} mask
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.prototype.mask = 0;

    /**
     * Creates a new DEVICE_MAPID_GET_GLOBAL_INFO_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_GET_GLOBAL_INFO_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_GET_GLOBAL_INFO_REQ} DEVICE_MAPID_GET_GLOBAL_INFO_REQ instance
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.create = function create(properties) {
        return new DEVICE_MAPID_GET_GLOBAL_INFO_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_GET_GLOBAL_INFO_REQ message. Does not implicitly {@link DEVICE_MAPID_GET_GLOBAL_INFO_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_GET_GLOBAL_INFO_REQ} message DEVICE_MAPID_GET_GLOBAL_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mask);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_GET_GLOBAL_INFO_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_GET_GLOBAL_INFO_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_GET_GLOBAL_INFO_REQ} message DEVICE_MAPID_GET_GLOBAL_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_GET_GLOBAL_INFO_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_GET_GLOBAL_INFO_REQ} DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_GET_GLOBAL_INFO_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mask = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mask"))
            throw $util.ProtocolError("missing required 'mask'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_GET_GLOBAL_INFO_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_GET_GLOBAL_INFO_REQ} DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_GET_GLOBAL_INFO_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mask))
            return "mask: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_GET_GLOBAL_INFO_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_GET_GLOBAL_INFO_REQ} DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_GET_GLOBAL_INFO_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_GET_GLOBAL_INFO_REQ();
        if (object.mask != null)
            message.mask = object.mask >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_GET_GLOBAL_INFO_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @static
     * @param {DEVICE_MAPID_GET_GLOBAL_INFO_REQ} message DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.mask = 0;
        if (message.mask != null && message.hasOwnProperty("mask"))
            object.mask = message.mask;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_GET_GLOBAL_INFO_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_GET_GLOBAL_INFO_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_GET_GLOBAL_INFO_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_GET_GLOBAL_INFO_REQ";
    };

    return DEVICE_MAPID_GET_GLOBAL_INFO_REQ;
})();

$root.DEVICE_MAPID_SET_NAVIGATION_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_NAVIGATION_REQ.
     * @exports IDEVICE_MAPID_SET_NAVIGATION_REQ
     * @interface IDEVICE_MAPID_SET_NAVIGATION_REQ
     * @property {number} mapHeadId DEVICE_MAPID_SET_NAVIGATION_REQ mapHeadId
     * @property {number} poseX DEVICE_MAPID_SET_NAVIGATION_REQ poseX
     * @property {number} poseY DEVICE_MAPID_SET_NAVIGATION_REQ poseY
     * @property {number} posePhi DEVICE_MAPID_SET_NAVIGATION_REQ posePhi
     * @property {number} ctrlValue DEVICE_MAPID_SET_NAVIGATION_REQ ctrlValue
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_NAVIGATION_REQ.
     * @exports DEVICE_MAPID_SET_NAVIGATION_REQ
     * @classdesc Represents a DEVICE_MAPID_SET_NAVIGATION_REQ.
     * @implements IDEVICE_MAPID_SET_NAVIGATION_REQ
     * @constructor
     * @param {IDEVICE_MAPID_SET_NAVIGATION_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_NAVIGATION_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_NAVIGATION_REQ mapHeadId.
     * @member {number} mapHeadId
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @instance
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.prototype.mapHeadId = 0;

    /**
     * DEVICE_MAPID_SET_NAVIGATION_REQ poseX.
     * @member {number} poseX
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @instance
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.prototype.poseX = 0;

    /**
     * DEVICE_MAPID_SET_NAVIGATION_REQ poseY.
     * @member {number} poseY
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @instance
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.prototype.poseY = 0;

    /**
     * DEVICE_MAPID_SET_NAVIGATION_REQ posePhi.
     * @member {number} posePhi
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @instance
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.prototype.posePhi = 0;

    /**
     * DEVICE_MAPID_SET_NAVIGATION_REQ ctrlValue.
     * @member {number} ctrlValue
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @instance
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.prototype.ctrlValue = 0;

    /**
     * Creates a new DEVICE_MAPID_SET_NAVIGATION_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_NAVIGATION_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_NAVIGATION_REQ} DEVICE_MAPID_SET_NAVIGATION_REQ instance
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.create = function create(properties) {
        return new DEVICE_MAPID_SET_NAVIGATION_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_NAVIGATION_REQ message. Does not implicitly {@link DEVICE_MAPID_SET_NAVIGATION_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_NAVIGATION_REQ} message DEVICE_MAPID_SET_NAVIGATION_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mapHeadId);
        writer.uint32(/* id 2, wireType 5 =*/21).float(message.poseX);
        writer.uint32(/* id 3, wireType 5 =*/29).float(message.poseY);
        writer.uint32(/* id 4, wireType 5 =*/37).float(message.posePhi);
        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ctrlValue);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_NAVIGATION_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_NAVIGATION_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_NAVIGATION_REQ} message DEVICE_MAPID_SET_NAVIGATION_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_NAVIGATION_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_NAVIGATION_REQ} DEVICE_MAPID_SET_NAVIGATION_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_NAVIGATION_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mapHeadId = reader.uint32();
                    break;
                }
            case 2: {
                    message.poseX = reader.float();
                    break;
                }
            case 3: {
                    message.poseY = reader.float();
                    break;
                }
            case 4: {
                    message.posePhi = reader.float();
                    break;
                }
            case 5: {
                    message.ctrlValue = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mapHeadId"))
            throw $util.ProtocolError("missing required 'mapHeadId'", { instance: message });
        if (!message.hasOwnProperty("poseX"))
            throw $util.ProtocolError("missing required 'poseX'", { instance: message });
        if (!message.hasOwnProperty("poseY"))
            throw $util.ProtocolError("missing required 'poseY'", { instance: message });
        if (!message.hasOwnProperty("posePhi"))
            throw $util.ProtocolError("missing required 'posePhi'", { instance: message });
        if (!message.hasOwnProperty("ctrlValue"))
            throw $util.ProtocolError("missing required 'ctrlValue'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_NAVIGATION_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_NAVIGATION_REQ} DEVICE_MAPID_SET_NAVIGATION_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_NAVIGATION_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mapHeadId))
            return "mapHeadId: integer expected";
        if (typeof message.poseX !== "number")
            return "poseX: number expected";
        if (typeof message.poseY !== "number")
            return "poseY: number expected";
        if (typeof message.posePhi !== "number")
            return "posePhi: number expected";
        if (!$util.isInteger(message.ctrlValue))
            return "ctrlValue: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_NAVIGATION_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_NAVIGATION_REQ} DEVICE_MAPID_SET_NAVIGATION_REQ
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_NAVIGATION_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_SET_NAVIGATION_REQ();
        if (object.mapHeadId != null)
            message.mapHeadId = object.mapHeadId >>> 0;
        if (object.poseX != null)
            message.poseX = Number(object.poseX);
        if (object.poseY != null)
            message.poseY = Number(object.poseY);
        if (object.posePhi != null)
            message.posePhi = Number(object.posePhi);
        if (object.ctrlValue != null)
            message.ctrlValue = object.ctrlValue >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_NAVIGATION_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @static
     * @param {DEVICE_MAPID_SET_NAVIGATION_REQ} message DEVICE_MAPID_SET_NAVIGATION_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.mapHeadId = 0;
            object.poseX = 0;
            object.poseY = 0;
            object.posePhi = 0;
            object.ctrlValue = 0;
        }
        if (message.mapHeadId != null && message.hasOwnProperty("mapHeadId"))
            object.mapHeadId = message.mapHeadId;
        if (message.poseX != null && message.hasOwnProperty("poseX"))
            object.poseX = options.json && !isFinite(message.poseX) ? String(message.poseX) : message.poseX;
        if (message.poseY != null && message.hasOwnProperty("poseY"))
            object.poseY = options.json && !isFinite(message.poseY) ? String(message.poseY) : message.poseY;
        if (message.posePhi != null && message.hasOwnProperty("posePhi"))
            object.posePhi = options.json && !isFinite(message.posePhi) ? String(message.posePhi) : message.posePhi;
        if (message.ctrlValue != null && message.hasOwnProperty("ctrlValue"))
            object.ctrlValue = message.ctrlValue;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_NAVIGATION_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_NAVIGATION_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_NAVIGATION_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_NAVIGATION_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_NAVIGATION_REQ";
    };

    return DEVICE_MAPID_SET_NAVIGATION_REQ;
})();

$root.DEVICE_MAPID_SET_NAVIGATION_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_NAVIGATION_RSP.
     * @exports IDEVICE_MAPID_SET_NAVIGATION_RSP
     * @interface IDEVICE_MAPID_SET_NAVIGATION_RSP
     * @property {number} result DEVICE_MAPID_SET_NAVIGATION_RSP result
     * @property {IDEVICE_MAPID_SET_NAVIGATION_REQ} position DEVICE_MAPID_SET_NAVIGATION_RSP position
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_NAVIGATION_RSP.
     * @exports DEVICE_MAPID_SET_NAVIGATION_RSP
     * @classdesc Represents a DEVICE_MAPID_SET_NAVIGATION_RSP.
     * @implements IDEVICE_MAPID_SET_NAVIGATION_RSP
     * @constructor
     * @param {IDEVICE_MAPID_SET_NAVIGATION_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_NAVIGATION_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_NAVIGATION_RSP result.
     * @member {number} result
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @instance
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.prototype.result = 0;

    /**
     * DEVICE_MAPID_SET_NAVIGATION_RSP position.
     * @member {IDEVICE_MAPID_SET_NAVIGATION_REQ} position
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @instance
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.prototype.position = null;

    /**
     * Creates a new DEVICE_MAPID_SET_NAVIGATION_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_NAVIGATION_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_NAVIGATION_RSP} DEVICE_MAPID_SET_NAVIGATION_RSP instance
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.create = function create(properties) {
        return new DEVICE_MAPID_SET_NAVIGATION_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_NAVIGATION_RSP message. Does not implicitly {@link DEVICE_MAPID_SET_NAVIGATION_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_NAVIGATION_RSP} message DEVICE_MAPID_SET_NAVIGATION_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        $root.DEVICE_MAPID_SET_NAVIGATION_REQ.encode(message.position, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_NAVIGATION_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_NAVIGATION_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_NAVIGATION_RSP} message DEVICE_MAPID_SET_NAVIGATION_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_NAVIGATION_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_NAVIGATION_RSP} DEVICE_MAPID_SET_NAVIGATION_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_NAVIGATION_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.position = $root.DEVICE_MAPID_SET_NAVIGATION_REQ.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("position"))
            throw $util.ProtocolError("missing required 'position'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_NAVIGATION_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_NAVIGATION_RSP} DEVICE_MAPID_SET_NAVIGATION_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_NAVIGATION_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        {
            var error = $root.DEVICE_MAPID_SET_NAVIGATION_REQ.verify(message.position);
            if (error)
                return "position." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_NAVIGATION_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_NAVIGATION_RSP} DEVICE_MAPID_SET_NAVIGATION_RSP
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_NAVIGATION_RSP)
            return object;
        var message = new $root.DEVICE_MAPID_SET_NAVIGATION_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.position != null) {
            if (typeof object.position !== "object")
                throw TypeError(".DEVICE_MAPID_SET_NAVIGATION_RSP.position: object expected");
            message.position = $root.DEVICE_MAPID_SET_NAVIGATION_REQ.fromObject(object.position);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_NAVIGATION_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @static
     * @param {DEVICE_MAPID_SET_NAVIGATION_RSP} message DEVICE_MAPID_SET_NAVIGATION_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.position = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.position != null && message.hasOwnProperty("position"))
            object.position = $root.DEVICE_MAPID_SET_NAVIGATION_REQ.toObject(message.position, options);
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_NAVIGATION_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_NAVIGATION_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_NAVIGATION_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_NAVIGATION_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_NAVIGATION_RSP";
    };

    return DEVICE_MAPID_SET_NAVIGATION_RSP;
})();

$root.DEVICE_WORKSTATUS_REPORT_REQ = (function() {

    /**
     * Properties of a DEVICE_WORKSTATUS_REPORT_REQ.
     * @exports IDEVICE_WORKSTATUS_REPORT_REQ
     * @interface IDEVICE_WORKSTATUS_REPORT_REQ
     * @property {number} status DEVICE_WORKSTATUS_REPORT_REQ status
     */

    /**
     * Constructs a new DEVICE_WORKSTATUS_REPORT_REQ.
     * @exports DEVICE_WORKSTATUS_REPORT_REQ
     * @classdesc Represents a DEVICE_WORKSTATUS_REPORT_REQ.
     * @implements IDEVICE_WORKSTATUS_REPORT_REQ
     * @constructor
     * @param {IDEVICE_WORKSTATUS_REPORT_REQ=} [properties] Properties to set
     */
    function DEVICE_WORKSTATUS_REPORT_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_WORKSTATUS_REPORT_REQ status.
     * @member {number} status
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @instance
     */
    DEVICE_WORKSTATUS_REPORT_REQ.prototype.status = 0;

    /**
     * Creates a new DEVICE_WORKSTATUS_REPORT_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @static
     * @param {IDEVICE_WORKSTATUS_REPORT_REQ=} [properties] Properties to set
     * @returns {DEVICE_WORKSTATUS_REPORT_REQ} DEVICE_WORKSTATUS_REPORT_REQ instance
     */
    DEVICE_WORKSTATUS_REPORT_REQ.create = function create(properties) {
        return new DEVICE_WORKSTATUS_REPORT_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_WORKSTATUS_REPORT_REQ message. Does not implicitly {@link DEVICE_WORKSTATUS_REPORT_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @static
     * @param {IDEVICE_WORKSTATUS_REPORT_REQ} message DEVICE_WORKSTATUS_REPORT_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WORKSTATUS_REPORT_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.status);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_WORKSTATUS_REPORT_REQ message, length delimited. Does not implicitly {@link DEVICE_WORKSTATUS_REPORT_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @static
     * @param {IDEVICE_WORKSTATUS_REPORT_REQ} message DEVICE_WORKSTATUS_REPORT_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WORKSTATUS_REPORT_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_WORKSTATUS_REPORT_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_WORKSTATUS_REPORT_REQ} DEVICE_WORKSTATUS_REPORT_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WORKSTATUS_REPORT_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_WORKSTATUS_REPORT_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.status = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("status"))
            throw $util.ProtocolError("missing required 'status'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_WORKSTATUS_REPORT_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_WORKSTATUS_REPORT_REQ} DEVICE_WORKSTATUS_REPORT_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WORKSTATUS_REPORT_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_WORKSTATUS_REPORT_REQ message.
     * @function verify
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_WORKSTATUS_REPORT_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.status))
            return "status: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_WORKSTATUS_REPORT_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_WORKSTATUS_REPORT_REQ} DEVICE_WORKSTATUS_REPORT_REQ
     */
    DEVICE_WORKSTATUS_REPORT_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_WORKSTATUS_REPORT_REQ)
            return object;
        var message = new $root.DEVICE_WORKSTATUS_REPORT_REQ();
        if (object.status != null)
            message.status = object.status >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_WORKSTATUS_REPORT_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @static
     * @param {DEVICE_WORKSTATUS_REPORT_REQ} message DEVICE_WORKSTATUS_REPORT_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_WORKSTATUS_REPORT_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.status = 0;
        if (message.status != null && message.hasOwnProperty("status"))
            object.status = message.status;
        return object;
    };

    /**
     * Converts this DEVICE_WORKSTATUS_REPORT_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_WORKSTATUS_REPORT_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_WORKSTATUS_REPORT_REQ
     * @function getTypeUrl
     * @memberof DEVICE_WORKSTATUS_REPORT_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_WORKSTATUS_REPORT_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_WORKSTATUS_REPORT_REQ";
    };

    return DEVICE_WORKSTATUS_REPORT_REQ;
})();

$root.DEVICE_WORKSTATUS_REPORT_RSP = (function() {

    /**
     * Properties of a DEVICE_WORKSTATUS_REPORT_RSP.
     * @exports IDEVICE_WORKSTATUS_REPORT_RSP
     * @interface IDEVICE_WORKSTATUS_REPORT_RSP
     * @property {number} result DEVICE_WORKSTATUS_REPORT_RSP result
     */

    /**
     * Constructs a new DEVICE_WORKSTATUS_REPORT_RSP.
     * @exports DEVICE_WORKSTATUS_REPORT_RSP
     * @classdesc Represents a DEVICE_WORKSTATUS_REPORT_RSP.
     * @implements IDEVICE_WORKSTATUS_REPORT_RSP
     * @constructor
     * @param {IDEVICE_WORKSTATUS_REPORT_RSP=} [properties] Properties to set
     */
    function DEVICE_WORKSTATUS_REPORT_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_WORKSTATUS_REPORT_RSP result.
     * @member {number} result
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @instance
     */
    DEVICE_WORKSTATUS_REPORT_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_WORKSTATUS_REPORT_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @static
     * @param {IDEVICE_WORKSTATUS_REPORT_RSP=} [properties] Properties to set
     * @returns {DEVICE_WORKSTATUS_REPORT_RSP} DEVICE_WORKSTATUS_REPORT_RSP instance
     */
    DEVICE_WORKSTATUS_REPORT_RSP.create = function create(properties) {
        return new DEVICE_WORKSTATUS_REPORT_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_WORKSTATUS_REPORT_RSP message. Does not implicitly {@link DEVICE_WORKSTATUS_REPORT_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @static
     * @param {IDEVICE_WORKSTATUS_REPORT_RSP} message DEVICE_WORKSTATUS_REPORT_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WORKSTATUS_REPORT_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_WORKSTATUS_REPORT_RSP message, length delimited. Does not implicitly {@link DEVICE_WORKSTATUS_REPORT_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @static
     * @param {IDEVICE_WORKSTATUS_REPORT_RSP} message DEVICE_WORKSTATUS_REPORT_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WORKSTATUS_REPORT_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_WORKSTATUS_REPORT_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_WORKSTATUS_REPORT_RSP} DEVICE_WORKSTATUS_REPORT_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WORKSTATUS_REPORT_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_WORKSTATUS_REPORT_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_WORKSTATUS_REPORT_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_WORKSTATUS_REPORT_RSP} DEVICE_WORKSTATUS_REPORT_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WORKSTATUS_REPORT_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_WORKSTATUS_REPORT_RSP message.
     * @function verify
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_WORKSTATUS_REPORT_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_WORKSTATUS_REPORT_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_WORKSTATUS_REPORT_RSP} DEVICE_WORKSTATUS_REPORT_RSP
     */
    DEVICE_WORKSTATUS_REPORT_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_WORKSTATUS_REPORT_RSP)
            return object;
        var message = new $root.DEVICE_WORKSTATUS_REPORT_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_WORKSTATUS_REPORT_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @static
     * @param {DEVICE_WORKSTATUS_REPORT_RSP} message DEVICE_WORKSTATUS_REPORT_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_WORKSTATUS_REPORT_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_WORKSTATUS_REPORT_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_WORKSTATUS_REPORT_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_WORKSTATUS_REPORT_RSP
     * @function getTypeUrl
     * @memberof DEVICE_WORKSTATUS_REPORT_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_WORKSTATUS_REPORT_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_WORKSTATUS_REPORT_RSP";
    };

    return DEVICE_WORKSTATUS_REPORT_RSP;
})();

$root.DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ = (function() {

    /**
     * Properties of a DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.
     * @exports IDEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @interface IDEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @property {number} unk1 DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ unk1
     * @property {string} unk2 DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ unk2
     */

    /**
     * Constructs a new DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.
     * @exports DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @classdesc Represents a DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.
     * @implements IDEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @constructor
     * @param {IDEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ=} [properties] Properties to set
     */
    function DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ unk1.
     * @member {number} unk1
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @instance
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.prototype.unk1 = 0;

    /**
     * DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ unk2.
     * @member {string} unk2
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @instance
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.prototype.unk2 = "";

    /**
     * Creates a new DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @static
     * @param {IDEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ=} [properties] Properties to set
     * @returns {DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ} DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ instance
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.create = function create(properties) {
        return new DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ message. Does not implicitly {@link DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @static
     * @param {IDEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ} message DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.unk1);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.unk2);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ message, length delimited. Does not implicitly {@link DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @static
     * @param {IDEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ} message DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ} DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.unk1 = reader.uint32();
                    break;
                }
            case 2: {
                    message.unk2 = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("unk1"))
            throw $util.ProtocolError("missing required 'unk1'", { instance: message });
        if (!message.hasOwnProperty("unk2"))
            throw $util.ProtocolError("missing required 'unk2'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ} DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ message.
     * @function verify
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.unk1))
            return "unk1: integer expected";
        if (!$util.isString(message.unk2))
            return "unk2: string expected";
        return null;
    };

    /**
     * Creates a DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ} DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ)
            return object;
        var message = new $root.DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ();
        if (object.unk1 != null)
            message.unk1 = object.unk1 >>> 0;
        if (object.unk2 != null)
            message.unk2 = String(object.unk2);
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @static
     * @param {DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ} message DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.unk1 = 0;
            object.unk2 = "";
        }
        if (message.unk1 != null && message.hasOwnProperty("unk1"))
            object.unk1 = message.unk1;
        if (message.unk2 != null && message.hasOwnProperty("unk2"))
            object.unk2 = message.unk2;
        return object;
    };

    /**
     * Converts this DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @function getTypeUrl
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ";
    };

    return DEVICE_GET_ALL_GLOBAL_MAP_INFO_REQ;
})();

$root.DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP = (function() {

    /**
     * Properties of a DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.
     * @exports IDEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @interface IDEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @property {number} result DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP result
     */

    /**
     * Constructs a new DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.
     * @exports DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @classdesc Represents a DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.
     * @implements IDEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @constructor
     * @param {IDEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP=} [properties] Properties to set
     */
    function DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP result.
     * @member {number} result
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @instance
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @static
     * @param {IDEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP=} [properties] Properties to set
     * @returns {DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP} DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP instance
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.create = function create(properties) {
        return new DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP message. Does not implicitly {@link DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @static
     * @param {IDEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP} message DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP message, length delimited. Does not implicitly {@link DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @static
     * @param {IDEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP} message DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP} DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP} DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP message.
     * @function verify
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP} DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP)
            return object;
        var message = new $root.DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @static
     * @param {DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP} message DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @function getTypeUrl
     * @memberof DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP";
    };

    return DEVICE_GET_ALL_GLOBAL_MAP_INFO_RSP;
})();

$root.DEVICE_GETTIME_REQ = (function() {

    /**
     * Properties of a DEVICE_GETTIME_REQ.
     * @exports IDEVICE_GETTIME_REQ
     * @interface IDEVICE_GETTIME_REQ
     */

    /**
     * Constructs a new DEVICE_GETTIME_REQ.
     * @exports DEVICE_GETTIME_REQ
     * @classdesc Represents a DEVICE_GETTIME_REQ.
     * @implements IDEVICE_GETTIME_REQ
     * @constructor
     * @param {IDEVICE_GETTIME_REQ=} [properties] Properties to set
     */
    function DEVICE_GETTIME_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_GETTIME_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_GETTIME_REQ
     * @static
     * @param {IDEVICE_GETTIME_REQ=} [properties] Properties to set
     * @returns {DEVICE_GETTIME_REQ} DEVICE_GETTIME_REQ instance
     */
    DEVICE_GETTIME_REQ.create = function create(properties) {
        return new DEVICE_GETTIME_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_GETTIME_REQ message. Does not implicitly {@link DEVICE_GETTIME_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_GETTIME_REQ
     * @static
     * @param {IDEVICE_GETTIME_REQ} message DEVICE_GETTIME_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_GETTIME_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_GETTIME_REQ message, length delimited. Does not implicitly {@link DEVICE_GETTIME_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_GETTIME_REQ
     * @static
     * @param {IDEVICE_GETTIME_REQ} message DEVICE_GETTIME_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_GETTIME_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_GETTIME_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_GETTIME_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_GETTIME_REQ} DEVICE_GETTIME_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_GETTIME_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_GETTIME_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_GETTIME_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_GETTIME_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_GETTIME_REQ} DEVICE_GETTIME_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_GETTIME_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_GETTIME_REQ message.
     * @function verify
     * @memberof DEVICE_GETTIME_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_GETTIME_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_GETTIME_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_GETTIME_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_GETTIME_REQ} DEVICE_GETTIME_REQ
     */
    DEVICE_GETTIME_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_GETTIME_REQ)
            return object;
        return new $root.DEVICE_GETTIME_REQ();
    };

    /**
     * Creates a plain object from a DEVICE_GETTIME_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_GETTIME_REQ
     * @static
     * @param {DEVICE_GETTIME_REQ} message DEVICE_GETTIME_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_GETTIME_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_GETTIME_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_GETTIME_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_GETTIME_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_GETTIME_REQ
     * @function getTypeUrl
     * @memberof DEVICE_GETTIME_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_GETTIME_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_GETTIME_REQ";
    };

    return DEVICE_GETTIME_REQ;
})();

$root.DEVICE_GETTIME_RSP = (function() {

    /**
     * Properties of a DEVICE_GETTIME_RSP.
     * @exports IDEVICE_GETTIME_RSP
     * @interface IDEVICE_GETTIME_RSP
     * @property {number} result DEVICE_GETTIME_RSP result
     * @property {DEVICE_GETTIME_RSP.IBody} body DEVICE_GETTIME_RSP body
     */

    /**
     * Constructs a new DEVICE_GETTIME_RSP.
     * @exports DEVICE_GETTIME_RSP
     * @classdesc Represents a DEVICE_GETTIME_RSP.
     * @implements IDEVICE_GETTIME_RSP
     * @constructor
     * @param {IDEVICE_GETTIME_RSP=} [properties] Properties to set
     */
    function DEVICE_GETTIME_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_GETTIME_RSP result.
     * @member {number} result
     * @memberof DEVICE_GETTIME_RSP
     * @instance
     */
    DEVICE_GETTIME_RSP.prototype.result = 0;

    /**
     * DEVICE_GETTIME_RSP body.
     * @member {DEVICE_GETTIME_RSP.IBody} body
     * @memberof DEVICE_GETTIME_RSP
     * @instance
     */
    DEVICE_GETTIME_RSP.prototype.body = null;

    /**
     * Creates a new DEVICE_GETTIME_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_GETTIME_RSP
     * @static
     * @param {IDEVICE_GETTIME_RSP=} [properties] Properties to set
     * @returns {DEVICE_GETTIME_RSP} DEVICE_GETTIME_RSP instance
     */
    DEVICE_GETTIME_RSP.create = function create(properties) {
        return new DEVICE_GETTIME_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_GETTIME_RSP message. Does not implicitly {@link DEVICE_GETTIME_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_GETTIME_RSP
     * @static
     * @param {IDEVICE_GETTIME_RSP} message DEVICE_GETTIME_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_GETTIME_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        $root.DEVICE_GETTIME_RSP.Body.encode(message.body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_GETTIME_RSP message, length delimited. Does not implicitly {@link DEVICE_GETTIME_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_GETTIME_RSP
     * @static
     * @param {IDEVICE_GETTIME_RSP} message DEVICE_GETTIME_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_GETTIME_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_GETTIME_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_GETTIME_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_GETTIME_RSP} DEVICE_GETTIME_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_GETTIME_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_GETTIME_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.body = $root.DEVICE_GETTIME_RSP.Body.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("body"))
            throw $util.ProtocolError("missing required 'body'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_GETTIME_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_GETTIME_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_GETTIME_RSP} DEVICE_GETTIME_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_GETTIME_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_GETTIME_RSP message.
     * @function verify
     * @memberof DEVICE_GETTIME_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_GETTIME_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        {
            var error = $root.DEVICE_GETTIME_RSP.Body.verify(message.body);
            if (error)
                return "body." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_GETTIME_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_GETTIME_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_GETTIME_RSP} DEVICE_GETTIME_RSP
     */
    DEVICE_GETTIME_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_GETTIME_RSP)
            return object;
        var message = new $root.DEVICE_GETTIME_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.body != null) {
            if (typeof object.body !== "object")
                throw TypeError(".DEVICE_GETTIME_RSP.body: object expected");
            message.body = $root.DEVICE_GETTIME_RSP.Body.fromObject(object.body);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_GETTIME_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_GETTIME_RSP
     * @static
     * @param {DEVICE_GETTIME_RSP} message DEVICE_GETTIME_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_GETTIME_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.body = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.body != null && message.hasOwnProperty("body"))
            object.body = $root.DEVICE_GETTIME_RSP.Body.toObject(message.body, options);
        return object;
    };

    /**
     * Converts this DEVICE_GETTIME_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_GETTIME_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_GETTIME_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_GETTIME_RSP
     * @function getTypeUrl
     * @memberof DEVICE_GETTIME_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_GETTIME_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_GETTIME_RSP";
    };

    DEVICE_GETTIME_RSP.Body = (function() {

        /**
         * Properties of a Body.
         * @memberof DEVICE_GETTIME_RSP
         * @interface IBody
         * @property {number} deviceTime Body deviceTime
         * @property {number|null} [deviceTimezone] Body deviceTimezone
         */

        /**
         * Constructs a new Body.
         * @memberof DEVICE_GETTIME_RSP
         * @classdesc Represents a Body.
         * @implements IBody
         * @constructor
         * @param {DEVICE_GETTIME_RSP.IBody=} [properties] Properties to set
         */
        function Body(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Body deviceTime.
         * @member {number} deviceTime
         * @memberof DEVICE_GETTIME_RSP.Body
         * @instance
         */
        Body.prototype.deviceTime = 0;

        /**
         * Body deviceTimezone.
         * @member {number} deviceTimezone
         * @memberof DEVICE_GETTIME_RSP.Body
         * @instance
         */
        Body.prototype.deviceTimezone = 0;

        /**
         * Creates a new Body instance using the specified properties.
         * @function create
         * @memberof DEVICE_GETTIME_RSP.Body
         * @static
         * @param {DEVICE_GETTIME_RSP.IBody=} [properties] Properties to set
         * @returns {DEVICE_GETTIME_RSP.Body} Body instance
         */
        Body.create = function create(properties) {
            return new Body(properties);
        };

        /**
         * Encodes the specified Body message. Does not implicitly {@link DEVICE_GETTIME_RSP.Body.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_GETTIME_RSP.Body
         * @static
         * @param {DEVICE_GETTIME_RSP.IBody} message Body message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Body.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.deviceTime);
            if (message.deviceTimezone != null && Object.hasOwnProperty.call(message, "deviceTimezone"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.deviceTimezone);
            return writer;
        };

        /**
         * Encodes the specified Body message, length delimited. Does not implicitly {@link DEVICE_GETTIME_RSP.Body.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_GETTIME_RSP.Body
         * @static
         * @param {DEVICE_GETTIME_RSP.IBody} message Body message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Body.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Body message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_GETTIME_RSP.Body
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_GETTIME_RSP.Body} Body
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Body.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_GETTIME_RSP.Body();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.deviceTime = reader.uint32();
                        break;
                    }
                case 2: {
                        message.deviceTimezone = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("deviceTime"))
                throw $util.ProtocolError("missing required 'deviceTime'", { instance: message });
            return message;
        };

        /**
         * Decodes a Body message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_GETTIME_RSP.Body
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_GETTIME_RSP.Body} Body
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Body.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Body message.
         * @function verify
         * @memberof DEVICE_GETTIME_RSP.Body
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Body.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.deviceTime))
                return "deviceTime: integer expected";
            if (message.deviceTimezone != null && message.hasOwnProperty("deviceTimezone"))
                if (!$util.isInteger(message.deviceTimezone))
                    return "deviceTimezone: integer expected";
            return null;
        };

        /**
         * Creates a Body message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_GETTIME_RSP.Body
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_GETTIME_RSP.Body} Body
         */
        Body.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_GETTIME_RSP.Body)
                return object;
            var message = new $root.DEVICE_GETTIME_RSP.Body();
            if (object.deviceTime != null)
                message.deviceTime = object.deviceTime >>> 0;
            if (object.deviceTimezone != null)
                message.deviceTimezone = object.deviceTimezone >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Body message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_GETTIME_RSP.Body
         * @static
         * @param {DEVICE_GETTIME_RSP.Body} message Body
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Body.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.deviceTime = 0;
                object.deviceTimezone = 0;
            }
            if (message.deviceTime != null && message.hasOwnProperty("deviceTime"))
                object.deviceTime = message.deviceTime;
            if (message.deviceTimezone != null && message.hasOwnProperty("deviceTimezone"))
                object.deviceTimezone = message.deviceTimezone;
            return object;
        };

        /**
         * Converts this Body to JSON.
         * @function toJSON
         * @memberof DEVICE_GETTIME_RSP.Body
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Body.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Body
         * @function getTypeUrl
         * @memberof DEVICE_GETTIME_RSP.Body
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Body.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_GETTIME_RSP.Body";
        };

        return Body;
    })();

    return DEVICE_GETTIME_RSP;
})();

$root.DEVICE_SETTIME_REQ = (function() {

    /**
     * Properties of a DEVICE_SETTIME_REQ.
     * @exports IDEVICE_SETTIME_REQ
     * @interface IDEVICE_SETTIME_REQ
     */

    /**
     * Constructs a new DEVICE_SETTIME_REQ.
     * @exports DEVICE_SETTIME_REQ
     * @classdesc Represents a DEVICE_SETTIME_REQ.
     * @implements IDEVICE_SETTIME_REQ
     * @constructor
     * @param {IDEVICE_SETTIME_REQ=} [properties] Properties to set
     */
    function DEVICE_SETTIME_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_SETTIME_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_SETTIME_REQ
     * @static
     * @param {IDEVICE_SETTIME_REQ=} [properties] Properties to set
     * @returns {DEVICE_SETTIME_REQ} DEVICE_SETTIME_REQ instance
     */
    DEVICE_SETTIME_REQ.create = function create(properties) {
        return new DEVICE_SETTIME_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_SETTIME_REQ message. Does not implicitly {@link DEVICE_SETTIME_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_SETTIME_REQ
     * @static
     * @param {IDEVICE_SETTIME_REQ} message DEVICE_SETTIME_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SETTIME_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_SETTIME_REQ message, length delimited. Does not implicitly {@link DEVICE_SETTIME_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_SETTIME_REQ
     * @static
     * @param {IDEVICE_SETTIME_REQ} message DEVICE_SETTIME_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SETTIME_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_SETTIME_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_SETTIME_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_SETTIME_REQ} DEVICE_SETTIME_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SETTIME_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_SETTIME_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_SETTIME_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_SETTIME_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_SETTIME_REQ} DEVICE_SETTIME_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SETTIME_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_SETTIME_REQ message.
     * @function verify
     * @memberof DEVICE_SETTIME_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_SETTIME_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_SETTIME_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_SETTIME_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_SETTIME_REQ} DEVICE_SETTIME_REQ
     */
    DEVICE_SETTIME_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_SETTIME_REQ)
            return object;
        return new $root.DEVICE_SETTIME_REQ();
    };

    /**
     * Creates a plain object from a DEVICE_SETTIME_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_SETTIME_REQ
     * @static
     * @param {DEVICE_SETTIME_REQ} message DEVICE_SETTIME_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_SETTIME_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_SETTIME_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_SETTIME_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_SETTIME_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_SETTIME_REQ
     * @function getTypeUrl
     * @memberof DEVICE_SETTIME_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_SETTIME_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_SETTIME_REQ";
    };

    return DEVICE_SETTIME_REQ;
})();

$root.DEVICE_SETTIME_RSP = (function() {

    /**
     * Properties of a DEVICE_SETTIME_RSP.
     * @exports IDEVICE_SETTIME_RSP
     * @interface IDEVICE_SETTIME_RSP
     * @property {number} deviceTime DEVICE_SETTIME_RSP deviceTime
     * @property {number|null} [deviceTimezone] DEVICE_SETTIME_RSP deviceTimezone
     */

    /**
     * Constructs a new DEVICE_SETTIME_RSP.
     * @exports DEVICE_SETTIME_RSP
     * @classdesc Represents a DEVICE_SETTIME_RSP.
     * @implements IDEVICE_SETTIME_RSP
     * @constructor
     * @param {IDEVICE_SETTIME_RSP=} [properties] Properties to set
     */
    function DEVICE_SETTIME_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_SETTIME_RSP deviceTime.
     * @member {number} deviceTime
     * @memberof DEVICE_SETTIME_RSP
     * @instance
     */
    DEVICE_SETTIME_RSP.prototype.deviceTime = 0;

    /**
     * DEVICE_SETTIME_RSP deviceTimezone.
     * @member {number} deviceTimezone
     * @memberof DEVICE_SETTIME_RSP
     * @instance
     */
    DEVICE_SETTIME_RSP.prototype.deviceTimezone = 0;

    /**
     * Creates a new DEVICE_SETTIME_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_SETTIME_RSP
     * @static
     * @param {IDEVICE_SETTIME_RSP=} [properties] Properties to set
     * @returns {DEVICE_SETTIME_RSP} DEVICE_SETTIME_RSP instance
     */
    DEVICE_SETTIME_RSP.create = function create(properties) {
        return new DEVICE_SETTIME_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_SETTIME_RSP message. Does not implicitly {@link DEVICE_SETTIME_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_SETTIME_RSP
     * @static
     * @param {IDEVICE_SETTIME_RSP} message DEVICE_SETTIME_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SETTIME_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.deviceTime);
        if (message.deviceTimezone != null && Object.hasOwnProperty.call(message, "deviceTimezone"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.deviceTimezone);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_SETTIME_RSP message, length delimited. Does not implicitly {@link DEVICE_SETTIME_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_SETTIME_RSP
     * @static
     * @param {IDEVICE_SETTIME_RSP} message DEVICE_SETTIME_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_SETTIME_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_SETTIME_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_SETTIME_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_SETTIME_RSP} DEVICE_SETTIME_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SETTIME_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_SETTIME_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.deviceTime = reader.uint32();
                    break;
                }
            case 2: {
                    message.deviceTimezone = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("deviceTime"))
            throw $util.ProtocolError("missing required 'deviceTime'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_SETTIME_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_SETTIME_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_SETTIME_RSP} DEVICE_SETTIME_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_SETTIME_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_SETTIME_RSP message.
     * @function verify
     * @memberof DEVICE_SETTIME_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_SETTIME_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.deviceTime))
            return "deviceTime: integer expected";
        if (message.deviceTimezone != null && message.hasOwnProperty("deviceTimezone"))
            if (!$util.isInteger(message.deviceTimezone))
                return "deviceTimezone: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_SETTIME_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_SETTIME_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_SETTIME_RSP} DEVICE_SETTIME_RSP
     */
    DEVICE_SETTIME_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_SETTIME_RSP)
            return object;
        var message = new $root.DEVICE_SETTIME_RSP();
        if (object.deviceTime != null)
            message.deviceTime = object.deviceTime >>> 0;
        if (object.deviceTimezone != null)
            message.deviceTimezone = object.deviceTimezone >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_SETTIME_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_SETTIME_RSP
     * @static
     * @param {DEVICE_SETTIME_RSP} message DEVICE_SETTIME_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_SETTIME_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.deviceTime = 0;
            object.deviceTimezone = 0;
        }
        if (message.deviceTime != null && message.hasOwnProperty("deviceTime"))
            object.deviceTime = message.deviceTime;
        if (message.deviceTimezone != null && message.hasOwnProperty("deviceTimezone"))
            object.deviceTimezone = message.deviceTimezone;
        return object;
    };

    /**
     * Converts this DEVICE_SETTIME_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_SETTIME_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_SETTIME_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_SETTIME_RSP
     * @function getTypeUrl
     * @memberof DEVICE_SETTIME_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_SETTIME_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_SETTIME_RSP";
    };

    return DEVICE_SETTIME_RSP;
})();

$root.DEVICE_CONTROL_LOCK_REQ = (function() {

    /**
     * Properties of a DEVICE_CONTROL_LOCK_REQ.
     * @exports IDEVICE_CONTROL_LOCK_REQ
     * @interface IDEVICE_CONTROL_LOCK_REQ
     */

    /**
     * Constructs a new DEVICE_CONTROL_LOCK_REQ.
     * @exports DEVICE_CONTROL_LOCK_REQ
     * @classdesc Represents a DEVICE_CONTROL_LOCK_REQ.
     * @implements IDEVICE_CONTROL_LOCK_REQ
     * @constructor
     * @param {IDEVICE_CONTROL_LOCK_REQ=} [properties] Properties to set
     */
    function DEVICE_CONTROL_LOCK_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_CONTROL_LOCK_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_CONTROL_LOCK_REQ
     * @static
     * @param {IDEVICE_CONTROL_LOCK_REQ=} [properties] Properties to set
     * @returns {DEVICE_CONTROL_LOCK_REQ} DEVICE_CONTROL_LOCK_REQ instance
     */
    DEVICE_CONTROL_LOCK_REQ.create = function create(properties) {
        return new DEVICE_CONTROL_LOCK_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_CONTROL_LOCK_REQ message. Does not implicitly {@link DEVICE_CONTROL_LOCK_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_CONTROL_LOCK_REQ
     * @static
     * @param {IDEVICE_CONTROL_LOCK_REQ} message DEVICE_CONTROL_LOCK_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CONTROL_LOCK_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_CONTROL_LOCK_REQ message, length delimited. Does not implicitly {@link DEVICE_CONTROL_LOCK_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_CONTROL_LOCK_REQ
     * @static
     * @param {IDEVICE_CONTROL_LOCK_REQ} message DEVICE_CONTROL_LOCK_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CONTROL_LOCK_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_CONTROL_LOCK_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_CONTROL_LOCK_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_CONTROL_LOCK_REQ} DEVICE_CONTROL_LOCK_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CONTROL_LOCK_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_CONTROL_LOCK_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_CONTROL_LOCK_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_CONTROL_LOCK_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_CONTROL_LOCK_REQ} DEVICE_CONTROL_LOCK_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CONTROL_LOCK_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_CONTROL_LOCK_REQ message.
     * @function verify
     * @memberof DEVICE_CONTROL_LOCK_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_CONTROL_LOCK_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_CONTROL_LOCK_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_CONTROL_LOCK_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_CONTROL_LOCK_REQ} DEVICE_CONTROL_LOCK_REQ
     */
    DEVICE_CONTROL_LOCK_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_CONTROL_LOCK_REQ)
            return object;
        return new $root.DEVICE_CONTROL_LOCK_REQ();
    };

    /**
     * Creates a plain object from a DEVICE_CONTROL_LOCK_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_CONTROL_LOCK_REQ
     * @static
     * @param {DEVICE_CONTROL_LOCK_REQ} message DEVICE_CONTROL_LOCK_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_CONTROL_LOCK_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_CONTROL_LOCK_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_CONTROL_LOCK_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_CONTROL_LOCK_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_CONTROL_LOCK_REQ
     * @function getTypeUrl
     * @memberof DEVICE_CONTROL_LOCK_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_CONTROL_LOCK_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_CONTROL_LOCK_REQ";
    };

    return DEVICE_CONTROL_LOCK_REQ;
})();

$root.DEVICE_CONTROL_LOCK_RSP = (function() {

    /**
     * Properties of a DEVICE_CONTROL_LOCK_RSP.
     * @exports IDEVICE_CONTROL_LOCK_RSP
     * @interface IDEVICE_CONTROL_LOCK_RSP
     * @property {number} result DEVICE_CONTROL_LOCK_RSP result
     */

    /**
     * Constructs a new DEVICE_CONTROL_LOCK_RSP.
     * @exports DEVICE_CONTROL_LOCK_RSP
     * @classdesc Represents a DEVICE_CONTROL_LOCK_RSP.
     * @implements IDEVICE_CONTROL_LOCK_RSP
     * @constructor
     * @param {IDEVICE_CONTROL_LOCK_RSP=} [properties] Properties to set
     */
    function DEVICE_CONTROL_LOCK_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_CONTROL_LOCK_RSP result.
     * @member {number} result
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @instance
     */
    DEVICE_CONTROL_LOCK_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_CONTROL_LOCK_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @static
     * @param {IDEVICE_CONTROL_LOCK_RSP=} [properties] Properties to set
     * @returns {DEVICE_CONTROL_LOCK_RSP} DEVICE_CONTROL_LOCK_RSP instance
     */
    DEVICE_CONTROL_LOCK_RSP.create = function create(properties) {
        return new DEVICE_CONTROL_LOCK_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_CONTROL_LOCK_RSP message. Does not implicitly {@link DEVICE_CONTROL_LOCK_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @static
     * @param {IDEVICE_CONTROL_LOCK_RSP} message DEVICE_CONTROL_LOCK_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CONTROL_LOCK_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_CONTROL_LOCK_RSP message, length delimited. Does not implicitly {@link DEVICE_CONTROL_LOCK_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @static
     * @param {IDEVICE_CONTROL_LOCK_RSP} message DEVICE_CONTROL_LOCK_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CONTROL_LOCK_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_CONTROL_LOCK_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_CONTROL_LOCK_RSP} DEVICE_CONTROL_LOCK_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CONTROL_LOCK_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_CONTROL_LOCK_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_CONTROL_LOCK_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_CONTROL_LOCK_RSP} DEVICE_CONTROL_LOCK_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CONTROL_LOCK_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_CONTROL_LOCK_RSP message.
     * @function verify
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_CONTROL_LOCK_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_CONTROL_LOCK_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_CONTROL_LOCK_RSP} DEVICE_CONTROL_LOCK_RSP
     */
    DEVICE_CONTROL_LOCK_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_CONTROL_LOCK_RSP)
            return object;
        var message = new $root.DEVICE_CONTROL_LOCK_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_CONTROL_LOCK_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @static
     * @param {DEVICE_CONTROL_LOCK_RSP} message DEVICE_CONTROL_LOCK_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_CONTROL_LOCK_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_CONTROL_LOCK_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_CONTROL_LOCK_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_CONTROL_LOCK_RSP
     * @function getTypeUrl
     * @memberof DEVICE_CONTROL_LOCK_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_CONTROL_LOCK_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_CONTROL_LOCK_RSP";
    };

    return DEVICE_CONTROL_LOCK_RSP;
})();

$root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.
     * @exports IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @interface IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @property {number} mapHeadId DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ mapHeadId
     * @property {number} planId DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ planId
     * @property {number} cleanAreaLength DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ cleanAreaLength
     * @property {Array.<DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICleanArea>|null} [cleanAreaList] DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ cleanAreaList
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.
     * @exports DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @classdesc Represents a DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.
     * @implements IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @constructor
     * @param {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ(properties) {
        this.cleanAreaList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ mapHeadId.
     * @member {number} mapHeadId
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.prototype.mapHeadId = 0;

    /**
     * DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ planId.
     * @member {number} planId
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.prototype.planId = 0;

    /**
     * DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ cleanAreaLength.
     * @member {number} cleanAreaLength
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.prototype.cleanAreaLength = 0;

    /**
     * DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ cleanAreaList.
     * @member {Array.<DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICleanArea>} cleanAreaList
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.prototype.cleanAreaList = $util.emptyArray;

    /**
     * Creates a new DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ instance
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.create = function create(properties) {
        return new DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ message. Does not implicitly {@link DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} message DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mapHeadId);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.planId);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.cleanAreaLength);
        if (message.cleanAreaList != null && message.cleanAreaList.length)
            for (var i = 0; i < message.cleanAreaList.length; ++i)
                $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea.encode(message.cleanAreaList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} message DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mapHeadId = reader.uint32();
                    break;
                }
            case 2: {
                    message.planId = reader.uint32();
                    break;
                }
            case 3: {
                    message.cleanAreaLength = reader.uint32();
                    break;
                }
            case 4: {
                    if (!(message.cleanAreaList && message.cleanAreaList.length))
                        message.cleanAreaList = [];
                    message.cleanAreaList.push($root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mapHeadId"))
            throw $util.ProtocolError("missing required 'mapHeadId'", { instance: message });
        if (!message.hasOwnProperty("planId"))
            throw $util.ProtocolError("missing required 'planId'", { instance: message });
        if (!message.hasOwnProperty("cleanAreaLength"))
            throw $util.ProtocolError("missing required 'cleanAreaLength'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mapHeadId))
            return "mapHeadId: integer expected";
        if (!$util.isInteger(message.planId))
            return "planId: integer expected";
        if (!$util.isInteger(message.cleanAreaLength))
            return "cleanAreaLength: integer expected";
        if (message.cleanAreaList != null && message.hasOwnProperty("cleanAreaList")) {
            if (!Array.isArray(message.cleanAreaList))
                return "cleanAreaList: array expected";
            for (var i = 0; i < message.cleanAreaList.length; ++i) {
                var error = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea.verify(message.cleanAreaList[i]);
                if (error)
                    return "cleanAreaList." + error;
            }
        }
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ();
        if (object.mapHeadId != null)
            message.mapHeadId = object.mapHeadId >>> 0;
        if (object.planId != null)
            message.planId = object.planId >>> 0;
        if (object.cleanAreaLength != null)
            message.cleanAreaLength = object.cleanAreaLength >>> 0;
        if (object.cleanAreaList) {
            if (!Array.isArray(object.cleanAreaList))
                throw TypeError(".DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.cleanAreaList: array expected");
            message.cleanAreaList = [];
            for (var i = 0; i < object.cleanAreaList.length; ++i) {
                if (typeof object.cleanAreaList[i] !== "object")
                    throw TypeError(".DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.cleanAreaList: object expected");
                message.cleanAreaList[i] = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea.fromObject(object.cleanAreaList[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @static
     * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} message DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.cleanAreaList = [];
        if (options.defaults) {
            object.mapHeadId = 0;
            object.planId = 0;
            object.cleanAreaLength = 0;
        }
        if (message.mapHeadId != null && message.hasOwnProperty("mapHeadId"))
            object.mapHeadId = message.mapHeadId;
        if (message.planId != null && message.hasOwnProperty("planId"))
            object.planId = message.planId;
        if (message.cleanAreaLength != null && message.hasOwnProperty("cleanAreaLength"))
            object.cleanAreaLength = message.cleanAreaLength;
        if (message.cleanAreaList && message.cleanAreaList.length) {
            object.cleanAreaList = [];
            for (var j = 0; j < message.cleanAreaList.length; ++j)
                object.cleanAreaList[j] = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea.toObject(message.cleanAreaList[j], options);
        }
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ";
    };

    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate = (function() {

        /**
         * Properties of a Coordinate.
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
         * @interface ICoordinate
         * @property {number} x Coordinate x
         * @property {number} y Coordinate y
         */

        /**
         * Constructs a new Coordinate.
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
         * @classdesc Represents a Coordinate.
         * @implements ICoordinate
         * @constructor
         * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICoordinate=} [properties] Properties to set
         */
        function Coordinate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Coordinate x.
         * @member {number} x
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @instance
         */
        Coordinate.prototype.x = 0;

        /**
         * Coordinate y.
         * @member {number} y
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @instance
         */
        Coordinate.prototype.y = 0;

        /**
         * Creates a new Coordinate instance using the specified properties.
         * @function create
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @static
         * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICoordinate=} [properties] Properties to set
         * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate} Coordinate instance
         */
        Coordinate.create = function create(properties) {
            return new Coordinate(properties);
        };

        /**
         * Encodes the specified Coordinate message. Does not implicitly {@link DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @static
         * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICoordinate} message Coordinate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Coordinate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);
            return writer;
        };

        /**
         * Encodes the specified Coordinate message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @static
         * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICoordinate} message Coordinate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Coordinate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Coordinate message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate} Coordinate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Coordinate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.x = reader.float();
                        break;
                    }
                case 2: {
                        message.y = reader.float();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("x"))
                throw $util.ProtocolError("missing required 'x'", { instance: message });
            if (!message.hasOwnProperty("y"))
                throw $util.ProtocolError("missing required 'y'", { instance: message });
            return message;
        };

        /**
         * Decodes a Coordinate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate} Coordinate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Coordinate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Coordinate message.
         * @function verify
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Coordinate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (typeof message.x !== "number")
                return "x: number expected";
            if (typeof message.y !== "number")
                return "y: number expected";
            return null;
        };

        /**
         * Creates a Coordinate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate} Coordinate
         */
        Coordinate.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate)
                return object;
            var message = new $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate();
            if (object.x != null)
                message.x = Number(object.x);
            if (object.y != null)
                message.y = Number(object.y);
            return message;
        };

        /**
         * Creates a plain object from a Coordinate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @static
         * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate} message Coordinate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Coordinate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.x = 0;
                object.y = 0;
            }
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
            return object;
        };

        /**
         * Converts this Coordinate to JSON.
         * @function toJSON
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Coordinate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Coordinate
         * @function getTypeUrl
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Coordinate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate";
        };

        return Coordinate;
    })();

    DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea = (function() {

        /**
         * Properties of a CleanArea.
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
         * @interface ICleanArea
         * @property {number} cleanAreaId CleanArea cleanAreaId
         * @property {number} type CleanArea type
         * @property {number} coordinateLength CleanArea coordinateLength
         * @property {Array.<DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICoordinate>|null} [coordinateList] CleanArea coordinateList
         */

        /**
         * Constructs a new CleanArea.
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ
         * @classdesc Represents a CleanArea.
         * @implements ICleanArea
         * @constructor
         * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICleanArea=} [properties] Properties to set
         */
        function CleanArea(properties) {
            this.coordinateList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CleanArea cleanAreaId.
         * @member {number} cleanAreaId
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @instance
         */
        CleanArea.prototype.cleanAreaId = 0;

        /**
         * CleanArea type.
         * @member {number} type
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @instance
         */
        CleanArea.prototype.type = 0;

        /**
         * CleanArea coordinateLength.
         * @member {number} coordinateLength
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @instance
         */
        CleanArea.prototype.coordinateLength = 0;

        /**
         * CleanArea coordinateList.
         * @member {Array.<DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICoordinate>} coordinateList
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @instance
         */
        CleanArea.prototype.coordinateList = $util.emptyArray;

        /**
         * Creates a new CleanArea instance using the specified properties.
         * @function create
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @static
         * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICleanArea=} [properties] Properties to set
         * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea} CleanArea instance
         */
        CleanArea.create = function create(properties) {
            return new CleanArea(properties);
        };

        /**
         * Encodes the specified CleanArea message. Does not implicitly {@link DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @static
         * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICleanArea} message CleanArea message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanArea.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.cleanAreaId);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.coordinateLength);
            if (message.coordinateList != null && message.coordinateList.length)
                for (var i = 0; i < message.coordinateList.length; ++i)
                    $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate.encode(message.coordinateList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CleanArea message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @static
         * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.ICleanArea} message CleanArea message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanArea.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CleanArea message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea} CleanArea
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanArea.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.cleanAreaId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.type = reader.uint32();
                        break;
                    }
                case 3: {
                        message.coordinateLength = reader.uint32();
                        break;
                    }
                case 4: {
                        if (!(message.coordinateList && message.coordinateList.length))
                            message.coordinateList = [];
                        message.coordinateList.push($root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("cleanAreaId"))
                throw $util.ProtocolError("missing required 'cleanAreaId'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("coordinateLength"))
                throw $util.ProtocolError("missing required 'coordinateLength'", { instance: message });
            return message;
        };

        /**
         * Decodes a CleanArea message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea} CleanArea
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanArea.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CleanArea message.
         * @function verify
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CleanArea.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.cleanAreaId))
                return "cleanAreaId: integer expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.coordinateLength))
                return "coordinateLength: integer expected";
            if (message.coordinateList != null && message.hasOwnProperty("coordinateList")) {
                if (!Array.isArray(message.coordinateList))
                    return "coordinateList: array expected";
                for (var i = 0; i < message.coordinateList.length; ++i) {
                    var error = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate.verify(message.coordinateList[i]);
                    if (error)
                        return "coordinateList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CleanArea message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea} CleanArea
         */
        CleanArea.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea)
                return object;
            var message = new $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea();
            if (object.cleanAreaId != null)
                message.cleanAreaId = object.cleanAreaId >>> 0;
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.coordinateLength != null)
                message.coordinateLength = object.coordinateLength >>> 0;
            if (object.coordinateList) {
                if (!Array.isArray(object.coordinateList))
                    throw TypeError(".DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea.coordinateList: array expected");
                message.coordinateList = [];
                for (var i = 0; i < object.coordinateList.length; ++i) {
                    if (typeof object.coordinateList[i] !== "object")
                        throw TypeError(".DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea.coordinateList: object expected");
                    message.coordinateList[i] = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate.fromObject(object.coordinateList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CleanArea message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @static
         * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea} message CleanArea
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CleanArea.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.coordinateList = [];
            if (options.defaults) {
                object.cleanAreaId = 0;
                object.type = 0;
                object.coordinateLength = 0;
            }
            if (message.cleanAreaId != null && message.hasOwnProperty("cleanAreaId"))
                object.cleanAreaId = message.cleanAreaId;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.coordinateLength != null && message.hasOwnProperty("coordinateLength"))
                object.coordinateLength = message.coordinateLength;
            if (message.coordinateList && message.coordinateList.length) {
                object.coordinateList = [];
                for (var j = 0; j < message.coordinateList.length; ++j)
                    object.coordinateList[j] = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.Coordinate.toObject(message.coordinateList[j], options);
            }
            return object;
        };

        /**
         * Converts this CleanArea to JSON.
         * @function toJSON
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CleanArea.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for CleanArea
         * @function getTypeUrl
         * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CleanArea.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.CleanArea";
        };

        return CleanArea;
    })();

    return DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ;
})();

$root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.
     * @exports IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @interface IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @property {number} mapHeadId DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ mapHeadId
     * @property {number} planId DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ planId
     * @property {number} cleanAreaLength DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ cleanAreaLength
     * @property {Array.<DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICleanArea>|null} [cleanAreaList] DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ cleanAreaList
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.
     * @exports DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @classdesc Represents a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.
     * @implements IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @constructor
     * @param {IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ(properties) {
        this.cleanAreaList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ mapHeadId.
     * @member {number} mapHeadId
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.prototype.mapHeadId = 0;

    /**
     * DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ planId.
     * @member {number} planId
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.prototype.planId = 0;

    /**
     * DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ cleanAreaLength.
     * @member {number} cleanAreaLength
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.prototype.cleanAreaLength = 0;

    /**
     * DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ cleanAreaList.
     * @member {Array.<DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICleanArea>} cleanAreaList
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.prototype.cleanAreaList = $util.emptyArray;

    /**
     * Creates a new DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ} DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ instance
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.create = function create(properties) {
        return new DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ message. Does not implicitly {@link DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ} message DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mapHeadId);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.planId);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.cleanAreaLength);
        if (message.cleanAreaList != null && message.cleanAreaList.length)
            for (var i = 0; i < message.cleanAreaList.length; ++i)
                $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea.encode(message.cleanAreaList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ} message DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ} DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mapHeadId = reader.uint32();
                    break;
                }
            case 2: {
                    message.planId = reader.uint32();
                    break;
                }
            case 3: {
                    message.cleanAreaLength = reader.uint32();
                    break;
                }
            case 4: {
                    if (!(message.cleanAreaList && message.cleanAreaList.length))
                        message.cleanAreaList = [];
                    message.cleanAreaList.push($root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mapHeadId"))
            throw $util.ProtocolError("missing required 'mapHeadId'", { instance: message });
        if (!message.hasOwnProperty("planId"))
            throw $util.ProtocolError("missing required 'planId'", { instance: message });
        if (!message.hasOwnProperty("cleanAreaLength"))
            throw $util.ProtocolError("missing required 'cleanAreaLength'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ} DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mapHeadId))
            return "mapHeadId: integer expected";
        if (!$util.isInteger(message.planId))
            return "planId: integer expected";
        if (!$util.isInteger(message.cleanAreaLength))
            return "cleanAreaLength: integer expected";
        if (message.cleanAreaList != null && message.hasOwnProperty("cleanAreaList")) {
            if (!Array.isArray(message.cleanAreaList))
                return "cleanAreaList: array expected";
            for (var i = 0; i < message.cleanAreaList.length; ++i) {
                var error = $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea.verify(message.cleanAreaList[i]);
                if (error)
                    return "cleanAreaList." + error;
            }
        }
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ} DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ();
        if (object.mapHeadId != null)
            message.mapHeadId = object.mapHeadId >>> 0;
        if (object.planId != null)
            message.planId = object.planId >>> 0;
        if (object.cleanAreaLength != null)
            message.cleanAreaLength = object.cleanAreaLength >>> 0;
        if (object.cleanAreaList) {
            if (!Array.isArray(object.cleanAreaList))
                throw TypeError(".DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.cleanAreaList: array expected");
            message.cleanAreaList = [];
            for (var i = 0; i < object.cleanAreaList.length; ++i) {
                if (typeof object.cleanAreaList[i] !== "object")
                    throw TypeError(".DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.cleanAreaList: object expected");
                message.cleanAreaList[i] = $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea.fromObject(object.cleanAreaList[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @static
     * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ} message DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.cleanAreaList = [];
        if (options.defaults) {
            object.mapHeadId = 0;
            object.planId = 0;
            object.cleanAreaLength = 0;
        }
        if (message.mapHeadId != null && message.hasOwnProperty("mapHeadId"))
            object.mapHeadId = message.mapHeadId;
        if (message.planId != null && message.hasOwnProperty("planId"))
            object.planId = message.planId;
        if (message.cleanAreaLength != null && message.hasOwnProperty("cleanAreaLength"))
            object.cleanAreaLength = message.cleanAreaLength;
        if (message.cleanAreaList && message.cleanAreaList.length) {
            object.cleanAreaList = [];
            for (var j = 0; j < message.cleanAreaList.length; ++j)
                object.cleanAreaList[j] = $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea.toObject(message.cleanAreaList[j], options);
        }
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ";
    };

    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate = (function() {

        /**
         * Properties of a Coordinate.
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
         * @interface ICoordinate
         * @property {number} x Coordinate x
         * @property {number} y Coordinate y
         */

        /**
         * Constructs a new Coordinate.
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
         * @classdesc Represents a Coordinate.
         * @implements ICoordinate
         * @constructor
         * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICoordinate=} [properties] Properties to set
         */
        function Coordinate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Coordinate x.
         * @member {number} x
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @instance
         */
        Coordinate.prototype.x = 0;

        /**
         * Coordinate y.
         * @member {number} y
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @instance
         */
        Coordinate.prototype.y = 0;

        /**
         * Creates a new Coordinate instance using the specified properties.
         * @function create
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @static
         * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICoordinate=} [properties] Properties to set
         * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate} Coordinate instance
         */
        Coordinate.create = function create(properties) {
            return new Coordinate(properties);
        };

        /**
         * Encodes the specified Coordinate message. Does not implicitly {@link DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @static
         * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICoordinate} message Coordinate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Coordinate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);
            return writer;
        };

        /**
         * Encodes the specified Coordinate message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @static
         * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICoordinate} message Coordinate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Coordinate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Coordinate message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate} Coordinate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Coordinate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.x = reader.float();
                        break;
                    }
                case 2: {
                        message.y = reader.float();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("x"))
                throw $util.ProtocolError("missing required 'x'", { instance: message });
            if (!message.hasOwnProperty("y"))
                throw $util.ProtocolError("missing required 'y'", { instance: message });
            return message;
        };

        /**
         * Decodes a Coordinate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate} Coordinate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Coordinate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Coordinate message.
         * @function verify
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Coordinate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (typeof message.x !== "number")
                return "x: number expected";
            if (typeof message.y !== "number")
                return "y: number expected";
            return null;
        };

        /**
         * Creates a Coordinate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate} Coordinate
         */
        Coordinate.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate)
                return object;
            var message = new $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate();
            if (object.x != null)
                message.x = Number(object.x);
            if (object.y != null)
                message.y = Number(object.y);
            return message;
        };

        /**
         * Creates a plain object from a Coordinate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @static
         * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate} message Coordinate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Coordinate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.x = 0;
                object.y = 0;
            }
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
            return object;
        };

        /**
         * Converts this Coordinate to JSON.
         * @function toJSON
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Coordinate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Coordinate
         * @function getTypeUrl
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Coordinate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate";
        };

        return Coordinate;
    })();

    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea = (function() {

        /**
         * Properties of a CleanArea.
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
         * @interface ICleanArea
         * @property {number} cleanAreaId CleanArea cleanAreaId
         * @property {number} type CleanArea type
         * @property {number} coordinateLength CleanArea coordinateLength
         * @property {Array.<DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICoordinate>|null} [coordinateList] CleanArea coordinateList
         */

        /**
         * Constructs a new CleanArea.
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ
         * @classdesc Represents a CleanArea.
         * @implements ICleanArea
         * @constructor
         * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICleanArea=} [properties] Properties to set
         */
        function CleanArea(properties) {
            this.coordinateList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CleanArea cleanAreaId.
         * @member {number} cleanAreaId
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @instance
         */
        CleanArea.prototype.cleanAreaId = 0;

        /**
         * CleanArea type.
         * @member {number} type
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @instance
         */
        CleanArea.prototype.type = 0;

        /**
         * CleanArea coordinateLength.
         * @member {number} coordinateLength
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @instance
         */
        CleanArea.prototype.coordinateLength = 0;

        /**
         * CleanArea coordinateList.
         * @member {Array.<DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICoordinate>} coordinateList
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @instance
         */
        CleanArea.prototype.coordinateList = $util.emptyArray;

        /**
         * Creates a new CleanArea instance using the specified properties.
         * @function create
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @static
         * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICleanArea=} [properties] Properties to set
         * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea} CleanArea instance
         */
        CleanArea.create = function create(properties) {
            return new CleanArea(properties);
        };

        /**
         * Encodes the specified CleanArea message. Does not implicitly {@link DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @static
         * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICleanArea} message CleanArea message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanArea.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.cleanAreaId);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.coordinateLength);
            if (message.coordinateList != null && message.coordinateList.length)
                for (var i = 0; i < message.coordinateList.length; ++i)
                    $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate.encode(message.coordinateList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CleanArea message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @static
         * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.ICleanArea} message CleanArea message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanArea.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CleanArea message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea} CleanArea
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanArea.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.cleanAreaId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.type = reader.uint32();
                        break;
                    }
                case 3: {
                        message.coordinateLength = reader.uint32();
                        break;
                    }
                case 4: {
                        if (!(message.coordinateList && message.coordinateList.length))
                            message.coordinateList = [];
                        message.coordinateList.push($root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("cleanAreaId"))
                throw $util.ProtocolError("missing required 'cleanAreaId'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("coordinateLength"))
                throw $util.ProtocolError("missing required 'coordinateLength'", { instance: message });
            return message;
        };

        /**
         * Decodes a CleanArea message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea} CleanArea
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanArea.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CleanArea message.
         * @function verify
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CleanArea.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.cleanAreaId))
                return "cleanAreaId: integer expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.coordinateLength))
                return "coordinateLength: integer expected";
            if (message.coordinateList != null && message.hasOwnProperty("coordinateList")) {
                if (!Array.isArray(message.coordinateList))
                    return "coordinateList: array expected";
                for (var i = 0; i < message.coordinateList.length; ++i) {
                    var error = $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate.verify(message.coordinateList[i]);
                    if (error)
                        return "coordinateList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CleanArea message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea} CleanArea
         */
        CleanArea.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea)
                return object;
            var message = new $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea();
            if (object.cleanAreaId != null)
                message.cleanAreaId = object.cleanAreaId >>> 0;
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.coordinateLength != null)
                message.coordinateLength = object.coordinateLength >>> 0;
            if (object.coordinateList) {
                if (!Array.isArray(object.coordinateList))
                    throw TypeError(".DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea.coordinateList: array expected");
                message.coordinateList = [];
                for (var i = 0; i < object.coordinateList.length; ++i) {
                    if (typeof object.coordinateList[i] !== "object")
                        throw TypeError(".DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea.coordinateList: object expected");
                    message.coordinateList[i] = $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate.fromObject(object.coordinateList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CleanArea message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @static
         * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea} message CleanArea
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CleanArea.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.coordinateList = [];
            if (options.defaults) {
                object.cleanAreaId = 0;
                object.type = 0;
                object.coordinateLength = 0;
            }
            if (message.cleanAreaId != null && message.hasOwnProperty("cleanAreaId"))
                object.cleanAreaId = message.cleanAreaId;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.coordinateLength != null && message.hasOwnProperty("coordinateLength"))
                object.coordinateLength = message.coordinateLength;
            if (message.coordinateList && message.coordinateList.length) {
                object.coordinateList = [];
                for (var j = 0; j < message.coordinateList.length; ++j)
                    object.coordinateList[j] = $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.Coordinate.toObject(message.coordinateList[j], options);
            }
            return object;
        };

        /**
         * Converts this CleanArea to JSON.
         * @function toJSON
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CleanArea.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for CleanArea
         * @function getTypeUrl
         * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CleanArea.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.CleanArea";
        };

        return CleanArea;
    })();

    return DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ;
})();

$root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.
     * @exports IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @interface IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @property {number} result DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP result
     * @property {IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ} position DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP position
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.
     * @exports DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @classdesc Represents a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.
     * @implements IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @constructor
     * @param {IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP result.
     * @member {number} result
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @instance
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.prototype.result = 0;

    /**
     * DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP position.
     * @member {IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ} position
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @instance
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.prototype.position = null;

    /**
     * Creates a new DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP} DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP instance
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.create = function create(properties) {
        return new DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP message. Does not implicitly {@link DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP} message DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.encode(message.position, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP} message DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP} DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.position = $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("position"))
            throw $util.ProtocolError("missing required 'position'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP} DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        {
            var error = $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.verify(message.position);
            if (error)
                return "position." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP} DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP)
            return object;
        var message = new $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.position != null) {
            if (typeof object.position !== "object")
                throw TypeError(".DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.position: object expected");
            message.position = $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.fromObject(object.position);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @static
     * @param {DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP} message DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.position = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.position != null && message.hasOwnProperty("position"))
            object.position = $root.DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_REQ.toObject(message.position, options);
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP";
    };

    return DEVICE_MAPID_SET_AREA_RESTRICTED_INFO_RSP;
})();

$root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.
     * @exports IDEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @interface IDEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @property {number} result DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP result
     * @property {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} position DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP position
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.
     * @exports DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @classdesc Represents a DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.
     * @implements IDEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @constructor
     * @param {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP result.
     * @member {number} result
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @instance
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.prototype.result = 0;

    /**
     * DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP position.
     * @member {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} position
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @instance
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.prototype.position = null;

    /**
     * Creates a new DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP} DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP instance
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.create = function create(properties) {
        return new DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP message. Does not implicitly {@link DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP} message DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.encode(message.position, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP} message DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP} DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.position = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("position"))
            throw $util.ProtocolError("missing required 'position'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP} DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        {
            var error = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.verify(message.position);
            if (error)
                return "position." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP} DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP)
            return object;
        var message = new $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.position != null) {
            if (typeof object.position !== "object")
                throw TypeError(".DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.position: object expected");
            message.position = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.fromObject(object.position);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @static
     * @param {DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP} message DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.position = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.position != null && message.hasOwnProperty("position"))
            object.position = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.toObject(message.position, options);
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP";
    };

    return DEVICE_MAPID_SET_AREA_CLEAN_INFO_RSP;
})();

$root.DEVICE_AREA_CLEAN_REQ = (function() {

    /**
     * Properties of a DEVICE_AREA_CLEAN_REQ.
     * @exports IDEVICE_AREA_CLEAN_REQ
     * @interface IDEVICE_AREA_CLEAN_REQ
     * @property {number} ctrlValue DEVICE_AREA_CLEAN_REQ ctrlValue
     */

    /**
     * Constructs a new DEVICE_AREA_CLEAN_REQ.
     * @exports DEVICE_AREA_CLEAN_REQ
     * @classdesc Represents a DEVICE_AREA_CLEAN_REQ.
     * @implements IDEVICE_AREA_CLEAN_REQ
     * @constructor
     * @param {IDEVICE_AREA_CLEAN_REQ=} [properties] Properties to set
     */
    function DEVICE_AREA_CLEAN_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_AREA_CLEAN_REQ ctrlValue.
     * @member {number} ctrlValue
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @instance
     */
    DEVICE_AREA_CLEAN_REQ.prototype.ctrlValue = 0;

    /**
     * Creates a new DEVICE_AREA_CLEAN_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @static
     * @param {IDEVICE_AREA_CLEAN_REQ=} [properties] Properties to set
     * @returns {DEVICE_AREA_CLEAN_REQ} DEVICE_AREA_CLEAN_REQ instance
     */
    DEVICE_AREA_CLEAN_REQ.create = function create(properties) {
        return new DEVICE_AREA_CLEAN_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_AREA_CLEAN_REQ message. Does not implicitly {@link DEVICE_AREA_CLEAN_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @static
     * @param {IDEVICE_AREA_CLEAN_REQ} message DEVICE_AREA_CLEAN_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_AREA_CLEAN_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ctrlValue);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_AREA_CLEAN_REQ message, length delimited. Does not implicitly {@link DEVICE_AREA_CLEAN_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @static
     * @param {IDEVICE_AREA_CLEAN_REQ} message DEVICE_AREA_CLEAN_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_AREA_CLEAN_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_AREA_CLEAN_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_AREA_CLEAN_REQ} DEVICE_AREA_CLEAN_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_AREA_CLEAN_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_AREA_CLEAN_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.ctrlValue = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ctrlValue"))
            throw $util.ProtocolError("missing required 'ctrlValue'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_AREA_CLEAN_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_AREA_CLEAN_REQ} DEVICE_AREA_CLEAN_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_AREA_CLEAN_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_AREA_CLEAN_REQ message.
     * @function verify
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_AREA_CLEAN_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ctrlValue))
            return "ctrlValue: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_AREA_CLEAN_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_AREA_CLEAN_REQ} DEVICE_AREA_CLEAN_REQ
     */
    DEVICE_AREA_CLEAN_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_AREA_CLEAN_REQ)
            return object;
        var message = new $root.DEVICE_AREA_CLEAN_REQ();
        if (object.ctrlValue != null)
            message.ctrlValue = object.ctrlValue >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_AREA_CLEAN_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @static
     * @param {DEVICE_AREA_CLEAN_REQ} message DEVICE_AREA_CLEAN_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_AREA_CLEAN_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.ctrlValue = 0;
        if (message.ctrlValue != null && message.hasOwnProperty("ctrlValue"))
            object.ctrlValue = message.ctrlValue;
        return object;
    };

    /**
     * Converts this DEVICE_AREA_CLEAN_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_AREA_CLEAN_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_AREA_CLEAN_REQ
     * @function getTypeUrl
     * @memberof DEVICE_AREA_CLEAN_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_AREA_CLEAN_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_AREA_CLEAN_REQ";
    };

    return DEVICE_AREA_CLEAN_REQ;
})();

$root.DEVICE_AREA_CLEAN_RSP = (function() {

    /**
     * Properties of a DEVICE_AREA_CLEAN_RSP.
     * @exports IDEVICE_AREA_CLEAN_RSP
     * @interface IDEVICE_AREA_CLEAN_RSP
     * @property {number} result DEVICE_AREA_CLEAN_RSP result
     */

    /**
     * Constructs a new DEVICE_AREA_CLEAN_RSP.
     * @exports DEVICE_AREA_CLEAN_RSP
     * @classdesc Represents a DEVICE_AREA_CLEAN_RSP.
     * @implements IDEVICE_AREA_CLEAN_RSP
     * @constructor
     * @param {IDEVICE_AREA_CLEAN_RSP=} [properties] Properties to set
     */
    function DEVICE_AREA_CLEAN_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_AREA_CLEAN_RSP result.
     * @member {number} result
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @instance
     */
    DEVICE_AREA_CLEAN_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_AREA_CLEAN_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @static
     * @param {IDEVICE_AREA_CLEAN_RSP=} [properties] Properties to set
     * @returns {DEVICE_AREA_CLEAN_RSP} DEVICE_AREA_CLEAN_RSP instance
     */
    DEVICE_AREA_CLEAN_RSP.create = function create(properties) {
        return new DEVICE_AREA_CLEAN_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_AREA_CLEAN_RSP message. Does not implicitly {@link DEVICE_AREA_CLEAN_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @static
     * @param {IDEVICE_AREA_CLEAN_RSP} message DEVICE_AREA_CLEAN_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_AREA_CLEAN_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_AREA_CLEAN_RSP message, length delimited. Does not implicitly {@link DEVICE_AREA_CLEAN_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @static
     * @param {IDEVICE_AREA_CLEAN_RSP} message DEVICE_AREA_CLEAN_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_AREA_CLEAN_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_AREA_CLEAN_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_AREA_CLEAN_RSP} DEVICE_AREA_CLEAN_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_AREA_CLEAN_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_AREA_CLEAN_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_AREA_CLEAN_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_AREA_CLEAN_RSP} DEVICE_AREA_CLEAN_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_AREA_CLEAN_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_AREA_CLEAN_RSP message.
     * @function verify
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_AREA_CLEAN_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_AREA_CLEAN_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_AREA_CLEAN_RSP} DEVICE_AREA_CLEAN_RSP
     */
    DEVICE_AREA_CLEAN_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_AREA_CLEAN_RSP)
            return object;
        var message = new $root.DEVICE_AREA_CLEAN_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_AREA_CLEAN_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @static
     * @param {DEVICE_AREA_CLEAN_RSP} message DEVICE_AREA_CLEAN_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_AREA_CLEAN_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_AREA_CLEAN_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_AREA_CLEAN_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_AREA_CLEAN_RSP
     * @function getTypeUrl
     * @memberof DEVICE_AREA_CLEAN_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_AREA_CLEAN_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_AREA_CLEAN_RSP";
    };

    return DEVICE_AREA_CLEAN_RSP;
})();

$root.DEVICE_MANUAL_CTRL_REQ = (function() {

    /**
     * Properties of a DEVICE_MANUAL_CTRL_REQ.
     * @exports IDEVICE_MANUAL_CTRL_REQ
     * @interface IDEVICE_MANUAL_CTRL_REQ
     * @property {number} command DEVICE_MANUAL_CTRL_REQ command
     */

    /**
     * Constructs a new DEVICE_MANUAL_CTRL_REQ.
     * @exports DEVICE_MANUAL_CTRL_REQ
     * @classdesc Represents a DEVICE_MANUAL_CTRL_REQ.
     * @implements IDEVICE_MANUAL_CTRL_REQ
     * @constructor
     * @param {IDEVICE_MANUAL_CTRL_REQ=} [properties] Properties to set
     */
    function DEVICE_MANUAL_CTRL_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MANUAL_CTRL_REQ command.
     * @member {number} command
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @instance
     */
    DEVICE_MANUAL_CTRL_REQ.prototype.command = 0;

    /**
     * Creates a new DEVICE_MANUAL_CTRL_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @static
     * @param {IDEVICE_MANUAL_CTRL_REQ=} [properties] Properties to set
     * @returns {DEVICE_MANUAL_CTRL_REQ} DEVICE_MANUAL_CTRL_REQ instance
     */
    DEVICE_MANUAL_CTRL_REQ.create = function create(properties) {
        return new DEVICE_MANUAL_CTRL_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MANUAL_CTRL_REQ message. Does not implicitly {@link DEVICE_MANUAL_CTRL_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @static
     * @param {IDEVICE_MANUAL_CTRL_REQ} message DEVICE_MANUAL_CTRL_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MANUAL_CTRL_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.command);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MANUAL_CTRL_REQ message, length delimited. Does not implicitly {@link DEVICE_MANUAL_CTRL_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @static
     * @param {IDEVICE_MANUAL_CTRL_REQ} message DEVICE_MANUAL_CTRL_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MANUAL_CTRL_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MANUAL_CTRL_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MANUAL_CTRL_REQ} DEVICE_MANUAL_CTRL_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MANUAL_CTRL_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MANUAL_CTRL_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.command = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("command"))
            throw $util.ProtocolError("missing required 'command'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MANUAL_CTRL_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MANUAL_CTRL_REQ} DEVICE_MANUAL_CTRL_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MANUAL_CTRL_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MANUAL_CTRL_REQ message.
     * @function verify
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MANUAL_CTRL_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.command))
            return "command: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MANUAL_CTRL_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MANUAL_CTRL_REQ} DEVICE_MANUAL_CTRL_REQ
     */
    DEVICE_MANUAL_CTRL_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MANUAL_CTRL_REQ)
            return object;
        var message = new $root.DEVICE_MANUAL_CTRL_REQ();
        if (object.command != null)
            message.command = object.command >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MANUAL_CTRL_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @static
     * @param {DEVICE_MANUAL_CTRL_REQ} message DEVICE_MANUAL_CTRL_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MANUAL_CTRL_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.command = 0;
        if (message.command != null && message.hasOwnProperty("command"))
            object.command = message.command;
        return object;
    };

    /**
     * Converts this DEVICE_MANUAL_CTRL_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MANUAL_CTRL_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MANUAL_CTRL_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MANUAL_CTRL_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MANUAL_CTRL_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MANUAL_CTRL_REQ";
    };

    return DEVICE_MANUAL_CTRL_REQ;
})();

$root.DEVICE_MANUAL_CTRL_RSP = (function() {

    /**
     * Properties of a DEVICE_MANUAL_CTRL_RSP.
     * @exports IDEVICE_MANUAL_CTRL_RSP
     * @interface IDEVICE_MANUAL_CTRL_RSP
     * @property {number} result DEVICE_MANUAL_CTRL_RSP result
     */

    /**
     * Constructs a new DEVICE_MANUAL_CTRL_RSP.
     * @exports DEVICE_MANUAL_CTRL_RSP
     * @classdesc Represents a DEVICE_MANUAL_CTRL_RSP.
     * @implements IDEVICE_MANUAL_CTRL_RSP
     * @constructor
     * @param {IDEVICE_MANUAL_CTRL_RSP=} [properties] Properties to set
     */
    function DEVICE_MANUAL_CTRL_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MANUAL_CTRL_RSP result.
     * @member {number} result
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @instance
     */
    DEVICE_MANUAL_CTRL_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_MANUAL_CTRL_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @static
     * @param {IDEVICE_MANUAL_CTRL_RSP=} [properties] Properties to set
     * @returns {DEVICE_MANUAL_CTRL_RSP} DEVICE_MANUAL_CTRL_RSP instance
     */
    DEVICE_MANUAL_CTRL_RSP.create = function create(properties) {
        return new DEVICE_MANUAL_CTRL_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MANUAL_CTRL_RSP message. Does not implicitly {@link DEVICE_MANUAL_CTRL_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @static
     * @param {IDEVICE_MANUAL_CTRL_RSP} message DEVICE_MANUAL_CTRL_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MANUAL_CTRL_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MANUAL_CTRL_RSP message, length delimited. Does not implicitly {@link DEVICE_MANUAL_CTRL_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @static
     * @param {IDEVICE_MANUAL_CTRL_RSP} message DEVICE_MANUAL_CTRL_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MANUAL_CTRL_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MANUAL_CTRL_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MANUAL_CTRL_RSP} DEVICE_MANUAL_CTRL_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MANUAL_CTRL_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MANUAL_CTRL_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MANUAL_CTRL_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MANUAL_CTRL_RSP} DEVICE_MANUAL_CTRL_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MANUAL_CTRL_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MANUAL_CTRL_RSP message.
     * @function verify
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MANUAL_CTRL_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MANUAL_CTRL_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MANUAL_CTRL_RSP} DEVICE_MANUAL_CTRL_RSP
     */
    DEVICE_MANUAL_CTRL_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MANUAL_CTRL_RSP)
            return object;
        var message = new $root.DEVICE_MANUAL_CTRL_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MANUAL_CTRL_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @static
     * @param {DEVICE_MANUAL_CTRL_RSP} message DEVICE_MANUAL_CTRL_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MANUAL_CTRL_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_MANUAL_CTRL_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MANUAL_CTRL_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MANUAL_CTRL_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MANUAL_CTRL_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MANUAL_CTRL_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MANUAL_CTRL_RSP";
    };

    return DEVICE_MANUAL_CTRL_RSP;
})();

$root.DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.
     * @exports IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @interface IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @property {number} mode DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ mode
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.
     * @exports DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @classdesc Represents a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.
     * @implements IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @constructor
     * @param {IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ mode.
     * @member {number} mode
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.prototype.mode = 0;

    /**
     * Creates a new DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ} DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ instance
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.create = function create(properties) {
        return new DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ message. Does not implicitly {@link DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ} message DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mode);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ} message DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ} DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mode = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mode"))
            throw $util.ProtocolError("missing required 'mode'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ} DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mode))
            return "mode: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ} DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ();
        if (object.mode != null)
            message.mode = object.mode >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @static
     * @param {DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ} message DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.mode = 0;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = message.mode;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ";
    };

    return DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_REQ;
})();

$root.DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.
     * @exports IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @interface IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @property {number} result DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP result
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.
     * @exports DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @classdesc Represents a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.
     * @implements IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @constructor
     * @param {IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP result.
     * @member {number} result
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @instance
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP} DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP instance
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.create = function create(properties) {
        return new DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP message. Does not implicitly {@link DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP} message DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP} message DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP} DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP} DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP} DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP)
            return object;
        var message = new $root.DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @static
     * @param {DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP} message DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP";
    };

    return DEVICE_MAPID_SET_SAVEWAITINGMAP_INFO_RSP;
})();

$root.DEVICE_ORDERLIST_GETTING_REQ = (function() {

    /**
     * Properties of a DEVICE_ORDERLIST_GETTING_REQ.
     * @exports IDEVICE_ORDERLIST_GETTING_REQ
     * @interface IDEVICE_ORDERLIST_GETTING_REQ
     */

    /**
     * Constructs a new DEVICE_ORDERLIST_GETTING_REQ.
     * @exports DEVICE_ORDERLIST_GETTING_REQ
     * @classdesc Represents a DEVICE_ORDERLIST_GETTING_REQ.
     * @implements IDEVICE_ORDERLIST_GETTING_REQ
     * @constructor
     * @param {IDEVICE_ORDERLIST_GETTING_REQ=} [properties] Properties to set
     */
    function DEVICE_ORDERLIST_GETTING_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_ORDERLIST_GETTING_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_ORDERLIST_GETTING_REQ
     * @static
     * @param {IDEVICE_ORDERLIST_GETTING_REQ=} [properties] Properties to set
     * @returns {DEVICE_ORDERLIST_GETTING_REQ} DEVICE_ORDERLIST_GETTING_REQ instance
     */
    DEVICE_ORDERLIST_GETTING_REQ.create = function create(properties) {
        return new DEVICE_ORDERLIST_GETTING_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_GETTING_REQ message. Does not implicitly {@link DEVICE_ORDERLIST_GETTING_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_ORDERLIST_GETTING_REQ
     * @static
     * @param {IDEVICE_ORDERLIST_GETTING_REQ} message DEVICE_ORDERLIST_GETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_GETTING_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_GETTING_REQ message, length delimited. Does not implicitly {@link DEVICE_ORDERLIST_GETTING_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_ORDERLIST_GETTING_REQ
     * @static
     * @param {IDEVICE_ORDERLIST_GETTING_REQ} message DEVICE_ORDERLIST_GETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_GETTING_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_ORDERLIST_GETTING_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_ORDERLIST_GETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_ORDERLIST_GETTING_REQ} DEVICE_ORDERLIST_GETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_GETTING_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ORDERLIST_GETTING_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_ORDERLIST_GETTING_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_ORDERLIST_GETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_ORDERLIST_GETTING_REQ} DEVICE_ORDERLIST_GETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_GETTING_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_ORDERLIST_GETTING_REQ message.
     * @function verify
     * @memberof DEVICE_ORDERLIST_GETTING_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_ORDERLIST_GETTING_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_ORDERLIST_GETTING_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_ORDERLIST_GETTING_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_ORDERLIST_GETTING_REQ} DEVICE_ORDERLIST_GETTING_REQ
     */
    DEVICE_ORDERLIST_GETTING_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_ORDERLIST_GETTING_REQ)
            return object;
        return new $root.DEVICE_ORDERLIST_GETTING_REQ();
    };

    /**
     * Creates a plain object from a DEVICE_ORDERLIST_GETTING_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_ORDERLIST_GETTING_REQ
     * @static
     * @param {DEVICE_ORDERLIST_GETTING_REQ} message DEVICE_ORDERLIST_GETTING_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_ORDERLIST_GETTING_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_ORDERLIST_GETTING_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_ORDERLIST_GETTING_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_ORDERLIST_GETTING_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_ORDERLIST_GETTING_REQ
     * @function getTypeUrl
     * @memberof DEVICE_ORDERLIST_GETTING_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_ORDERLIST_GETTING_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_ORDERLIST_GETTING_REQ";
    };

    return DEVICE_ORDERLIST_GETTING_REQ;
})();

$root.DEVICE_ORDERLIST_GETTING_RSP = (function() {

    /**
     * Properties of a DEVICE_ORDERLIST_GETTING_RSP.
     * @exports IDEVICE_ORDERLIST_GETTING_RSP
     * @interface IDEVICE_ORDERLIST_GETTING_RSP
     * @property {number} result DEVICE_ORDERLIST_GETTING_RSP result
     * @property {Array.<IDEVICE_ORDERLIST_SETTING_REQ>|null} [orderList] DEVICE_ORDERLIST_GETTING_RSP orderList
     * @property {Array.<DEVICE_ORDERLIST_GETTING_RSP.IMapInfo>|null} [mapInfoList] DEVICE_ORDERLIST_GETTING_RSP mapInfoList
     */

    /**
     * Constructs a new DEVICE_ORDERLIST_GETTING_RSP.
     * @exports DEVICE_ORDERLIST_GETTING_RSP
     * @classdesc Represents a DEVICE_ORDERLIST_GETTING_RSP.
     * @implements IDEVICE_ORDERLIST_GETTING_RSP
     * @constructor
     * @param {IDEVICE_ORDERLIST_GETTING_RSP=} [properties] Properties to set
     */
    function DEVICE_ORDERLIST_GETTING_RSP(properties) {
        this.orderList = [];
        this.mapInfoList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_ORDERLIST_GETTING_RSP result.
     * @member {number} result
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @instance
     */
    DEVICE_ORDERLIST_GETTING_RSP.prototype.result = 0;

    /**
     * DEVICE_ORDERLIST_GETTING_RSP orderList.
     * @member {Array.<IDEVICE_ORDERLIST_SETTING_REQ>} orderList
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @instance
     */
    DEVICE_ORDERLIST_GETTING_RSP.prototype.orderList = $util.emptyArray;

    /**
     * DEVICE_ORDERLIST_GETTING_RSP mapInfoList.
     * @member {Array.<DEVICE_ORDERLIST_GETTING_RSP.IMapInfo>} mapInfoList
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @instance
     */
    DEVICE_ORDERLIST_GETTING_RSP.prototype.mapInfoList = $util.emptyArray;

    /**
     * Creates a new DEVICE_ORDERLIST_GETTING_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @static
     * @param {IDEVICE_ORDERLIST_GETTING_RSP=} [properties] Properties to set
     * @returns {DEVICE_ORDERLIST_GETTING_RSP} DEVICE_ORDERLIST_GETTING_RSP instance
     */
    DEVICE_ORDERLIST_GETTING_RSP.create = function create(properties) {
        return new DEVICE_ORDERLIST_GETTING_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_GETTING_RSP message. Does not implicitly {@link DEVICE_ORDERLIST_GETTING_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @static
     * @param {IDEVICE_ORDERLIST_GETTING_RSP} message DEVICE_ORDERLIST_GETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_GETTING_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        if (message.orderList != null && message.orderList.length)
            for (var i = 0; i < message.orderList.length; ++i)
                $root.DEVICE_ORDERLIST_SETTING_REQ.encode(message.orderList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.mapInfoList != null && message.mapInfoList.length)
            for (var i = 0; i < message.mapInfoList.length; ++i)
                $root.DEVICE_ORDERLIST_GETTING_RSP.MapInfo.encode(message.mapInfoList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_GETTING_RSP message, length delimited. Does not implicitly {@link DEVICE_ORDERLIST_GETTING_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @static
     * @param {IDEVICE_ORDERLIST_GETTING_RSP} message DEVICE_ORDERLIST_GETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_GETTING_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_ORDERLIST_GETTING_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_ORDERLIST_GETTING_RSP} DEVICE_ORDERLIST_GETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_GETTING_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ORDERLIST_GETTING_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    if (!(message.orderList && message.orderList.length))
                        message.orderList = [];
                    message.orderList.push($root.DEVICE_ORDERLIST_SETTING_REQ.decode(reader, reader.uint32()));
                    break;
                }
            case 4: {
                    if (!(message.mapInfoList && message.mapInfoList.length))
                        message.mapInfoList = [];
                    message.mapInfoList.push($root.DEVICE_ORDERLIST_GETTING_RSP.MapInfo.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_ORDERLIST_GETTING_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_ORDERLIST_GETTING_RSP} DEVICE_ORDERLIST_GETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_GETTING_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_ORDERLIST_GETTING_RSP message.
     * @function verify
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_ORDERLIST_GETTING_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        if (message.orderList != null && message.hasOwnProperty("orderList")) {
            if (!Array.isArray(message.orderList))
                return "orderList: array expected";
            for (var i = 0; i < message.orderList.length; ++i) {
                var error = $root.DEVICE_ORDERLIST_SETTING_REQ.verify(message.orderList[i]);
                if (error)
                    return "orderList." + error;
            }
        }
        if (message.mapInfoList != null && message.hasOwnProperty("mapInfoList")) {
            if (!Array.isArray(message.mapInfoList))
                return "mapInfoList: array expected";
            for (var i = 0; i < message.mapInfoList.length; ++i) {
                var error = $root.DEVICE_ORDERLIST_GETTING_RSP.MapInfo.verify(message.mapInfoList[i]);
                if (error)
                    return "mapInfoList." + error;
            }
        }
        return null;
    };

    /**
     * Creates a DEVICE_ORDERLIST_GETTING_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_ORDERLIST_GETTING_RSP} DEVICE_ORDERLIST_GETTING_RSP
     */
    DEVICE_ORDERLIST_GETTING_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_ORDERLIST_GETTING_RSP)
            return object;
        var message = new $root.DEVICE_ORDERLIST_GETTING_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.orderList) {
            if (!Array.isArray(object.orderList))
                throw TypeError(".DEVICE_ORDERLIST_GETTING_RSP.orderList: array expected");
            message.orderList = [];
            for (var i = 0; i < object.orderList.length; ++i) {
                if (typeof object.orderList[i] !== "object")
                    throw TypeError(".DEVICE_ORDERLIST_GETTING_RSP.orderList: object expected");
                message.orderList[i] = $root.DEVICE_ORDERLIST_SETTING_REQ.fromObject(object.orderList[i]);
            }
        }
        if (object.mapInfoList) {
            if (!Array.isArray(object.mapInfoList))
                throw TypeError(".DEVICE_ORDERLIST_GETTING_RSP.mapInfoList: array expected");
            message.mapInfoList = [];
            for (var i = 0; i < object.mapInfoList.length; ++i) {
                if (typeof object.mapInfoList[i] !== "object")
                    throw TypeError(".DEVICE_ORDERLIST_GETTING_RSP.mapInfoList: object expected");
                message.mapInfoList[i] = $root.DEVICE_ORDERLIST_GETTING_RSP.MapInfo.fromObject(object.mapInfoList[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_ORDERLIST_GETTING_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @static
     * @param {DEVICE_ORDERLIST_GETTING_RSP} message DEVICE_ORDERLIST_GETTING_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_ORDERLIST_GETTING_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.orderList = [];
            object.mapInfoList = [];
        }
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.orderList && message.orderList.length) {
            object.orderList = [];
            for (var j = 0; j < message.orderList.length; ++j)
                object.orderList[j] = $root.DEVICE_ORDERLIST_SETTING_REQ.toObject(message.orderList[j], options);
        }
        if (message.mapInfoList && message.mapInfoList.length) {
            object.mapInfoList = [];
            for (var j = 0; j < message.mapInfoList.length; ++j)
                object.mapInfoList[j] = $root.DEVICE_ORDERLIST_GETTING_RSP.MapInfo.toObject(message.mapInfoList[j], options);
        }
        return object;
    };

    /**
     * Converts this DEVICE_ORDERLIST_GETTING_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_ORDERLIST_GETTING_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_ORDERLIST_GETTING_RSP
     * @function getTypeUrl
     * @memberof DEVICE_ORDERLIST_GETTING_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_ORDERLIST_GETTING_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_ORDERLIST_GETTING_RSP";
    };

    DEVICE_ORDERLIST_GETTING_RSP.PlanInfo = (function() {

        /**
         * Properties of a PlanInfo.
         * @memberof DEVICE_ORDERLIST_GETTING_RSP
         * @interface IPlanInfo
         * @property {number} planId PlanInfo planId
         * @property {string} planName PlanInfo planName
         */

        /**
         * Constructs a new PlanInfo.
         * @memberof DEVICE_ORDERLIST_GETTING_RSP
         * @classdesc Represents a PlanInfo.
         * @implements IPlanInfo
         * @constructor
         * @param {DEVICE_ORDERLIST_GETTING_RSP.IPlanInfo=} [properties] Properties to set
         */
        function PlanInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PlanInfo planId.
         * @member {number} planId
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @instance
         */
        PlanInfo.prototype.planId = 0;

        /**
         * PlanInfo planName.
         * @member {string} planName
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @instance
         */
        PlanInfo.prototype.planName = "";

        /**
         * Creates a new PlanInfo instance using the specified properties.
         * @function create
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @static
         * @param {DEVICE_ORDERLIST_GETTING_RSP.IPlanInfo=} [properties] Properties to set
         * @returns {DEVICE_ORDERLIST_GETTING_RSP.PlanInfo} PlanInfo instance
         */
        PlanInfo.create = function create(properties) {
            return new PlanInfo(properties);
        };

        /**
         * Encodes the specified PlanInfo message. Does not implicitly {@link DEVICE_ORDERLIST_GETTING_RSP.PlanInfo.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @static
         * @param {DEVICE_ORDERLIST_GETTING_RSP.IPlanInfo} message PlanInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlanInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.planId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.planName);
            return writer;
        };

        /**
         * Encodes the specified PlanInfo message, length delimited. Does not implicitly {@link DEVICE_ORDERLIST_GETTING_RSP.PlanInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @static
         * @param {DEVICE_ORDERLIST_GETTING_RSP.IPlanInfo} message PlanInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlanInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PlanInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_ORDERLIST_GETTING_RSP.PlanInfo} PlanInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlanInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ORDERLIST_GETTING_RSP.PlanInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.planId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.planName = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("planId"))
                throw $util.ProtocolError("missing required 'planId'", { instance: message });
            if (!message.hasOwnProperty("planName"))
                throw $util.ProtocolError("missing required 'planName'", { instance: message });
            return message;
        };

        /**
         * Decodes a PlanInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_ORDERLIST_GETTING_RSP.PlanInfo} PlanInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlanInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PlanInfo message.
         * @function verify
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlanInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.planId))
                return "planId: integer expected";
            if (!$util.isString(message.planName))
                return "planName: string expected";
            return null;
        };

        /**
         * Creates a PlanInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_ORDERLIST_GETTING_RSP.PlanInfo} PlanInfo
         */
        PlanInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_ORDERLIST_GETTING_RSP.PlanInfo)
                return object;
            var message = new $root.DEVICE_ORDERLIST_GETTING_RSP.PlanInfo();
            if (object.planId != null)
                message.planId = object.planId >>> 0;
            if (object.planName != null)
                message.planName = String(object.planName);
            return message;
        };

        /**
         * Creates a plain object from a PlanInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @static
         * @param {DEVICE_ORDERLIST_GETTING_RSP.PlanInfo} message PlanInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlanInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.planId = 0;
                object.planName = "";
            }
            if (message.planId != null && message.hasOwnProperty("planId"))
                object.planId = message.planId;
            if (message.planName != null && message.hasOwnProperty("planName"))
                object.planName = message.planName;
            return object;
        };

        /**
         * Converts this PlanInfo to JSON.
         * @function toJSON
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlanInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for PlanInfo
         * @function getTypeUrl
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.PlanInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        PlanInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_ORDERLIST_GETTING_RSP.PlanInfo";
        };

        return PlanInfo;
    })();

    DEVICE_ORDERLIST_GETTING_RSP.MapInfo = (function() {

        /**
         * Properties of a MapInfo.
         * @memberof DEVICE_ORDERLIST_GETTING_RSP
         * @interface IMapInfo
         * @property {number} mapId MapInfo mapId
         * @property {string} mapName MapInfo mapName
         * @property {Array.<DEVICE_ORDERLIST_GETTING_RSP.IPlanInfo>|null} [planInfo] MapInfo planInfo
         */

        /**
         * Constructs a new MapInfo.
         * @memberof DEVICE_ORDERLIST_GETTING_RSP
         * @classdesc Represents a MapInfo.
         * @implements IMapInfo
         * @constructor
         * @param {DEVICE_ORDERLIST_GETTING_RSP.IMapInfo=} [properties] Properties to set
         */
        function MapInfo(properties) {
            this.planInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MapInfo mapId.
         * @member {number} mapId
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @instance
         */
        MapInfo.prototype.mapId = 0;

        /**
         * MapInfo mapName.
         * @member {string} mapName
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @instance
         */
        MapInfo.prototype.mapName = "";

        /**
         * MapInfo planInfo.
         * @member {Array.<DEVICE_ORDERLIST_GETTING_RSP.IPlanInfo>} planInfo
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @instance
         */
        MapInfo.prototype.planInfo = $util.emptyArray;

        /**
         * Creates a new MapInfo instance using the specified properties.
         * @function create
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @static
         * @param {DEVICE_ORDERLIST_GETTING_RSP.IMapInfo=} [properties] Properties to set
         * @returns {DEVICE_ORDERLIST_GETTING_RSP.MapInfo} MapInfo instance
         */
        MapInfo.create = function create(properties) {
            return new MapInfo(properties);
        };

        /**
         * Encodes the specified MapInfo message. Does not implicitly {@link DEVICE_ORDERLIST_GETTING_RSP.MapInfo.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @static
         * @param {DEVICE_ORDERLIST_GETTING_RSP.IMapInfo} message MapInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mapId);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.mapName);
            if (message.planInfo != null && message.planInfo.length)
                for (var i = 0; i < message.planInfo.length; ++i)
                    $root.DEVICE_ORDERLIST_GETTING_RSP.PlanInfo.encode(message.planInfo[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MapInfo message, length delimited. Does not implicitly {@link DEVICE_ORDERLIST_GETTING_RSP.MapInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @static
         * @param {DEVICE_ORDERLIST_GETTING_RSP.IMapInfo} message MapInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MapInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MapInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_ORDERLIST_GETTING_RSP.MapInfo} MapInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ORDERLIST_GETTING_RSP.MapInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.mapId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.mapName = reader.string();
                        break;
                    }
                case 3: {
                        if (!(message.planInfo && message.planInfo.length))
                            message.planInfo = [];
                        message.planInfo.push($root.DEVICE_ORDERLIST_GETTING_RSP.PlanInfo.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("mapId"))
                throw $util.ProtocolError("missing required 'mapId'", { instance: message });
            if (!message.hasOwnProperty("mapName"))
                throw $util.ProtocolError("missing required 'mapName'", { instance: message });
            return message;
        };

        /**
         * Decodes a MapInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_ORDERLIST_GETTING_RSP.MapInfo} MapInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MapInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MapInfo message.
         * @function verify
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MapInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.mapId))
                return "mapId: integer expected";
            if (!$util.isString(message.mapName))
                return "mapName: string expected";
            if (message.planInfo != null && message.hasOwnProperty("planInfo")) {
                if (!Array.isArray(message.planInfo))
                    return "planInfo: array expected";
                for (var i = 0; i < message.planInfo.length; ++i) {
                    var error = $root.DEVICE_ORDERLIST_GETTING_RSP.PlanInfo.verify(message.planInfo[i]);
                    if (error)
                        return "planInfo." + error;
                }
            }
            return null;
        };

        /**
         * Creates a MapInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_ORDERLIST_GETTING_RSP.MapInfo} MapInfo
         */
        MapInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_ORDERLIST_GETTING_RSP.MapInfo)
                return object;
            var message = new $root.DEVICE_ORDERLIST_GETTING_RSP.MapInfo();
            if (object.mapId != null)
                message.mapId = object.mapId >>> 0;
            if (object.mapName != null)
                message.mapName = String(object.mapName);
            if (object.planInfo) {
                if (!Array.isArray(object.planInfo))
                    throw TypeError(".DEVICE_ORDERLIST_GETTING_RSP.MapInfo.planInfo: array expected");
                message.planInfo = [];
                for (var i = 0; i < object.planInfo.length; ++i) {
                    if (typeof object.planInfo[i] !== "object")
                        throw TypeError(".DEVICE_ORDERLIST_GETTING_RSP.MapInfo.planInfo: object expected");
                    message.planInfo[i] = $root.DEVICE_ORDERLIST_GETTING_RSP.PlanInfo.fromObject(object.planInfo[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a MapInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @static
         * @param {DEVICE_ORDERLIST_GETTING_RSP.MapInfo} message MapInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MapInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.planInfo = [];
            if (options.defaults) {
                object.mapId = 0;
                object.mapName = "";
            }
            if (message.mapId != null && message.hasOwnProperty("mapId"))
                object.mapId = message.mapId;
            if (message.mapName != null && message.hasOwnProperty("mapName"))
                object.mapName = message.mapName;
            if (message.planInfo && message.planInfo.length) {
                object.planInfo = [];
                for (var j = 0; j < message.planInfo.length; ++j)
                    object.planInfo[j] = $root.DEVICE_ORDERLIST_GETTING_RSP.PlanInfo.toObject(message.planInfo[j], options);
            }
            return object;
        };

        /**
         * Converts this MapInfo to JSON.
         * @function toJSON
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MapInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MapInfo
         * @function getTypeUrl
         * @memberof DEVICE_ORDERLIST_GETTING_RSP.MapInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MapInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_ORDERLIST_GETTING_RSP.MapInfo";
        };

        return MapInfo;
    })();

    return DEVICE_ORDERLIST_GETTING_RSP;
})();

$root.DEVICE_ORDERLIST_SETTING_REQ = (function() {

    /**
     * Properties of a DEVICE_ORDERLIST_SETTING_REQ.
     * @exports IDEVICE_ORDERLIST_SETTING_REQ
     * @interface IDEVICE_ORDERLIST_SETTING_REQ
     * @property {number} orderId DEVICE_ORDERLIST_SETTING_REQ orderId
     * @property {boolean} enable DEVICE_ORDERLIST_SETTING_REQ enable
     * @property {boolean} repeat DEVICE_ORDERLIST_SETTING_REQ repeat
     * @property {number} weekDay DEVICE_ORDERLIST_SETTING_REQ weekDay
     * @property {number} dayTime DEVICE_ORDERLIST_SETTING_REQ dayTime
     * @property {DEVICE_ORDERLIST_SETTING_REQ.ICleanInfo|null} [cleanInfo] DEVICE_ORDERLIST_SETTING_REQ cleanInfo
     */

    /**
     * Constructs a new DEVICE_ORDERLIST_SETTING_REQ.
     * @exports DEVICE_ORDERLIST_SETTING_REQ
     * @classdesc Represents a DEVICE_ORDERLIST_SETTING_REQ.
     * @implements IDEVICE_ORDERLIST_SETTING_REQ
     * @constructor
     * @param {IDEVICE_ORDERLIST_SETTING_REQ=} [properties] Properties to set
     */
    function DEVICE_ORDERLIST_SETTING_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_ORDERLIST_SETTING_REQ orderId.
     * @member {number} orderId
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @instance
     */
    DEVICE_ORDERLIST_SETTING_REQ.prototype.orderId = 0;

    /**
     * DEVICE_ORDERLIST_SETTING_REQ enable.
     * @member {boolean} enable
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @instance
     */
    DEVICE_ORDERLIST_SETTING_REQ.prototype.enable = false;

    /**
     * DEVICE_ORDERLIST_SETTING_REQ repeat.
     * @member {boolean} repeat
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @instance
     */
    DEVICE_ORDERLIST_SETTING_REQ.prototype.repeat = false;

    /**
     * DEVICE_ORDERLIST_SETTING_REQ weekDay.
     * @member {number} weekDay
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @instance
     */
    DEVICE_ORDERLIST_SETTING_REQ.prototype.weekDay = 0;

    /**
     * DEVICE_ORDERLIST_SETTING_REQ dayTime.
     * @member {number} dayTime
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @instance
     */
    DEVICE_ORDERLIST_SETTING_REQ.prototype.dayTime = 0;

    /**
     * DEVICE_ORDERLIST_SETTING_REQ cleanInfo.
     * @member {DEVICE_ORDERLIST_SETTING_REQ.ICleanInfo|null|undefined} cleanInfo
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @instance
     */
    DEVICE_ORDERLIST_SETTING_REQ.prototype.cleanInfo = null;

    /**
     * Creates a new DEVICE_ORDERLIST_SETTING_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @static
     * @param {IDEVICE_ORDERLIST_SETTING_REQ=} [properties] Properties to set
     * @returns {DEVICE_ORDERLIST_SETTING_REQ} DEVICE_ORDERLIST_SETTING_REQ instance
     */
    DEVICE_ORDERLIST_SETTING_REQ.create = function create(properties) {
        return new DEVICE_ORDERLIST_SETTING_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_SETTING_REQ message. Does not implicitly {@link DEVICE_ORDERLIST_SETTING_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @static
     * @param {IDEVICE_ORDERLIST_SETTING_REQ} message DEVICE_ORDERLIST_SETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_SETTING_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.orderId);
        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.enable);
        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.repeat);
        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.weekDay);
        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.dayTime);
        if (message.cleanInfo != null && Object.hasOwnProperty.call(message, "cleanInfo"))
            $root.DEVICE_ORDERLIST_SETTING_REQ.CleanInfo.encode(message.cleanInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_SETTING_REQ message, length delimited. Does not implicitly {@link DEVICE_ORDERLIST_SETTING_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @static
     * @param {IDEVICE_ORDERLIST_SETTING_REQ} message DEVICE_ORDERLIST_SETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_SETTING_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_ORDERLIST_SETTING_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_ORDERLIST_SETTING_REQ} DEVICE_ORDERLIST_SETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_SETTING_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ORDERLIST_SETTING_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.orderId = reader.uint32();
                    break;
                }
            case 2: {
                    message.enable = reader.bool();
                    break;
                }
            case 3: {
                    message.repeat = reader.bool();
                    break;
                }
            case 4: {
                    message.weekDay = reader.uint32();
                    break;
                }
            case 5: {
                    message.dayTime = reader.uint32();
                    break;
                }
            case 6: {
                    message.cleanInfo = $root.DEVICE_ORDERLIST_SETTING_REQ.CleanInfo.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("orderId"))
            throw $util.ProtocolError("missing required 'orderId'", { instance: message });
        if (!message.hasOwnProperty("enable"))
            throw $util.ProtocolError("missing required 'enable'", { instance: message });
        if (!message.hasOwnProperty("repeat"))
            throw $util.ProtocolError("missing required 'repeat'", { instance: message });
        if (!message.hasOwnProperty("weekDay"))
            throw $util.ProtocolError("missing required 'weekDay'", { instance: message });
        if (!message.hasOwnProperty("dayTime"))
            throw $util.ProtocolError("missing required 'dayTime'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_ORDERLIST_SETTING_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_ORDERLIST_SETTING_REQ} DEVICE_ORDERLIST_SETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_SETTING_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_ORDERLIST_SETTING_REQ message.
     * @function verify
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_ORDERLIST_SETTING_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.orderId))
            return "orderId: integer expected";
        if (typeof message.enable !== "boolean")
            return "enable: boolean expected";
        if (typeof message.repeat !== "boolean")
            return "repeat: boolean expected";
        if (!$util.isInteger(message.weekDay))
            return "weekDay: integer expected";
        if (!$util.isInteger(message.dayTime))
            return "dayTime: integer expected";
        if (message.cleanInfo != null && message.hasOwnProperty("cleanInfo")) {
            var error = $root.DEVICE_ORDERLIST_SETTING_REQ.CleanInfo.verify(message.cleanInfo);
            if (error)
                return "cleanInfo." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_ORDERLIST_SETTING_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_ORDERLIST_SETTING_REQ} DEVICE_ORDERLIST_SETTING_REQ
     */
    DEVICE_ORDERLIST_SETTING_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_ORDERLIST_SETTING_REQ)
            return object;
        var message = new $root.DEVICE_ORDERLIST_SETTING_REQ();
        if (object.orderId != null)
            message.orderId = object.orderId >>> 0;
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        if (object.repeat != null)
            message.repeat = Boolean(object.repeat);
        if (object.weekDay != null)
            message.weekDay = object.weekDay >>> 0;
        if (object.dayTime != null)
            message.dayTime = object.dayTime >>> 0;
        if (object.cleanInfo != null) {
            if (typeof object.cleanInfo !== "object")
                throw TypeError(".DEVICE_ORDERLIST_SETTING_REQ.cleanInfo: object expected");
            message.cleanInfo = $root.DEVICE_ORDERLIST_SETTING_REQ.CleanInfo.fromObject(object.cleanInfo);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_ORDERLIST_SETTING_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @static
     * @param {DEVICE_ORDERLIST_SETTING_REQ} message DEVICE_ORDERLIST_SETTING_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_ORDERLIST_SETTING_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.orderId = 0;
            object.enable = false;
            object.repeat = false;
            object.weekDay = 0;
            object.dayTime = 0;
            object.cleanInfo = null;
        }
        if (message.orderId != null && message.hasOwnProperty("orderId"))
            object.orderId = message.orderId;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        if (message.repeat != null && message.hasOwnProperty("repeat"))
            object.repeat = message.repeat;
        if (message.weekDay != null && message.hasOwnProperty("weekDay"))
            object.weekDay = message.weekDay;
        if (message.dayTime != null && message.hasOwnProperty("dayTime"))
            object.dayTime = message.dayTime;
        if (message.cleanInfo != null && message.hasOwnProperty("cleanInfo"))
            object.cleanInfo = $root.DEVICE_ORDERLIST_SETTING_REQ.CleanInfo.toObject(message.cleanInfo, options);
        return object;
    };

    /**
     * Converts this DEVICE_ORDERLIST_SETTING_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_ORDERLIST_SETTING_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_ORDERLIST_SETTING_REQ
     * @function getTypeUrl
     * @memberof DEVICE_ORDERLIST_SETTING_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_ORDERLIST_SETTING_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_ORDERLIST_SETTING_REQ";
    };

    DEVICE_ORDERLIST_SETTING_REQ.CleanInfo = (function() {

        /**
         * Properties of a CleanInfo.
         * @memberof DEVICE_ORDERLIST_SETTING_REQ
         * @interface ICleanInfo
         * @property {number} mapHeadId CleanInfo mapHeadId
         * @property {number} planId CleanInfo planId
         * @property {number} cleanMode CleanInfo cleanMode
         * @property {number} windPower CleanInfo windPower
         * @property {number} waterLevel CleanInfo waterLevel
         * @property {boolean} twiceClean CleanInfo twiceClean
         */

        /**
         * Constructs a new CleanInfo.
         * @memberof DEVICE_ORDERLIST_SETTING_REQ
         * @classdesc Represents a CleanInfo.
         * @implements ICleanInfo
         * @constructor
         * @param {DEVICE_ORDERLIST_SETTING_REQ.ICleanInfo=} [properties] Properties to set
         */
        function CleanInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CleanInfo mapHeadId.
         * @member {number} mapHeadId
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @instance
         */
        CleanInfo.prototype.mapHeadId = 0;

        /**
         * CleanInfo planId.
         * @member {number} planId
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @instance
         */
        CleanInfo.prototype.planId = 0;

        /**
         * CleanInfo cleanMode.
         * @member {number} cleanMode
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @instance
         */
        CleanInfo.prototype.cleanMode = 0;

        /**
         * CleanInfo windPower.
         * @member {number} windPower
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @instance
         */
        CleanInfo.prototype.windPower = 0;

        /**
         * CleanInfo waterLevel.
         * @member {number} waterLevel
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @instance
         */
        CleanInfo.prototype.waterLevel = 0;

        /**
         * CleanInfo twiceClean.
         * @member {boolean} twiceClean
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @instance
         */
        CleanInfo.prototype.twiceClean = false;

        /**
         * Creates a new CleanInfo instance using the specified properties.
         * @function create
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @static
         * @param {DEVICE_ORDERLIST_SETTING_REQ.ICleanInfo=} [properties] Properties to set
         * @returns {DEVICE_ORDERLIST_SETTING_REQ.CleanInfo} CleanInfo instance
         */
        CleanInfo.create = function create(properties) {
            return new CleanInfo(properties);
        };

        /**
         * Encodes the specified CleanInfo message. Does not implicitly {@link DEVICE_ORDERLIST_SETTING_REQ.CleanInfo.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @static
         * @param {DEVICE_ORDERLIST_SETTING_REQ.ICleanInfo} message CleanInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mapHeadId);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.planId);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.cleanMode);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.windPower);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.waterLevel);
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.twiceClean);
            return writer;
        };

        /**
         * Encodes the specified CleanInfo message, length delimited. Does not implicitly {@link DEVICE_ORDERLIST_SETTING_REQ.CleanInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @static
         * @param {DEVICE_ORDERLIST_SETTING_REQ.ICleanInfo} message CleanInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CleanInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CleanInfo message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_ORDERLIST_SETTING_REQ.CleanInfo} CleanInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ORDERLIST_SETTING_REQ.CleanInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.mapHeadId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.planId = reader.uint32();
                        break;
                    }
                case 3: {
                        message.cleanMode = reader.uint32();
                        break;
                    }
                case 4: {
                        message.windPower = reader.uint32();
                        break;
                    }
                case 5: {
                        message.waterLevel = reader.uint32();
                        break;
                    }
                case 6: {
                        message.twiceClean = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("mapHeadId"))
                throw $util.ProtocolError("missing required 'mapHeadId'", { instance: message });
            if (!message.hasOwnProperty("planId"))
                throw $util.ProtocolError("missing required 'planId'", { instance: message });
            if (!message.hasOwnProperty("cleanMode"))
                throw $util.ProtocolError("missing required 'cleanMode'", { instance: message });
            if (!message.hasOwnProperty("windPower"))
                throw $util.ProtocolError("missing required 'windPower'", { instance: message });
            if (!message.hasOwnProperty("waterLevel"))
                throw $util.ProtocolError("missing required 'waterLevel'", { instance: message });
            if (!message.hasOwnProperty("twiceClean"))
                throw $util.ProtocolError("missing required 'twiceClean'", { instance: message });
            return message;
        };

        /**
         * Decodes a CleanInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_ORDERLIST_SETTING_REQ.CleanInfo} CleanInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CleanInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CleanInfo message.
         * @function verify
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CleanInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.mapHeadId))
                return "mapHeadId: integer expected";
            if (!$util.isInteger(message.planId))
                return "planId: integer expected";
            if (!$util.isInteger(message.cleanMode))
                return "cleanMode: integer expected";
            if (!$util.isInteger(message.windPower))
                return "windPower: integer expected";
            if (!$util.isInteger(message.waterLevel))
                return "waterLevel: integer expected";
            if (typeof message.twiceClean !== "boolean")
                return "twiceClean: boolean expected";
            return null;
        };

        /**
         * Creates a CleanInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_ORDERLIST_SETTING_REQ.CleanInfo} CleanInfo
         */
        CleanInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_ORDERLIST_SETTING_REQ.CleanInfo)
                return object;
            var message = new $root.DEVICE_ORDERLIST_SETTING_REQ.CleanInfo();
            if (object.mapHeadId != null)
                message.mapHeadId = object.mapHeadId >>> 0;
            if (object.planId != null)
                message.planId = object.planId >>> 0;
            if (object.cleanMode != null)
                message.cleanMode = object.cleanMode >>> 0;
            if (object.windPower != null)
                message.windPower = object.windPower >>> 0;
            if (object.waterLevel != null)
                message.waterLevel = object.waterLevel >>> 0;
            if (object.twiceClean != null)
                message.twiceClean = Boolean(object.twiceClean);
            return message;
        };

        /**
         * Creates a plain object from a CleanInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @static
         * @param {DEVICE_ORDERLIST_SETTING_REQ.CleanInfo} message CleanInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CleanInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.mapHeadId = 0;
                object.planId = 0;
                object.cleanMode = 0;
                object.windPower = 0;
                object.waterLevel = 0;
                object.twiceClean = false;
            }
            if (message.mapHeadId != null && message.hasOwnProperty("mapHeadId"))
                object.mapHeadId = message.mapHeadId;
            if (message.planId != null && message.hasOwnProperty("planId"))
                object.planId = message.planId;
            if (message.cleanMode != null && message.hasOwnProperty("cleanMode"))
                object.cleanMode = message.cleanMode;
            if (message.windPower != null && message.hasOwnProperty("windPower"))
                object.windPower = message.windPower;
            if (message.waterLevel != null && message.hasOwnProperty("waterLevel"))
                object.waterLevel = message.waterLevel;
            if (message.twiceClean != null && message.hasOwnProperty("twiceClean"))
                object.twiceClean = message.twiceClean;
            return object;
        };

        /**
         * Converts this CleanInfo to JSON.
         * @function toJSON
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CleanInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for CleanInfo
         * @function getTypeUrl
         * @memberof DEVICE_ORDERLIST_SETTING_REQ.CleanInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CleanInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_ORDERLIST_SETTING_REQ.CleanInfo";
        };

        return CleanInfo;
    })();

    return DEVICE_ORDERLIST_SETTING_REQ;
})();

$root.DEVICE_ORDERLIST_SETTING_RSP = (function() {

    /**
     * Properties of a DEVICE_ORDERLIST_SETTING_RSP.
     * @exports IDEVICE_ORDERLIST_SETTING_RSP
     * @interface IDEVICE_ORDERLIST_SETTING_RSP
     * @property {number} orderId DEVICE_ORDERLIST_SETTING_RSP orderId
     * @property {number} result DEVICE_ORDERLIST_SETTING_RSP result
     */

    /**
     * Constructs a new DEVICE_ORDERLIST_SETTING_RSP.
     * @exports DEVICE_ORDERLIST_SETTING_RSP
     * @classdesc Represents a DEVICE_ORDERLIST_SETTING_RSP.
     * @implements IDEVICE_ORDERLIST_SETTING_RSP
     * @constructor
     * @param {IDEVICE_ORDERLIST_SETTING_RSP=} [properties] Properties to set
     */
    function DEVICE_ORDERLIST_SETTING_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_ORDERLIST_SETTING_RSP orderId.
     * @member {number} orderId
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @instance
     */
    DEVICE_ORDERLIST_SETTING_RSP.prototype.orderId = 0;

    /**
     * DEVICE_ORDERLIST_SETTING_RSP result.
     * @member {number} result
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @instance
     */
    DEVICE_ORDERLIST_SETTING_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_ORDERLIST_SETTING_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @static
     * @param {IDEVICE_ORDERLIST_SETTING_RSP=} [properties] Properties to set
     * @returns {DEVICE_ORDERLIST_SETTING_RSP} DEVICE_ORDERLIST_SETTING_RSP instance
     */
    DEVICE_ORDERLIST_SETTING_RSP.create = function create(properties) {
        return new DEVICE_ORDERLIST_SETTING_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_SETTING_RSP message. Does not implicitly {@link DEVICE_ORDERLIST_SETTING_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @static
     * @param {IDEVICE_ORDERLIST_SETTING_RSP} message DEVICE_ORDERLIST_SETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_SETTING_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.orderId);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_SETTING_RSP message, length delimited. Does not implicitly {@link DEVICE_ORDERLIST_SETTING_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @static
     * @param {IDEVICE_ORDERLIST_SETTING_RSP} message DEVICE_ORDERLIST_SETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_SETTING_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_ORDERLIST_SETTING_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_ORDERLIST_SETTING_RSP} DEVICE_ORDERLIST_SETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_SETTING_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ORDERLIST_SETTING_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.orderId = reader.uint32();
                    break;
                }
            case 2: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("orderId"))
            throw $util.ProtocolError("missing required 'orderId'", { instance: message });
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_ORDERLIST_SETTING_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_ORDERLIST_SETTING_RSP} DEVICE_ORDERLIST_SETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_SETTING_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_ORDERLIST_SETTING_RSP message.
     * @function verify
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_ORDERLIST_SETTING_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.orderId))
            return "orderId: integer expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_ORDERLIST_SETTING_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_ORDERLIST_SETTING_RSP} DEVICE_ORDERLIST_SETTING_RSP
     */
    DEVICE_ORDERLIST_SETTING_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_ORDERLIST_SETTING_RSP)
            return object;
        var message = new $root.DEVICE_ORDERLIST_SETTING_RSP();
        if (object.orderId != null)
            message.orderId = object.orderId >>> 0;
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_ORDERLIST_SETTING_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @static
     * @param {DEVICE_ORDERLIST_SETTING_RSP} message DEVICE_ORDERLIST_SETTING_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_ORDERLIST_SETTING_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.orderId = 0;
            object.result = 0;
        }
        if (message.orderId != null && message.hasOwnProperty("orderId"))
            object.orderId = message.orderId;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_ORDERLIST_SETTING_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_ORDERLIST_SETTING_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_ORDERLIST_SETTING_RSP
     * @function getTypeUrl
     * @memberof DEVICE_ORDERLIST_SETTING_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_ORDERLIST_SETTING_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_ORDERLIST_SETTING_RSP";
    };

    return DEVICE_ORDERLIST_SETTING_RSP;
})();

$root.DEVICE_ORDERLIST_DELETE_REQ = (function() {

    /**
     * Properties of a DEVICE_ORDERLIST_DELETE_REQ.
     * @exports IDEVICE_ORDERLIST_DELETE_REQ
     * @interface IDEVICE_ORDERLIST_DELETE_REQ
     * @property {number} orderId DEVICE_ORDERLIST_DELETE_REQ orderId
     * @property {number} mode DEVICE_ORDERLIST_DELETE_REQ mode
     */

    /**
     * Constructs a new DEVICE_ORDERLIST_DELETE_REQ.
     * @exports DEVICE_ORDERLIST_DELETE_REQ
     * @classdesc Represents a DEVICE_ORDERLIST_DELETE_REQ.
     * @implements IDEVICE_ORDERLIST_DELETE_REQ
     * @constructor
     * @param {IDEVICE_ORDERLIST_DELETE_REQ=} [properties] Properties to set
     */
    function DEVICE_ORDERLIST_DELETE_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_ORDERLIST_DELETE_REQ orderId.
     * @member {number} orderId
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @instance
     */
    DEVICE_ORDERLIST_DELETE_REQ.prototype.orderId = 0;

    /**
     * DEVICE_ORDERLIST_DELETE_REQ mode.
     * @member {number} mode
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @instance
     */
    DEVICE_ORDERLIST_DELETE_REQ.prototype.mode = 0;

    /**
     * Creates a new DEVICE_ORDERLIST_DELETE_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @static
     * @param {IDEVICE_ORDERLIST_DELETE_REQ=} [properties] Properties to set
     * @returns {DEVICE_ORDERLIST_DELETE_REQ} DEVICE_ORDERLIST_DELETE_REQ instance
     */
    DEVICE_ORDERLIST_DELETE_REQ.create = function create(properties) {
        return new DEVICE_ORDERLIST_DELETE_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_DELETE_REQ message. Does not implicitly {@link DEVICE_ORDERLIST_DELETE_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @static
     * @param {IDEVICE_ORDERLIST_DELETE_REQ} message DEVICE_ORDERLIST_DELETE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_DELETE_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.orderId);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.mode);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_DELETE_REQ message, length delimited. Does not implicitly {@link DEVICE_ORDERLIST_DELETE_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @static
     * @param {IDEVICE_ORDERLIST_DELETE_REQ} message DEVICE_ORDERLIST_DELETE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_DELETE_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_ORDERLIST_DELETE_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_ORDERLIST_DELETE_REQ} DEVICE_ORDERLIST_DELETE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_DELETE_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ORDERLIST_DELETE_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.orderId = reader.uint32();
                    break;
                }
            case 2: {
                    message.mode = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("orderId"))
            throw $util.ProtocolError("missing required 'orderId'", { instance: message });
        if (!message.hasOwnProperty("mode"))
            throw $util.ProtocolError("missing required 'mode'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_ORDERLIST_DELETE_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_ORDERLIST_DELETE_REQ} DEVICE_ORDERLIST_DELETE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_DELETE_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_ORDERLIST_DELETE_REQ message.
     * @function verify
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_ORDERLIST_DELETE_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.orderId))
            return "orderId: integer expected";
        if (!$util.isInteger(message.mode))
            return "mode: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_ORDERLIST_DELETE_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_ORDERLIST_DELETE_REQ} DEVICE_ORDERLIST_DELETE_REQ
     */
    DEVICE_ORDERLIST_DELETE_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_ORDERLIST_DELETE_REQ)
            return object;
        var message = new $root.DEVICE_ORDERLIST_DELETE_REQ();
        if (object.orderId != null)
            message.orderId = object.orderId >>> 0;
        if (object.mode != null)
            message.mode = object.mode >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_ORDERLIST_DELETE_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @static
     * @param {DEVICE_ORDERLIST_DELETE_REQ} message DEVICE_ORDERLIST_DELETE_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_ORDERLIST_DELETE_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.orderId = 0;
            object.mode = 0;
        }
        if (message.orderId != null && message.hasOwnProperty("orderId"))
            object.orderId = message.orderId;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = message.mode;
        return object;
    };

    /**
     * Converts this DEVICE_ORDERLIST_DELETE_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_ORDERLIST_DELETE_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_ORDERLIST_DELETE_REQ
     * @function getTypeUrl
     * @memberof DEVICE_ORDERLIST_DELETE_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_ORDERLIST_DELETE_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_ORDERLIST_DELETE_REQ";
    };

    return DEVICE_ORDERLIST_DELETE_REQ;
})();

$root.DEVICE_ORDERLIST_DELETE_RSP = (function() {

    /**
     * Properties of a DEVICE_ORDERLIST_DELETE_RSP.
     * @exports IDEVICE_ORDERLIST_DELETE_RSP
     * @interface IDEVICE_ORDERLIST_DELETE_RSP
     * @property {number} orderId DEVICE_ORDERLIST_DELETE_RSP orderId
     * @property {number} result DEVICE_ORDERLIST_DELETE_RSP result
     */

    /**
     * Constructs a new DEVICE_ORDERLIST_DELETE_RSP.
     * @exports DEVICE_ORDERLIST_DELETE_RSP
     * @classdesc Represents a DEVICE_ORDERLIST_DELETE_RSP.
     * @implements IDEVICE_ORDERLIST_DELETE_RSP
     * @constructor
     * @param {IDEVICE_ORDERLIST_DELETE_RSP=} [properties] Properties to set
     */
    function DEVICE_ORDERLIST_DELETE_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_ORDERLIST_DELETE_RSP orderId.
     * @member {number} orderId
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @instance
     */
    DEVICE_ORDERLIST_DELETE_RSP.prototype.orderId = 0;

    /**
     * DEVICE_ORDERLIST_DELETE_RSP result.
     * @member {number} result
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @instance
     */
    DEVICE_ORDERLIST_DELETE_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_ORDERLIST_DELETE_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @static
     * @param {IDEVICE_ORDERLIST_DELETE_RSP=} [properties] Properties to set
     * @returns {DEVICE_ORDERLIST_DELETE_RSP} DEVICE_ORDERLIST_DELETE_RSP instance
     */
    DEVICE_ORDERLIST_DELETE_RSP.create = function create(properties) {
        return new DEVICE_ORDERLIST_DELETE_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_DELETE_RSP message. Does not implicitly {@link DEVICE_ORDERLIST_DELETE_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @static
     * @param {IDEVICE_ORDERLIST_DELETE_RSP} message DEVICE_ORDERLIST_DELETE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_DELETE_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.orderId);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_ORDERLIST_DELETE_RSP message, length delimited. Does not implicitly {@link DEVICE_ORDERLIST_DELETE_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @static
     * @param {IDEVICE_ORDERLIST_DELETE_RSP} message DEVICE_ORDERLIST_DELETE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ORDERLIST_DELETE_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_ORDERLIST_DELETE_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_ORDERLIST_DELETE_RSP} DEVICE_ORDERLIST_DELETE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_DELETE_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ORDERLIST_DELETE_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.orderId = reader.uint32();
                    break;
                }
            case 2: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("orderId"))
            throw $util.ProtocolError("missing required 'orderId'", { instance: message });
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_ORDERLIST_DELETE_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_ORDERLIST_DELETE_RSP} DEVICE_ORDERLIST_DELETE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ORDERLIST_DELETE_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_ORDERLIST_DELETE_RSP message.
     * @function verify
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_ORDERLIST_DELETE_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.orderId))
            return "orderId: integer expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_ORDERLIST_DELETE_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_ORDERLIST_DELETE_RSP} DEVICE_ORDERLIST_DELETE_RSP
     */
    DEVICE_ORDERLIST_DELETE_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_ORDERLIST_DELETE_RSP)
            return object;
        var message = new $root.DEVICE_ORDERLIST_DELETE_RSP();
        if (object.orderId != null)
            message.orderId = object.orderId >>> 0;
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_ORDERLIST_DELETE_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @static
     * @param {DEVICE_ORDERLIST_DELETE_RSP} message DEVICE_ORDERLIST_DELETE_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_ORDERLIST_DELETE_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.orderId = 0;
            object.result = 0;
        }
        if (message.orderId != null && message.hasOwnProperty("orderId"))
            object.orderId = message.orderId;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_ORDERLIST_DELETE_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_ORDERLIST_DELETE_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_ORDERLIST_DELETE_RSP
     * @function getTypeUrl
     * @memberof DEVICE_ORDERLIST_DELETE_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_ORDERLIST_DELETE_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_ORDERLIST_DELETE_RSP";
    };

    return DEVICE_ORDERLIST_DELETE_RSP;
})();

$root.DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.
     * @exports IDEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @interface IDEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     */

    /**
     * Constructs a new DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.
     * @exports DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @classdesc Represents a DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.
     * @implements IDEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @constructor
     * @param {IDEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {IDEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ} DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ instance
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.create = function create(properties) {
        return new DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ message. Does not implicitly {@link DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {IDEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ} message DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {IDEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ} message DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ} DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ} DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ} DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ)
            return object;
        return new $root.DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ();
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ} message DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ";
    };

    return DEVICE_MAPID_GET_CONSUMABLES_PARAM_REQ;
})();

$root.DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.
     * @exports IDEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @interface IDEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @property {number} mainBrushTime DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP mainBrushTime
     * @property {number} sideBrushTime DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP sideBrushTime
     * @property {number} filterTime DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP filterTime
     * @property {number} dishclothTime DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP dishclothTime
     */

    /**
     * Constructs a new DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.
     * @exports DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @classdesc Represents a DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.
     * @implements IDEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @constructor
     * @param {IDEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP mainBrushTime.
     * @member {number} mainBrushTime
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @instance
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.prototype.mainBrushTime = 0;

    /**
     * DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP sideBrushTime.
     * @member {number} sideBrushTime
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @instance
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.prototype.sideBrushTime = 0;

    /**
     * DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP filterTime.
     * @member {number} filterTime
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @instance
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.prototype.filterTime = 0;

    /**
     * DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP dishclothTime.
     * @member {number} dishclothTime
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @instance
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.prototype.dishclothTime = 0;

    /**
     * Creates a new DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {IDEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP} DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP instance
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.create = function create(properties) {
        return new DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP message. Does not implicitly {@link DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {IDEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP} message DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mainBrushTime);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sideBrushTime);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.filterTime);
        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.dishclothTime);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {IDEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP} message DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP} DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mainBrushTime = reader.uint32();
                    break;
                }
            case 2: {
                    message.sideBrushTime = reader.uint32();
                    break;
                }
            case 3: {
                    message.filterTime = reader.uint32();
                    break;
                }
            case 4: {
                    message.dishclothTime = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mainBrushTime"))
            throw $util.ProtocolError("missing required 'mainBrushTime'", { instance: message });
        if (!message.hasOwnProperty("sideBrushTime"))
            throw $util.ProtocolError("missing required 'sideBrushTime'", { instance: message });
        if (!message.hasOwnProperty("filterTime"))
            throw $util.ProtocolError("missing required 'filterTime'", { instance: message });
        if (!message.hasOwnProperty("dishclothTime"))
            throw $util.ProtocolError("missing required 'dishclothTime'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP} DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mainBrushTime))
            return "mainBrushTime: integer expected";
        if (!$util.isInteger(message.sideBrushTime))
            return "sideBrushTime: integer expected";
        if (!$util.isInteger(message.filterTime))
            return "filterTime: integer expected";
        if (!$util.isInteger(message.dishclothTime))
            return "dishclothTime: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP} DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP)
            return object;
        var message = new $root.DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP();
        if (object.mainBrushTime != null)
            message.mainBrushTime = object.mainBrushTime >>> 0;
        if (object.sideBrushTime != null)
            message.sideBrushTime = object.sideBrushTime >>> 0;
        if (object.filterTime != null)
            message.filterTime = object.filterTime >>> 0;
        if (object.dishclothTime != null)
            message.dishclothTime = object.dishclothTime >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP} message DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.mainBrushTime = 0;
            object.sideBrushTime = 0;
            object.filterTime = 0;
            object.dishclothTime = 0;
        }
        if (message.mainBrushTime != null && message.hasOwnProperty("mainBrushTime"))
            object.mainBrushTime = message.mainBrushTime;
        if (message.sideBrushTime != null && message.hasOwnProperty("sideBrushTime"))
            object.sideBrushTime = message.sideBrushTime;
        if (message.filterTime != null && message.hasOwnProperty("filterTime"))
            object.filterTime = message.filterTime;
        if (message.dishclothTime != null && message.hasOwnProperty("dishclothTime"))
            object.dishclothTime = message.dishclothTime;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP";
    };

    return DEVICE_MAPID_GET_CONSUMABLES_PARAM_RSP;
})();

$root.DEVICE_EVENT_REPORT_CLEANTASK = (function() {

    /**
     * Properties of a DEVICE_EVENT_REPORT_CLEANTASK.
     * @exports IDEVICE_EVENT_REPORT_CLEANTASK
     * @interface IDEVICE_EVENT_REPORT_CLEANTASK
     * @property {number} cleanId DEVICE_EVENT_REPORT_CLEANTASK cleanId
     * @property {number} startTime DEVICE_EVENT_REPORT_CLEANTASK startTime
     * @property {number} endTime DEVICE_EVENT_REPORT_CLEANTASK endTime
     * @property {number} unk4 DEVICE_EVENT_REPORT_CLEANTASK unk4
     * @property {number} unk5 DEVICE_EVENT_REPORT_CLEANTASK unk5
     * @property {number} unk6 DEVICE_EVENT_REPORT_CLEANTASK unk6
     * @property {number} unk7 DEVICE_EVENT_REPORT_CLEANTASK unk7
     * @property {DEVICE_EVENT_REPORT_CLEANTASK.IUnk1} unk8 DEVICE_EVENT_REPORT_CLEANTASK unk8
     * @property {number|null} [mapHeadId] DEVICE_EVENT_REPORT_CLEANTASK mapHeadId
     * @property {string|null} [mapName] DEVICE_EVENT_REPORT_CLEANTASK mapName
     * @property {string|null} [planName] DEVICE_EVENT_REPORT_CLEANTASK planName
     */

    /**
     * Constructs a new DEVICE_EVENT_REPORT_CLEANTASK.
     * @exports DEVICE_EVENT_REPORT_CLEANTASK
     * @classdesc Represents a DEVICE_EVENT_REPORT_CLEANTASK.
     * @implements IDEVICE_EVENT_REPORT_CLEANTASK
     * @constructor
     * @param {IDEVICE_EVENT_REPORT_CLEANTASK=} [properties] Properties to set
     */
    function DEVICE_EVENT_REPORT_CLEANTASK(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK cleanId.
     * @member {number} cleanId
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.cleanId = 0;

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK startTime.
     * @member {number} startTime
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.startTime = 0;

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK endTime.
     * @member {number} endTime
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.endTime = 0;

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK unk4.
     * @member {number} unk4
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.unk4 = 0;

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK unk5.
     * @member {number} unk5
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.unk5 = 0;

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK unk6.
     * @member {number} unk6
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.unk6 = 0;

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK unk7.
     * @member {number} unk7
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.unk7 = 0;

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK unk8.
     * @member {DEVICE_EVENT_REPORT_CLEANTASK.IUnk1} unk8
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.unk8 = null;

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK mapHeadId.
     * @member {number} mapHeadId
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.mapHeadId = 0;

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK mapName.
     * @member {string} mapName
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.mapName = "";

    /**
     * DEVICE_EVENT_REPORT_CLEANTASK planName.
     * @member {string} planName
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.planName = "";

    /**
     * Creates a new DEVICE_EVENT_REPORT_CLEANTASK instance using the specified properties.
     * @function create
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @static
     * @param {IDEVICE_EVENT_REPORT_CLEANTASK=} [properties] Properties to set
     * @returns {DEVICE_EVENT_REPORT_CLEANTASK} DEVICE_EVENT_REPORT_CLEANTASK instance
     */
    DEVICE_EVENT_REPORT_CLEANTASK.create = function create(properties) {
        return new DEVICE_EVENT_REPORT_CLEANTASK(properties);
    };

    /**
     * Encodes the specified DEVICE_EVENT_REPORT_CLEANTASK message. Does not implicitly {@link DEVICE_EVENT_REPORT_CLEANTASK.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @static
     * @param {IDEVICE_EVENT_REPORT_CLEANTASK} message DEVICE_EVENT_REPORT_CLEANTASK message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_EVENT_REPORT_CLEANTASK.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.cleanId);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.startTime);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.endTime);
        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.unk4);
        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.unk5);
        writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.unk6);
        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.unk7);
        $root.DEVICE_EVENT_REPORT_CLEANTASK.Unk1.encode(message.unk8, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.mapHeadId != null && Object.hasOwnProperty.call(message, "mapHeadId"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.mapHeadId);
        if (message.mapName != null && Object.hasOwnProperty.call(message, "mapName"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.mapName);
        if (message.planName != null && Object.hasOwnProperty.call(message, "planName"))
            writer.uint32(/* id 11, wireType 2 =*/90).string(message.planName);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_EVENT_REPORT_CLEANTASK message, length delimited. Does not implicitly {@link DEVICE_EVENT_REPORT_CLEANTASK.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @static
     * @param {IDEVICE_EVENT_REPORT_CLEANTASK} message DEVICE_EVENT_REPORT_CLEANTASK message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_EVENT_REPORT_CLEANTASK.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_EVENT_REPORT_CLEANTASK message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_EVENT_REPORT_CLEANTASK} DEVICE_EVENT_REPORT_CLEANTASK
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_EVENT_REPORT_CLEANTASK.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_EVENT_REPORT_CLEANTASK();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.cleanId = reader.uint32();
                    break;
                }
            case 2: {
                    message.startTime = reader.uint32();
                    break;
                }
            case 3: {
                    message.endTime = reader.uint32();
                    break;
                }
            case 4: {
                    message.unk4 = reader.uint32();
                    break;
                }
            case 5: {
                    message.unk5 = reader.uint32();
                    break;
                }
            case 6: {
                    message.unk6 = reader.uint32();
                    break;
                }
            case 7: {
                    message.unk7 = reader.uint32();
                    break;
                }
            case 8: {
                    message.unk8 = $root.DEVICE_EVENT_REPORT_CLEANTASK.Unk1.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.mapHeadId = reader.uint32();
                    break;
                }
            case 10: {
                    message.mapName = reader.string();
                    break;
                }
            case 11: {
                    message.planName = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cleanId"))
            throw $util.ProtocolError("missing required 'cleanId'", { instance: message });
        if (!message.hasOwnProperty("startTime"))
            throw $util.ProtocolError("missing required 'startTime'", { instance: message });
        if (!message.hasOwnProperty("endTime"))
            throw $util.ProtocolError("missing required 'endTime'", { instance: message });
        if (!message.hasOwnProperty("unk4"))
            throw $util.ProtocolError("missing required 'unk4'", { instance: message });
        if (!message.hasOwnProperty("unk5"))
            throw $util.ProtocolError("missing required 'unk5'", { instance: message });
        if (!message.hasOwnProperty("unk6"))
            throw $util.ProtocolError("missing required 'unk6'", { instance: message });
        if (!message.hasOwnProperty("unk7"))
            throw $util.ProtocolError("missing required 'unk7'", { instance: message });
        if (!message.hasOwnProperty("unk8"))
            throw $util.ProtocolError("missing required 'unk8'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_EVENT_REPORT_CLEANTASK message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_EVENT_REPORT_CLEANTASK} DEVICE_EVENT_REPORT_CLEANTASK
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_EVENT_REPORT_CLEANTASK.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_EVENT_REPORT_CLEANTASK message.
     * @function verify
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_EVENT_REPORT_CLEANTASK.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cleanId))
            return "cleanId: integer expected";
        if (!$util.isInteger(message.startTime))
            return "startTime: integer expected";
        if (!$util.isInteger(message.endTime))
            return "endTime: integer expected";
        if (!$util.isInteger(message.unk4))
            return "unk4: integer expected";
        if (!$util.isInteger(message.unk5))
            return "unk5: integer expected";
        if (!$util.isInteger(message.unk6))
            return "unk6: integer expected";
        if (!$util.isInteger(message.unk7))
            return "unk7: integer expected";
        {
            var error = $root.DEVICE_EVENT_REPORT_CLEANTASK.Unk1.verify(message.unk8);
            if (error)
                return "unk8." + error;
        }
        if (message.mapHeadId != null && message.hasOwnProperty("mapHeadId"))
            if (!$util.isInteger(message.mapHeadId))
                return "mapHeadId: integer expected";
        if (message.mapName != null && message.hasOwnProperty("mapName"))
            if (!$util.isString(message.mapName))
                return "mapName: string expected";
        if (message.planName != null && message.hasOwnProperty("planName"))
            if (!$util.isString(message.planName))
                return "planName: string expected";
        return null;
    };

    /**
     * Creates a DEVICE_EVENT_REPORT_CLEANTASK message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_EVENT_REPORT_CLEANTASK} DEVICE_EVENT_REPORT_CLEANTASK
     */
    DEVICE_EVENT_REPORT_CLEANTASK.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_EVENT_REPORT_CLEANTASK)
            return object;
        var message = new $root.DEVICE_EVENT_REPORT_CLEANTASK();
        if (object.cleanId != null)
            message.cleanId = object.cleanId >>> 0;
        if (object.startTime != null)
            message.startTime = object.startTime >>> 0;
        if (object.endTime != null)
            message.endTime = object.endTime >>> 0;
        if (object.unk4 != null)
            message.unk4 = object.unk4 >>> 0;
        if (object.unk5 != null)
            message.unk5 = object.unk5 >>> 0;
        if (object.unk6 != null)
            message.unk6 = object.unk6 >>> 0;
        if (object.unk7 != null)
            message.unk7 = object.unk7 >>> 0;
        if (object.unk8 != null) {
            if (typeof object.unk8 !== "object")
                throw TypeError(".DEVICE_EVENT_REPORT_CLEANTASK.unk8: object expected");
            message.unk8 = $root.DEVICE_EVENT_REPORT_CLEANTASK.Unk1.fromObject(object.unk8);
        }
        if (object.mapHeadId != null)
            message.mapHeadId = object.mapHeadId >>> 0;
        if (object.mapName != null)
            message.mapName = String(object.mapName);
        if (object.planName != null)
            message.planName = String(object.planName);
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_EVENT_REPORT_CLEANTASK message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @static
     * @param {DEVICE_EVENT_REPORT_CLEANTASK} message DEVICE_EVENT_REPORT_CLEANTASK
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_EVENT_REPORT_CLEANTASK.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cleanId = 0;
            object.startTime = 0;
            object.endTime = 0;
            object.unk4 = 0;
            object.unk5 = 0;
            object.unk6 = 0;
            object.unk7 = 0;
            object.unk8 = null;
            object.mapHeadId = 0;
            object.mapName = "";
            object.planName = "";
        }
        if (message.cleanId != null && message.hasOwnProperty("cleanId"))
            object.cleanId = message.cleanId;
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            object.startTime = message.startTime;
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            object.endTime = message.endTime;
        if (message.unk4 != null && message.hasOwnProperty("unk4"))
            object.unk4 = message.unk4;
        if (message.unk5 != null && message.hasOwnProperty("unk5"))
            object.unk5 = message.unk5;
        if (message.unk6 != null && message.hasOwnProperty("unk6"))
            object.unk6 = message.unk6;
        if (message.unk7 != null && message.hasOwnProperty("unk7"))
            object.unk7 = message.unk7;
        if (message.unk8 != null && message.hasOwnProperty("unk8"))
            object.unk8 = $root.DEVICE_EVENT_REPORT_CLEANTASK.Unk1.toObject(message.unk8, options);
        if (message.mapHeadId != null && message.hasOwnProperty("mapHeadId"))
            object.mapHeadId = message.mapHeadId;
        if (message.mapName != null && message.hasOwnProperty("mapName"))
            object.mapName = message.mapName;
        if (message.planName != null && message.hasOwnProperty("planName"))
            object.planName = message.planName;
        return object;
    };

    /**
     * Converts this DEVICE_EVENT_REPORT_CLEANTASK to JSON.
     * @function toJSON
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_EVENT_REPORT_CLEANTASK.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_EVENT_REPORT_CLEANTASK
     * @function getTypeUrl
     * @memberof DEVICE_EVENT_REPORT_CLEANTASK
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_EVENT_REPORT_CLEANTASK.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_EVENT_REPORT_CLEANTASK";
    };

    DEVICE_EVENT_REPORT_CLEANTASK.Unk1 = (function() {

        /**
         * Properties of an Unk1.
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK
         * @interface IUnk1
         * @property {number} unk1Unk1 Unk1 unk1Unk1
         * @property {number} unk1Unk2 Unk1 unk1Unk2
         * @property {number|null} [unk1Unk6] Unk1 unk1Unk6
         */

        /**
         * Constructs a new Unk1.
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK
         * @classdesc Represents an Unk1.
         * @implements IUnk1
         * @constructor
         * @param {DEVICE_EVENT_REPORT_CLEANTASK.IUnk1=} [properties] Properties to set
         */
        function Unk1(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Unk1 unk1Unk1.
         * @member {number} unk1Unk1
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @instance
         */
        Unk1.prototype.unk1Unk1 = 0;

        /**
         * Unk1 unk1Unk2.
         * @member {number} unk1Unk2
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @instance
         */
        Unk1.prototype.unk1Unk2 = 0;

        /**
         * Unk1 unk1Unk6.
         * @member {number} unk1Unk6
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @instance
         */
        Unk1.prototype.unk1Unk6 = 0;

        /**
         * Creates a new Unk1 instance using the specified properties.
         * @function create
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @static
         * @param {DEVICE_EVENT_REPORT_CLEANTASK.IUnk1=} [properties] Properties to set
         * @returns {DEVICE_EVENT_REPORT_CLEANTASK.Unk1} Unk1 instance
         */
        Unk1.create = function create(properties) {
            return new Unk1(properties);
        };

        /**
         * Encodes the specified Unk1 message. Does not implicitly {@link DEVICE_EVENT_REPORT_CLEANTASK.Unk1.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @static
         * @param {DEVICE_EVENT_REPORT_CLEANTASK.IUnk1} message Unk1 message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Unk1.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.unk1Unk1);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.unk1Unk2);
            if (message.unk1Unk6 != null && Object.hasOwnProperty.call(message, "unk1Unk6"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.unk1Unk6);
            return writer;
        };

        /**
         * Encodes the specified Unk1 message, length delimited. Does not implicitly {@link DEVICE_EVENT_REPORT_CLEANTASK.Unk1.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @static
         * @param {DEVICE_EVENT_REPORT_CLEANTASK.IUnk1} message Unk1 message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Unk1.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Unk1 message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_EVENT_REPORT_CLEANTASK.Unk1} Unk1
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Unk1.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_EVENT_REPORT_CLEANTASK.Unk1();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.unk1Unk1 = reader.uint32();
                        break;
                    }
                case 2: {
                        message.unk1Unk2 = reader.uint32();
                        break;
                    }
                case 6: {
                        message.unk1Unk6 = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("unk1Unk1"))
                throw $util.ProtocolError("missing required 'unk1Unk1'", { instance: message });
            if (!message.hasOwnProperty("unk1Unk2"))
                throw $util.ProtocolError("missing required 'unk1Unk2'", { instance: message });
            return message;
        };

        /**
         * Decodes an Unk1 message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_EVENT_REPORT_CLEANTASK.Unk1} Unk1
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Unk1.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Unk1 message.
         * @function verify
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Unk1.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.unk1Unk1))
                return "unk1Unk1: integer expected";
            if (!$util.isInteger(message.unk1Unk2))
                return "unk1Unk2: integer expected";
            if (message.unk1Unk6 != null && message.hasOwnProperty("unk1Unk6"))
                if (!$util.isInteger(message.unk1Unk6))
                    return "unk1Unk6: integer expected";
            return null;
        };

        /**
         * Creates an Unk1 message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_EVENT_REPORT_CLEANTASK.Unk1} Unk1
         */
        Unk1.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_EVENT_REPORT_CLEANTASK.Unk1)
                return object;
            var message = new $root.DEVICE_EVENT_REPORT_CLEANTASK.Unk1();
            if (object.unk1Unk1 != null)
                message.unk1Unk1 = object.unk1Unk1 >>> 0;
            if (object.unk1Unk2 != null)
                message.unk1Unk2 = object.unk1Unk2 >>> 0;
            if (object.unk1Unk6 != null)
                message.unk1Unk6 = object.unk1Unk6 >>> 0;
            return message;
        };

        /**
         * Creates a plain object from an Unk1 message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @static
         * @param {DEVICE_EVENT_REPORT_CLEANTASK.Unk1} message Unk1
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Unk1.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.unk1Unk1 = 0;
                object.unk1Unk2 = 0;
                object.unk1Unk6 = 0;
            }
            if (message.unk1Unk1 != null && message.hasOwnProperty("unk1Unk1"))
                object.unk1Unk1 = message.unk1Unk1;
            if (message.unk1Unk2 != null && message.hasOwnProperty("unk1Unk2"))
                object.unk1Unk2 = message.unk1Unk2;
            if (message.unk1Unk6 != null && message.hasOwnProperty("unk1Unk6"))
                object.unk1Unk6 = message.unk1Unk6;
            return object;
        };

        /**
         * Converts this Unk1 to JSON.
         * @function toJSON
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Unk1.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Unk1
         * @function getTypeUrl
         * @memberof DEVICE_EVENT_REPORT_CLEANTASK.Unk1
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Unk1.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_EVENT_REPORT_CLEANTASK.Unk1";
        };

        return Unk1;
    })();

    return DEVICE_EVENT_REPORT_CLEANTASK;
})();

$root.DEVICE_CLEANMAP_BINDATA_REPORT_REQ = (function() {

    /**
     * Properties of a DEVICE_CLEANMAP_BINDATA_REPORT_REQ.
     * @exports IDEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @interface IDEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @property {number} cleanId DEVICE_CLEANMAP_BINDATA_REPORT_REQ cleanId
     */

    /**
     * Constructs a new DEVICE_CLEANMAP_BINDATA_REPORT_REQ.
     * @exports DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @classdesc Represents a DEVICE_CLEANMAP_BINDATA_REPORT_REQ.
     * @implements IDEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @constructor
     * @param {IDEVICE_CLEANMAP_BINDATA_REPORT_REQ=} [properties] Properties to set
     */
    function DEVICE_CLEANMAP_BINDATA_REPORT_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_CLEANMAP_BINDATA_REPORT_REQ cleanId.
     * @member {number} cleanId
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @instance
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.prototype.cleanId = 0;

    /**
     * Creates a new DEVICE_CLEANMAP_BINDATA_REPORT_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @static
     * @param {IDEVICE_CLEANMAP_BINDATA_REPORT_REQ=} [properties] Properties to set
     * @returns {DEVICE_CLEANMAP_BINDATA_REPORT_REQ} DEVICE_CLEANMAP_BINDATA_REPORT_REQ instance
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.create = function create(properties) {
        return new DEVICE_CLEANMAP_BINDATA_REPORT_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_CLEANMAP_BINDATA_REPORT_REQ message. Does not implicitly {@link DEVICE_CLEANMAP_BINDATA_REPORT_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @static
     * @param {IDEVICE_CLEANMAP_BINDATA_REPORT_REQ} message DEVICE_CLEANMAP_BINDATA_REPORT_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.cleanId);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_CLEANMAP_BINDATA_REPORT_REQ message, length delimited. Does not implicitly {@link DEVICE_CLEANMAP_BINDATA_REPORT_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @static
     * @param {IDEVICE_CLEANMAP_BINDATA_REPORT_REQ} message DEVICE_CLEANMAP_BINDATA_REPORT_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_CLEANMAP_BINDATA_REPORT_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_CLEANMAP_BINDATA_REPORT_REQ} DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_CLEANMAP_BINDATA_REPORT_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.cleanId = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cleanId"))
            throw $util.ProtocolError("missing required 'cleanId'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_CLEANMAP_BINDATA_REPORT_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_CLEANMAP_BINDATA_REPORT_REQ} DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_CLEANMAP_BINDATA_REPORT_REQ message.
     * @function verify
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cleanId))
            return "cleanId: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_CLEANMAP_BINDATA_REPORT_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_CLEANMAP_BINDATA_REPORT_REQ} DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_CLEANMAP_BINDATA_REPORT_REQ)
            return object;
        var message = new $root.DEVICE_CLEANMAP_BINDATA_REPORT_REQ();
        if (object.cleanId != null)
            message.cleanId = object.cleanId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_CLEANMAP_BINDATA_REPORT_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @static
     * @param {DEVICE_CLEANMAP_BINDATA_REPORT_REQ} message DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.cleanId = 0;
        if (message.cleanId != null && message.hasOwnProperty("cleanId"))
            object.cleanId = message.cleanId;
        return object;
    };

    /**
     * Converts this DEVICE_CLEANMAP_BINDATA_REPORT_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @function getTypeUrl
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_CLEANMAP_BINDATA_REPORT_REQ";
    };

    return DEVICE_CLEANMAP_BINDATA_REPORT_REQ;
})();

$root.DEVICE_CLEANMAP_BINDATA_REPORT_RSP = (function() {

    /**
     * Properties of a DEVICE_CLEANMAP_BINDATA_REPORT_RSP.
     * @exports IDEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @interface IDEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @property {number} result DEVICE_CLEANMAP_BINDATA_REPORT_RSP result
     * @property {number} cleanId DEVICE_CLEANMAP_BINDATA_REPORT_RSP cleanId
     */

    /**
     * Constructs a new DEVICE_CLEANMAP_BINDATA_REPORT_RSP.
     * @exports DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @classdesc Represents a DEVICE_CLEANMAP_BINDATA_REPORT_RSP.
     * @implements IDEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @constructor
     * @param {IDEVICE_CLEANMAP_BINDATA_REPORT_RSP=} [properties] Properties to set
     */
    function DEVICE_CLEANMAP_BINDATA_REPORT_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_CLEANMAP_BINDATA_REPORT_RSP result.
     * @member {number} result
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @instance
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.prototype.result = 0;

    /**
     * DEVICE_CLEANMAP_BINDATA_REPORT_RSP cleanId.
     * @member {number} cleanId
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @instance
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.prototype.cleanId = 0;

    /**
     * Creates a new DEVICE_CLEANMAP_BINDATA_REPORT_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @static
     * @param {IDEVICE_CLEANMAP_BINDATA_REPORT_RSP=} [properties] Properties to set
     * @returns {DEVICE_CLEANMAP_BINDATA_REPORT_RSP} DEVICE_CLEANMAP_BINDATA_REPORT_RSP instance
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.create = function create(properties) {
        return new DEVICE_CLEANMAP_BINDATA_REPORT_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_CLEANMAP_BINDATA_REPORT_RSP message. Does not implicitly {@link DEVICE_CLEANMAP_BINDATA_REPORT_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @static
     * @param {IDEVICE_CLEANMAP_BINDATA_REPORT_RSP} message DEVICE_CLEANMAP_BINDATA_REPORT_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.cleanId);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_CLEANMAP_BINDATA_REPORT_RSP message, length delimited. Does not implicitly {@link DEVICE_CLEANMAP_BINDATA_REPORT_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @static
     * @param {IDEVICE_CLEANMAP_BINDATA_REPORT_RSP} message DEVICE_CLEANMAP_BINDATA_REPORT_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_CLEANMAP_BINDATA_REPORT_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_CLEANMAP_BINDATA_REPORT_RSP} DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_CLEANMAP_BINDATA_REPORT_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.cleanId = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("cleanId"))
            throw $util.ProtocolError("missing required 'cleanId'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_CLEANMAP_BINDATA_REPORT_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_CLEANMAP_BINDATA_REPORT_RSP} DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_CLEANMAP_BINDATA_REPORT_RSP message.
     * @function verify
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        if (!$util.isInteger(message.cleanId))
            return "cleanId: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_CLEANMAP_BINDATA_REPORT_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_CLEANMAP_BINDATA_REPORT_RSP} DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_CLEANMAP_BINDATA_REPORT_RSP)
            return object;
        var message = new $root.DEVICE_CLEANMAP_BINDATA_REPORT_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.cleanId != null)
            message.cleanId = object.cleanId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_CLEANMAP_BINDATA_REPORT_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @static
     * @param {DEVICE_CLEANMAP_BINDATA_REPORT_RSP} message DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.cleanId = 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.cleanId != null && message.hasOwnProperty("cleanId"))
            object.cleanId = message.cleanId;
        return object;
    };

    /**
     * Converts this DEVICE_CLEANMAP_BINDATA_REPORT_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @function getTypeUrl
     * @memberof DEVICE_CLEANMAP_BINDATA_REPORT_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_CLEANMAP_BINDATA_REPORT_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_CLEANMAP_BINDATA_REPORT_RSP";
    };

    return DEVICE_CLEANMAP_BINDATA_REPORT_RSP;
})();

$root.DEVICE_OFFLINE_CMD = (function() {

    /**
     * Properties of a DEVICE_OFFLINE_CMD.
     * @exports IDEVICE_OFFLINE_CMD
     * @interface IDEVICE_OFFLINE_CMD
     * @property {number} result DEVICE_OFFLINE_CMD result
     */

    /**
     * Constructs a new DEVICE_OFFLINE_CMD.
     * @exports DEVICE_OFFLINE_CMD
     * @classdesc Represents a DEVICE_OFFLINE_CMD.
     * @implements IDEVICE_OFFLINE_CMD
     * @constructor
     * @param {IDEVICE_OFFLINE_CMD=} [properties] Properties to set
     */
    function DEVICE_OFFLINE_CMD(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_OFFLINE_CMD result.
     * @member {number} result
     * @memberof DEVICE_OFFLINE_CMD
     * @instance
     */
    DEVICE_OFFLINE_CMD.prototype.result = 0;

    /**
     * Creates a new DEVICE_OFFLINE_CMD instance using the specified properties.
     * @function create
     * @memberof DEVICE_OFFLINE_CMD
     * @static
     * @param {IDEVICE_OFFLINE_CMD=} [properties] Properties to set
     * @returns {DEVICE_OFFLINE_CMD} DEVICE_OFFLINE_CMD instance
     */
    DEVICE_OFFLINE_CMD.create = function create(properties) {
        return new DEVICE_OFFLINE_CMD(properties);
    };

    /**
     * Encodes the specified DEVICE_OFFLINE_CMD message. Does not implicitly {@link DEVICE_OFFLINE_CMD.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_OFFLINE_CMD
     * @static
     * @param {IDEVICE_OFFLINE_CMD} message DEVICE_OFFLINE_CMD message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_OFFLINE_CMD.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_OFFLINE_CMD message, length delimited. Does not implicitly {@link DEVICE_OFFLINE_CMD.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_OFFLINE_CMD
     * @static
     * @param {IDEVICE_OFFLINE_CMD} message DEVICE_OFFLINE_CMD message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_OFFLINE_CMD.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_OFFLINE_CMD message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_OFFLINE_CMD
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_OFFLINE_CMD} DEVICE_OFFLINE_CMD
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_OFFLINE_CMD.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_OFFLINE_CMD();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_OFFLINE_CMD message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_OFFLINE_CMD
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_OFFLINE_CMD} DEVICE_OFFLINE_CMD
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_OFFLINE_CMD.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_OFFLINE_CMD message.
     * @function verify
     * @memberof DEVICE_OFFLINE_CMD
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_OFFLINE_CMD.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_OFFLINE_CMD message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_OFFLINE_CMD
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_OFFLINE_CMD} DEVICE_OFFLINE_CMD
     */
    DEVICE_OFFLINE_CMD.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_OFFLINE_CMD)
            return object;
        var message = new $root.DEVICE_OFFLINE_CMD();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_OFFLINE_CMD message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_OFFLINE_CMD
     * @static
     * @param {DEVICE_OFFLINE_CMD} message DEVICE_OFFLINE_CMD
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_OFFLINE_CMD.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_OFFLINE_CMD to JSON.
     * @function toJSON
     * @memberof DEVICE_OFFLINE_CMD
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_OFFLINE_CMD.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_OFFLINE_CMD
     * @function getTypeUrl
     * @memberof DEVICE_OFFLINE_CMD
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_OFFLINE_CMD.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_OFFLINE_CMD";
    };

    return DEVICE_OFFLINE_CMD;
})();

$root.DEVICE_TIME_SYNC_RSP = (function() {

    /**
     * Properties of a DEVICE_TIME_SYNC_RSP.
     * @exports IDEVICE_TIME_SYNC_RSP
     * @interface IDEVICE_TIME_SYNC_RSP
     * @property {number} result DEVICE_TIME_SYNC_RSP result
     * @property {DEVICE_TIME_SYNC_RSP.IBody} body DEVICE_TIME_SYNC_RSP body
     */

    /**
     * Constructs a new DEVICE_TIME_SYNC_RSP.
     * @exports DEVICE_TIME_SYNC_RSP
     * @classdesc Represents a DEVICE_TIME_SYNC_RSP.
     * @implements IDEVICE_TIME_SYNC_RSP
     * @constructor
     * @param {IDEVICE_TIME_SYNC_RSP=} [properties] Properties to set
     */
    function DEVICE_TIME_SYNC_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_TIME_SYNC_RSP result.
     * @member {number} result
     * @memberof DEVICE_TIME_SYNC_RSP
     * @instance
     */
    DEVICE_TIME_SYNC_RSP.prototype.result = 0;

    /**
     * DEVICE_TIME_SYNC_RSP body.
     * @member {DEVICE_TIME_SYNC_RSP.IBody} body
     * @memberof DEVICE_TIME_SYNC_RSP
     * @instance
     */
    DEVICE_TIME_SYNC_RSP.prototype.body = null;

    /**
     * Creates a new DEVICE_TIME_SYNC_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_TIME_SYNC_RSP
     * @static
     * @param {IDEVICE_TIME_SYNC_RSP=} [properties] Properties to set
     * @returns {DEVICE_TIME_SYNC_RSP} DEVICE_TIME_SYNC_RSP instance
     */
    DEVICE_TIME_SYNC_RSP.create = function create(properties) {
        return new DEVICE_TIME_SYNC_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_TIME_SYNC_RSP message. Does not implicitly {@link DEVICE_TIME_SYNC_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_TIME_SYNC_RSP
     * @static
     * @param {IDEVICE_TIME_SYNC_RSP} message DEVICE_TIME_SYNC_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_TIME_SYNC_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        $root.DEVICE_TIME_SYNC_RSP.Body.encode(message.body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_TIME_SYNC_RSP message, length delimited. Does not implicitly {@link DEVICE_TIME_SYNC_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_TIME_SYNC_RSP
     * @static
     * @param {IDEVICE_TIME_SYNC_RSP} message DEVICE_TIME_SYNC_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_TIME_SYNC_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_TIME_SYNC_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_TIME_SYNC_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_TIME_SYNC_RSP} DEVICE_TIME_SYNC_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_TIME_SYNC_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_TIME_SYNC_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.body = $root.DEVICE_TIME_SYNC_RSP.Body.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("body"))
            throw $util.ProtocolError("missing required 'body'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_TIME_SYNC_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_TIME_SYNC_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_TIME_SYNC_RSP} DEVICE_TIME_SYNC_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_TIME_SYNC_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_TIME_SYNC_RSP message.
     * @function verify
     * @memberof DEVICE_TIME_SYNC_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_TIME_SYNC_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        {
            var error = $root.DEVICE_TIME_SYNC_RSP.Body.verify(message.body);
            if (error)
                return "body." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_TIME_SYNC_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_TIME_SYNC_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_TIME_SYNC_RSP} DEVICE_TIME_SYNC_RSP
     */
    DEVICE_TIME_SYNC_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_TIME_SYNC_RSP)
            return object;
        var message = new $root.DEVICE_TIME_SYNC_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.body != null) {
            if (typeof object.body !== "object")
                throw TypeError(".DEVICE_TIME_SYNC_RSP.body: object expected");
            message.body = $root.DEVICE_TIME_SYNC_RSP.Body.fromObject(object.body);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_TIME_SYNC_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_TIME_SYNC_RSP
     * @static
     * @param {DEVICE_TIME_SYNC_RSP} message DEVICE_TIME_SYNC_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_TIME_SYNC_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.body = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.body != null && message.hasOwnProperty("body"))
            object.body = $root.DEVICE_TIME_SYNC_RSP.Body.toObject(message.body, options);
        return object;
    };

    /**
     * Converts this DEVICE_TIME_SYNC_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_TIME_SYNC_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_TIME_SYNC_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_TIME_SYNC_RSP
     * @function getTypeUrl
     * @memberof DEVICE_TIME_SYNC_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_TIME_SYNC_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_TIME_SYNC_RSP";
    };

    DEVICE_TIME_SYNC_RSP.Body = (function() {

        /**
         * Properties of a Body.
         * @memberof DEVICE_TIME_SYNC_RSP
         * @interface IBody
         * @property {number} time Body time
         */

        /**
         * Constructs a new Body.
         * @memberof DEVICE_TIME_SYNC_RSP
         * @classdesc Represents a Body.
         * @implements IBody
         * @constructor
         * @param {DEVICE_TIME_SYNC_RSP.IBody=} [properties] Properties to set
         */
        function Body(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Body time.
         * @member {number} time
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @instance
         */
        Body.prototype.time = 0;

        /**
         * Creates a new Body instance using the specified properties.
         * @function create
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @static
         * @param {DEVICE_TIME_SYNC_RSP.IBody=} [properties] Properties to set
         * @returns {DEVICE_TIME_SYNC_RSP.Body} Body instance
         */
        Body.create = function create(properties) {
            return new Body(properties);
        };

        /**
         * Encodes the specified Body message. Does not implicitly {@link DEVICE_TIME_SYNC_RSP.Body.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @static
         * @param {DEVICE_TIME_SYNC_RSP.IBody} message Body message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Body.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.time);
            return writer;
        };

        /**
         * Encodes the specified Body message, length delimited. Does not implicitly {@link DEVICE_TIME_SYNC_RSP.Body.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @static
         * @param {DEVICE_TIME_SYNC_RSP.IBody} message Body message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Body.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Body message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_TIME_SYNC_RSP.Body} Body
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Body.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_TIME_SYNC_RSP.Body();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.time = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("time"))
                throw $util.ProtocolError("missing required 'time'", { instance: message });
            return message;
        };

        /**
         * Decodes a Body message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_TIME_SYNC_RSP.Body} Body
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Body.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Body message.
         * @function verify
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Body.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.time))
                return "time: integer expected";
            return null;
        };

        /**
         * Creates a Body message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_TIME_SYNC_RSP.Body} Body
         */
        Body.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_TIME_SYNC_RSP.Body)
                return object;
            var message = new $root.DEVICE_TIME_SYNC_RSP.Body();
            if (object.time != null)
                message.time = object.time >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Body message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @static
         * @param {DEVICE_TIME_SYNC_RSP.Body} message Body
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Body.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.time = 0;
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            return object;
        };

        /**
         * Converts this Body to JSON.
         * @function toJSON
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Body.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Body
         * @function getTypeUrl
         * @memberof DEVICE_TIME_SYNC_RSP.Body
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Body.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_TIME_SYNC_RSP.Body";
        };

        return Body;
    })();

    return DEVICE_TIME_SYNC_RSP;
})();

$root.DEVICE_EVENT_REPORT_REQ = (function() {

    /**
     * Properties of a DEVICE_EVENT_REPORT_REQ.
     * @exports IDEVICE_EVENT_REPORT_REQ
     * @interface IDEVICE_EVENT_REPORT_REQ
     * @property {number} type DEVICE_EVENT_REPORT_REQ type
     * @property {number} keyValue DEVICE_EVENT_REPORT_REQ keyValue
     * @property {number|null} [reportTime] DEVICE_EVENT_REPORT_REQ reportTime
     */

    /**
     * Constructs a new DEVICE_EVENT_REPORT_REQ.
     * @exports DEVICE_EVENT_REPORT_REQ
     * @classdesc Represents a DEVICE_EVENT_REPORT_REQ.
     * @implements IDEVICE_EVENT_REPORT_REQ
     * @constructor
     * @param {IDEVICE_EVENT_REPORT_REQ=} [properties] Properties to set
     */
    function DEVICE_EVENT_REPORT_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_EVENT_REPORT_REQ type.
     * @member {number} type
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @instance
     */
    DEVICE_EVENT_REPORT_REQ.prototype.type = 0;

    /**
     * DEVICE_EVENT_REPORT_REQ keyValue.
     * @member {number} keyValue
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @instance
     */
    DEVICE_EVENT_REPORT_REQ.prototype.keyValue = 0;

    /**
     * DEVICE_EVENT_REPORT_REQ reportTime.
     * @member {number} reportTime
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @instance
     */
    DEVICE_EVENT_REPORT_REQ.prototype.reportTime = 0;

    /**
     * Creates a new DEVICE_EVENT_REPORT_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @static
     * @param {IDEVICE_EVENT_REPORT_REQ=} [properties] Properties to set
     * @returns {DEVICE_EVENT_REPORT_REQ} DEVICE_EVENT_REPORT_REQ instance
     */
    DEVICE_EVENT_REPORT_REQ.create = function create(properties) {
        return new DEVICE_EVENT_REPORT_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_EVENT_REPORT_REQ message. Does not implicitly {@link DEVICE_EVENT_REPORT_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @static
     * @param {IDEVICE_EVENT_REPORT_REQ} message DEVICE_EVENT_REPORT_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_EVENT_REPORT_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.keyValue);
        if (message.reportTime != null && Object.hasOwnProperty.call(message, "reportTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.reportTime);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_EVENT_REPORT_REQ message, length delimited. Does not implicitly {@link DEVICE_EVENT_REPORT_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @static
     * @param {IDEVICE_EVENT_REPORT_REQ} message DEVICE_EVENT_REPORT_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_EVENT_REPORT_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_EVENT_REPORT_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_EVENT_REPORT_REQ} DEVICE_EVENT_REPORT_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_EVENT_REPORT_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_EVENT_REPORT_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.type = reader.int32();
                    break;
                }
            case 2: {
                    message.keyValue = reader.int32();
                    break;
                }
            case 3: {
                    message.reportTime = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("type"))
            throw $util.ProtocolError("missing required 'type'", { instance: message });
        if (!message.hasOwnProperty("keyValue"))
            throw $util.ProtocolError("missing required 'keyValue'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_EVENT_REPORT_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_EVENT_REPORT_REQ} DEVICE_EVENT_REPORT_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_EVENT_REPORT_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_EVENT_REPORT_REQ message.
     * @function verify
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_EVENT_REPORT_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.type))
            return "type: integer expected";
        if (!$util.isInteger(message.keyValue))
            return "keyValue: integer expected";
        if (message.reportTime != null && message.hasOwnProperty("reportTime"))
            if (!$util.isInteger(message.reportTime))
                return "reportTime: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_EVENT_REPORT_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_EVENT_REPORT_REQ} DEVICE_EVENT_REPORT_REQ
     */
    DEVICE_EVENT_REPORT_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_EVENT_REPORT_REQ)
            return object;
        var message = new $root.DEVICE_EVENT_REPORT_REQ();
        if (object.type != null)
            message.type = object.type | 0;
        if (object.keyValue != null)
            message.keyValue = object.keyValue | 0;
        if (object.reportTime != null)
            message.reportTime = object.reportTime | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_EVENT_REPORT_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @static
     * @param {DEVICE_EVENT_REPORT_REQ} message DEVICE_EVENT_REPORT_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_EVENT_REPORT_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.type = 0;
            object.keyValue = 0;
            object.reportTime = 0;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.keyValue != null && message.hasOwnProperty("keyValue"))
            object.keyValue = message.keyValue;
        if (message.reportTime != null && message.hasOwnProperty("reportTime"))
            object.reportTime = message.reportTime;
        return object;
    };

    /**
     * Converts this DEVICE_EVENT_REPORT_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_EVENT_REPORT_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_EVENT_REPORT_REQ
     * @function getTypeUrl
     * @memberof DEVICE_EVENT_REPORT_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_EVENT_REPORT_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_EVENT_REPORT_REQ";
    };

    return DEVICE_EVENT_REPORT_REQ;
})();

$root.DEVICE_EVENT_REPORT_CLEANMAP = (function() {

    /**
     * Properties of a DEVICE_EVENT_REPORT_CLEANMAP.
     * @exports IDEVICE_EVENT_REPORT_CLEANMAP
     * @interface IDEVICE_EVENT_REPORT_CLEANMAP
     * @property {number} cleanId DEVICE_EVENT_REPORT_CLEANMAP cleanId
     */

    /**
     * Constructs a new DEVICE_EVENT_REPORT_CLEANMAP.
     * @exports DEVICE_EVENT_REPORT_CLEANMAP
     * @classdesc Represents a DEVICE_EVENT_REPORT_CLEANMAP.
     * @implements IDEVICE_EVENT_REPORT_CLEANMAP
     * @constructor
     * @param {IDEVICE_EVENT_REPORT_CLEANMAP=} [properties] Properties to set
     */
    function DEVICE_EVENT_REPORT_CLEANMAP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_EVENT_REPORT_CLEANMAP cleanId.
     * @member {number} cleanId
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @instance
     */
    DEVICE_EVENT_REPORT_CLEANMAP.prototype.cleanId = 0;

    /**
     * Creates a new DEVICE_EVENT_REPORT_CLEANMAP instance using the specified properties.
     * @function create
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @static
     * @param {IDEVICE_EVENT_REPORT_CLEANMAP=} [properties] Properties to set
     * @returns {DEVICE_EVENT_REPORT_CLEANMAP} DEVICE_EVENT_REPORT_CLEANMAP instance
     */
    DEVICE_EVENT_REPORT_CLEANMAP.create = function create(properties) {
        return new DEVICE_EVENT_REPORT_CLEANMAP(properties);
    };

    /**
     * Encodes the specified DEVICE_EVENT_REPORT_CLEANMAP message. Does not implicitly {@link DEVICE_EVENT_REPORT_CLEANMAP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @static
     * @param {IDEVICE_EVENT_REPORT_CLEANMAP} message DEVICE_EVENT_REPORT_CLEANMAP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_EVENT_REPORT_CLEANMAP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.cleanId);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_EVENT_REPORT_CLEANMAP message, length delimited. Does not implicitly {@link DEVICE_EVENT_REPORT_CLEANMAP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @static
     * @param {IDEVICE_EVENT_REPORT_CLEANMAP} message DEVICE_EVENT_REPORT_CLEANMAP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_EVENT_REPORT_CLEANMAP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_EVENT_REPORT_CLEANMAP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_EVENT_REPORT_CLEANMAP} DEVICE_EVENT_REPORT_CLEANMAP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_EVENT_REPORT_CLEANMAP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_EVENT_REPORT_CLEANMAP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.cleanId = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cleanId"))
            throw $util.ProtocolError("missing required 'cleanId'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_EVENT_REPORT_CLEANMAP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_EVENT_REPORT_CLEANMAP} DEVICE_EVENT_REPORT_CLEANMAP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_EVENT_REPORT_CLEANMAP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_EVENT_REPORT_CLEANMAP message.
     * @function verify
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_EVENT_REPORT_CLEANMAP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cleanId))
            return "cleanId: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_EVENT_REPORT_CLEANMAP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_EVENT_REPORT_CLEANMAP} DEVICE_EVENT_REPORT_CLEANMAP
     */
    DEVICE_EVENT_REPORT_CLEANMAP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_EVENT_REPORT_CLEANMAP)
            return object;
        var message = new $root.DEVICE_EVENT_REPORT_CLEANMAP();
        if (object.cleanId != null)
            message.cleanId = object.cleanId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_EVENT_REPORT_CLEANMAP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @static
     * @param {DEVICE_EVENT_REPORT_CLEANMAP} message DEVICE_EVENT_REPORT_CLEANMAP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_EVENT_REPORT_CLEANMAP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.cleanId = 0;
        if (message.cleanId != null && message.hasOwnProperty("cleanId"))
            object.cleanId = message.cleanId;
        return object;
    };

    /**
     * Converts this DEVICE_EVENT_REPORT_CLEANMAP to JSON.
     * @function toJSON
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_EVENT_REPORT_CLEANMAP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_EVENT_REPORT_CLEANMAP
     * @function getTypeUrl
     * @memberof DEVICE_EVENT_REPORT_CLEANMAP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_EVENT_REPORT_CLEANMAP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_EVENT_REPORT_CLEANMAP";
    };

    return DEVICE_EVENT_REPORT_CLEANMAP;
})();

$root.DEVICE_EVENT_REPORT_RSP = (function() {

    /**
     * Properties of a DEVICE_EVENT_REPORT_RSP.
     * @exports IDEVICE_EVENT_REPORT_RSP
     * @interface IDEVICE_EVENT_REPORT_RSP
     * @property {number} result DEVICE_EVENT_REPORT_RSP result
     * @property {DEVICE_EVENT_REPORT_RSP.IBody} body DEVICE_EVENT_REPORT_RSP body
     */

    /**
     * Constructs a new DEVICE_EVENT_REPORT_RSP.
     * @exports DEVICE_EVENT_REPORT_RSP
     * @classdesc Represents a DEVICE_EVENT_REPORT_RSP.
     * @implements IDEVICE_EVENT_REPORT_RSP
     * @constructor
     * @param {IDEVICE_EVENT_REPORT_RSP=} [properties] Properties to set
     */
    function DEVICE_EVENT_REPORT_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_EVENT_REPORT_RSP result.
     * @member {number} result
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @instance
     */
    DEVICE_EVENT_REPORT_RSP.prototype.result = 0;

    /**
     * DEVICE_EVENT_REPORT_RSP body.
     * @member {DEVICE_EVENT_REPORT_RSP.IBody} body
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @instance
     */
    DEVICE_EVENT_REPORT_RSP.prototype.body = null;

    /**
     * Creates a new DEVICE_EVENT_REPORT_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @static
     * @param {IDEVICE_EVENT_REPORT_RSP=} [properties] Properties to set
     * @returns {DEVICE_EVENT_REPORT_RSP} DEVICE_EVENT_REPORT_RSP instance
     */
    DEVICE_EVENT_REPORT_RSP.create = function create(properties) {
        return new DEVICE_EVENT_REPORT_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_EVENT_REPORT_RSP message. Does not implicitly {@link DEVICE_EVENT_REPORT_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @static
     * @param {IDEVICE_EVENT_REPORT_RSP} message DEVICE_EVENT_REPORT_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_EVENT_REPORT_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        $root.DEVICE_EVENT_REPORT_RSP.Body.encode(message.body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_EVENT_REPORT_RSP message, length delimited. Does not implicitly {@link DEVICE_EVENT_REPORT_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @static
     * @param {IDEVICE_EVENT_REPORT_RSP} message DEVICE_EVENT_REPORT_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_EVENT_REPORT_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_EVENT_REPORT_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_EVENT_REPORT_RSP} DEVICE_EVENT_REPORT_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_EVENT_REPORT_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_EVENT_REPORT_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.body = $root.DEVICE_EVENT_REPORT_RSP.Body.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("body"))
            throw $util.ProtocolError("missing required 'body'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_EVENT_REPORT_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_EVENT_REPORT_RSP} DEVICE_EVENT_REPORT_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_EVENT_REPORT_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_EVENT_REPORT_RSP message.
     * @function verify
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_EVENT_REPORT_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        {
            var error = $root.DEVICE_EVENT_REPORT_RSP.Body.verify(message.body);
            if (error)
                return "body." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_EVENT_REPORT_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_EVENT_REPORT_RSP} DEVICE_EVENT_REPORT_RSP
     */
    DEVICE_EVENT_REPORT_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_EVENT_REPORT_RSP)
            return object;
        var message = new $root.DEVICE_EVENT_REPORT_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.body != null) {
            if (typeof object.body !== "object")
                throw TypeError(".DEVICE_EVENT_REPORT_RSP.body: object expected");
            message.body = $root.DEVICE_EVENT_REPORT_RSP.Body.fromObject(object.body);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_EVENT_REPORT_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @static
     * @param {DEVICE_EVENT_REPORT_RSP} message DEVICE_EVENT_REPORT_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_EVENT_REPORT_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.body = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.body != null && message.hasOwnProperty("body"))
            object.body = $root.DEVICE_EVENT_REPORT_RSP.Body.toObject(message.body, options);
        return object;
    };

    /**
     * Converts this DEVICE_EVENT_REPORT_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_EVENT_REPORT_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_EVENT_REPORT_RSP
     * @function getTypeUrl
     * @memberof DEVICE_EVENT_REPORT_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_EVENT_REPORT_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_EVENT_REPORT_RSP";
    };

    DEVICE_EVENT_REPORT_RSP.Body = (function() {

        /**
         * Properties of a Body.
         * @memberof DEVICE_EVENT_REPORT_RSP
         * @interface IBody
         * @property {number} cleanId Body cleanId
         */

        /**
         * Constructs a new Body.
         * @memberof DEVICE_EVENT_REPORT_RSP
         * @classdesc Represents a Body.
         * @implements IBody
         * @constructor
         * @param {DEVICE_EVENT_REPORT_RSP.IBody=} [properties] Properties to set
         */
        function Body(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Body cleanId.
         * @member {number} cleanId
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @instance
         */
        Body.prototype.cleanId = 0;

        /**
         * Creates a new Body instance using the specified properties.
         * @function create
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @static
         * @param {DEVICE_EVENT_REPORT_RSP.IBody=} [properties] Properties to set
         * @returns {DEVICE_EVENT_REPORT_RSP.Body} Body instance
         */
        Body.create = function create(properties) {
            return new Body(properties);
        };

        /**
         * Encodes the specified Body message. Does not implicitly {@link DEVICE_EVENT_REPORT_RSP.Body.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @static
         * @param {DEVICE_EVENT_REPORT_RSP.IBody} message Body message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Body.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.cleanId);
            return writer;
        };

        /**
         * Encodes the specified Body message, length delimited. Does not implicitly {@link DEVICE_EVENT_REPORT_RSP.Body.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @static
         * @param {DEVICE_EVENT_REPORT_RSP.IBody} message Body message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Body.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Body message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_EVENT_REPORT_RSP.Body} Body
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Body.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_EVENT_REPORT_RSP.Body();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.cleanId = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("cleanId"))
                throw $util.ProtocolError("missing required 'cleanId'", { instance: message });
            return message;
        };

        /**
         * Decodes a Body message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_EVENT_REPORT_RSP.Body} Body
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Body.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Body message.
         * @function verify
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Body.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.cleanId))
                return "cleanId: integer expected";
            return null;
        };

        /**
         * Creates a Body message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_EVENT_REPORT_RSP.Body} Body
         */
        Body.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_EVENT_REPORT_RSP.Body)
                return object;
            var message = new $root.DEVICE_EVENT_REPORT_RSP.Body();
            if (object.cleanId != null)
                message.cleanId = object.cleanId >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Body message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @static
         * @param {DEVICE_EVENT_REPORT_RSP.Body} message Body
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Body.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.cleanId = 0;
            if (message.cleanId != null && message.hasOwnProperty("cleanId"))
                object.cleanId = message.cleanId;
            return object;
        };

        /**
         * Converts this Body to JSON.
         * @function toJSON
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Body.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Body
         * @function getTypeUrl
         * @memberof DEVICE_EVENT_REPORT_RSP.Body
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Body.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_EVENT_REPORT_RSP.Body";
        };

        return Body;
    })();

    return DEVICE_EVENT_REPORT_RSP;
})();

$root.UNK_11A4 = (function() {

    /**
     * Properties of a UNK_11A4.
     * @exports IUNK_11A4
     * @interface IUNK_11A4
     * @property {number} unk1 UNK_11A4 unk1
     */

    /**
     * Constructs a new UNK_11A4.
     * @exports UNK_11A4
     * @classdesc Represents a UNK_11A4.
     * @implements IUNK_11A4
     * @constructor
     * @param {IUNK_11A4=} [properties] Properties to set
     */
    function UNK_11A4(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * UNK_11A4 unk1.
     * @member {number} unk1
     * @memberof UNK_11A4
     * @instance
     */
    UNK_11A4.prototype.unk1 = 0;

    /**
     * Creates a new UNK_11A4 instance using the specified properties.
     * @function create
     * @memberof UNK_11A4
     * @static
     * @param {IUNK_11A4=} [properties] Properties to set
     * @returns {UNK_11A4} UNK_11A4 instance
     */
    UNK_11A4.create = function create(properties) {
        return new UNK_11A4(properties);
    };

    /**
     * Encodes the specified UNK_11A4 message. Does not implicitly {@link UNK_11A4.verify|verify} messages.
     * @function encode
     * @memberof UNK_11A4
     * @static
     * @param {IUNK_11A4} message UNK_11A4 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UNK_11A4.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.unk1);
        return writer;
    };

    /**
     * Encodes the specified UNK_11A4 message, length delimited. Does not implicitly {@link UNK_11A4.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UNK_11A4
     * @static
     * @param {IUNK_11A4} message UNK_11A4 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UNK_11A4.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a UNK_11A4 message from the specified reader or buffer.
     * @function decode
     * @memberof UNK_11A4
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UNK_11A4} UNK_11A4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UNK_11A4.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UNK_11A4();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.unk1 = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("unk1"))
            throw $util.ProtocolError("missing required 'unk1'", { instance: message });
        return message;
    };

    /**
     * Decodes a UNK_11A4 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UNK_11A4
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UNK_11A4} UNK_11A4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UNK_11A4.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a UNK_11A4 message.
     * @function verify
     * @memberof UNK_11A4
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    UNK_11A4.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.unk1))
            return "unk1: integer expected";
        return null;
    };

    /**
     * Creates a UNK_11A4 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UNK_11A4
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UNK_11A4} UNK_11A4
     */
    UNK_11A4.fromObject = function fromObject(object) {
        if (object instanceof $root.UNK_11A4)
            return object;
        var message = new $root.UNK_11A4();
        if (object.unk1 != null)
            message.unk1 = object.unk1 >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a UNK_11A4 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UNK_11A4
     * @static
     * @param {UNK_11A4} message UNK_11A4
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    UNK_11A4.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.unk1 = 0;
        if (message.unk1 != null && message.hasOwnProperty("unk1"))
            object.unk1 = message.unk1;
        return object;
    };

    /**
     * Converts this UNK_11A4 to JSON.
     * @function toJSON
     * @memberof UNK_11A4
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    UNK_11A4.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for UNK_11A4
     * @function getTypeUrl
     * @memberof UNK_11A4
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    UNK_11A4.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/UNK_11A4";
    };

    return UNK_11A4;
})();

$root.UNK_11A7 = (function() {

    /**
     * Properties of a UNK_11A7.
     * @exports IUNK_11A7
     * @interface IUNK_11A7
     * @property {number} unk1 UNK_11A7 unk1
     */

    /**
     * Constructs a new UNK_11A7.
     * @exports UNK_11A7
     * @classdesc Represents a UNK_11A7.
     * @implements IUNK_11A7
     * @constructor
     * @param {IUNK_11A7=} [properties] Properties to set
     */
    function UNK_11A7(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * UNK_11A7 unk1.
     * @member {number} unk1
     * @memberof UNK_11A7
     * @instance
     */
    UNK_11A7.prototype.unk1 = 0;

    /**
     * Creates a new UNK_11A7 instance using the specified properties.
     * @function create
     * @memberof UNK_11A7
     * @static
     * @param {IUNK_11A7=} [properties] Properties to set
     * @returns {UNK_11A7} UNK_11A7 instance
     */
    UNK_11A7.create = function create(properties) {
        return new UNK_11A7(properties);
    };

    /**
     * Encodes the specified UNK_11A7 message. Does not implicitly {@link UNK_11A7.verify|verify} messages.
     * @function encode
     * @memberof UNK_11A7
     * @static
     * @param {IUNK_11A7} message UNK_11A7 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UNK_11A7.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.unk1);
        return writer;
    };

    /**
     * Encodes the specified UNK_11A7 message, length delimited. Does not implicitly {@link UNK_11A7.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UNK_11A7
     * @static
     * @param {IUNK_11A7} message UNK_11A7 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UNK_11A7.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a UNK_11A7 message from the specified reader or buffer.
     * @function decode
     * @memberof UNK_11A7
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UNK_11A7} UNK_11A7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UNK_11A7.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UNK_11A7();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.unk1 = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("unk1"))
            throw $util.ProtocolError("missing required 'unk1'", { instance: message });
        return message;
    };

    /**
     * Decodes a UNK_11A7 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UNK_11A7
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UNK_11A7} UNK_11A7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UNK_11A7.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a UNK_11A7 message.
     * @function verify
     * @memberof UNK_11A7
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    UNK_11A7.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.unk1))
            return "unk1: integer expected";
        return null;
    };

    /**
     * Creates a UNK_11A7 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UNK_11A7
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UNK_11A7} UNK_11A7
     */
    UNK_11A7.fromObject = function fromObject(object) {
        if (object instanceof $root.UNK_11A7)
            return object;
        var message = new $root.UNK_11A7();
        if (object.unk1 != null)
            message.unk1 = object.unk1 >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a UNK_11A7 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UNK_11A7
     * @static
     * @param {UNK_11A7} message UNK_11A7
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    UNK_11A7.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.unk1 = 0;
        if (message.unk1 != null && message.hasOwnProperty("unk1"))
            object.unk1 = message.unk1;
        return object;
    };

    /**
     * Converts this UNK_11A7 to JSON.
     * @function toJSON
     * @memberof UNK_11A7
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    UNK_11A7.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for UNK_11A7
     * @function getTypeUrl
     * @memberof UNK_11A7
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    UNK_11A7.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/UNK_11A7";
    };

    return UNK_11A7;
})();

$root.UNK_0044 = (function() {

    /**
     * Properties of a UNK_0044.
     * @exports IUNK_0044
     * @interface IUNK_0044
     */

    /**
     * Constructs a new UNK_0044.
     * @exports UNK_0044
     * @classdesc Represents a UNK_0044.
     * @implements IUNK_0044
     * @constructor
     * @param {IUNK_0044=} [properties] Properties to set
     */
    function UNK_0044(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new UNK_0044 instance using the specified properties.
     * @function create
     * @memberof UNK_0044
     * @static
     * @param {IUNK_0044=} [properties] Properties to set
     * @returns {UNK_0044} UNK_0044 instance
     */
    UNK_0044.create = function create(properties) {
        return new UNK_0044(properties);
    };

    /**
     * Encodes the specified UNK_0044 message. Does not implicitly {@link UNK_0044.verify|verify} messages.
     * @function encode
     * @memberof UNK_0044
     * @static
     * @param {IUNK_0044} message UNK_0044 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UNK_0044.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified UNK_0044 message, length delimited. Does not implicitly {@link UNK_0044.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UNK_0044
     * @static
     * @param {IUNK_0044} message UNK_0044 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UNK_0044.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a UNK_0044 message from the specified reader or buffer.
     * @function decode
     * @memberof UNK_0044
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UNK_0044} UNK_0044
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UNK_0044.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UNK_0044();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a UNK_0044 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UNK_0044
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UNK_0044} UNK_0044
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UNK_0044.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a UNK_0044 message.
     * @function verify
     * @memberof UNK_0044
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    UNK_0044.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a UNK_0044 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UNK_0044
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UNK_0044} UNK_0044
     */
    UNK_0044.fromObject = function fromObject(object) {
        if (object instanceof $root.UNK_0044)
            return object;
        return new $root.UNK_0044();
    };

    /**
     * Creates a plain object from a UNK_0044 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UNK_0044
     * @static
     * @param {UNK_0044} message UNK_0044
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    UNK_0044.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this UNK_0044 to JSON.
     * @function toJSON
     * @memberof UNK_0044
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    UNK_0044.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for UNK_0044
     * @function getTypeUrl
     * @memberof UNK_0044
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    UNK_0044.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/UNK_0044";
    };

    return UNK_0044;
})();

$root.DEVICE_WITHROOMS_CLEAN_REQ = (function() {

    /**
     * Properties of a DEVICE_WITHROOMS_CLEAN_REQ.
     * @exports IDEVICE_WITHROOMS_CLEAN_REQ
     * @interface IDEVICE_WITHROOMS_CLEAN_REQ
     * @property {number} cleanType DEVICE_WITHROOMS_CLEAN_REQ cleanType
     * @property {number} ctrlValue DEVICE_WITHROOMS_CLEAN_REQ ctrlValue
     * @property {number} roomNumber DEVICE_WITHROOMS_CLEAN_REQ roomNumber
     * @property {Uint8Array} roomIdList DEVICE_WITHROOMS_CLEAN_REQ roomIdList
     */

    /**
     * Constructs a new DEVICE_WITHROOMS_CLEAN_REQ.
     * @exports DEVICE_WITHROOMS_CLEAN_REQ
     * @classdesc Represents a DEVICE_WITHROOMS_CLEAN_REQ.
     * @implements IDEVICE_WITHROOMS_CLEAN_REQ
     * @constructor
     * @param {IDEVICE_WITHROOMS_CLEAN_REQ=} [properties] Properties to set
     */
    function DEVICE_WITHROOMS_CLEAN_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_WITHROOMS_CLEAN_REQ cleanType.
     * @member {number} cleanType
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @instance
     */
    DEVICE_WITHROOMS_CLEAN_REQ.prototype.cleanType = 0;

    /**
     * DEVICE_WITHROOMS_CLEAN_REQ ctrlValue.
     * @member {number} ctrlValue
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @instance
     */
    DEVICE_WITHROOMS_CLEAN_REQ.prototype.ctrlValue = 0;

    /**
     * DEVICE_WITHROOMS_CLEAN_REQ roomNumber.
     * @member {number} roomNumber
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @instance
     */
    DEVICE_WITHROOMS_CLEAN_REQ.prototype.roomNumber = 0;

    /**
     * DEVICE_WITHROOMS_CLEAN_REQ roomIdList.
     * @member {Uint8Array} roomIdList
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @instance
     */
    DEVICE_WITHROOMS_CLEAN_REQ.prototype.roomIdList = $util.newBuffer([]);

    /**
     * Creates a new DEVICE_WITHROOMS_CLEAN_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @static
     * @param {IDEVICE_WITHROOMS_CLEAN_REQ=} [properties] Properties to set
     * @returns {DEVICE_WITHROOMS_CLEAN_REQ} DEVICE_WITHROOMS_CLEAN_REQ instance
     */
    DEVICE_WITHROOMS_CLEAN_REQ.create = function create(properties) {
        return new DEVICE_WITHROOMS_CLEAN_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_WITHROOMS_CLEAN_REQ message. Does not implicitly {@link DEVICE_WITHROOMS_CLEAN_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @static
     * @param {IDEVICE_WITHROOMS_CLEAN_REQ} message DEVICE_WITHROOMS_CLEAN_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WITHROOMS_CLEAN_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.cleanType);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ctrlValue);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.roomNumber);
        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.roomIdList);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_WITHROOMS_CLEAN_REQ message, length delimited. Does not implicitly {@link DEVICE_WITHROOMS_CLEAN_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @static
     * @param {IDEVICE_WITHROOMS_CLEAN_REQ} message DEVICE_WITHROOMS_CLEAN_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WITHROOMS_CLEAN_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_WITHROOMS_CLEAN_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_WITHROOMS_CLEAN_REQ} DEVICE_WITHROOMS_CLEAN_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WITHROOMS_CLEAN_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_WITHROOMS_CLEAN_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.cleanType = reader.uint32();
                    break;
                }
            case 2: {
                    message.ctrlValue = reader.uint32();
                    break;
                }
            case 3: {
                    message.roomNumber = reader.uint32();
                    break;
                }
            case 4: {
                    message.roomIdList = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("cleanType"))
            throw $util.ProtocolError("missing required 'cleanType'", { instance: message });
        if (!message.hasOwnProperty("ctrlValue"))
            throw $util.ProtocolError("missing required 'ctrlValue'", { instance: message });
        if (!message.hasOwnProperty("roomNumber"))
            throw $util.ProtocolError("missing required 'roomNumber'", { instance: message });
        if (!message.hasOwnProperty("roomIdList"))
            throw $util.ProtocolError("missing required 'roomIdList'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_WITHROOMS_CLEAN_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_WITHROOMS_CLEAN_REQ} DEVICE_WITHROOMS_CLEAN_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WITHROOMS_CLEAN_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_WITHROOMS_CLEAN_REQ message.
     * @function verify
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_WITHROOMS_CLEAN_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.cleanType))
            return "cleanType: integer expected";
        if (!$util.isInteger(message.ctrlValue))
            return "ctrlValue: integer expected";
        if (!$util.isInteger(message.roomNumber))
            return "roomNumber: integer expected";
        if (!(message.roomIdList && typeof message.roomIdList.length === "number" || $util.isString(message.roomIdList)))
            return "roomIdList: buffer expected";
        return null;
    };

    /**
     * Creates a DEVICE_WITHROOMS_CLEAN_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_WITHROOMS_CLEAN_REQ} DEVICE_WITHROOMS_CLEAN_REQ
     */
    DEVICE_WITHROOMS_CLEAN_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_WITHROOMS_CLEAN_REQ)
            return object;
        var message = new $root.DEVICE_WITHROOMS_CLEAN_REQ();
        if (object.cleanType != null)
            message.cleanType = object.cleanType >>> 0;
        if (object.ctrlValue != null)
            message.ctrlValue = object.ctrlValue >>> 0;
        if (object.roomNumber != null)
            message.roomNumber = object.roomNumber >>> 0;
        if (object.roomIdList != null)
            if (typeof object.roomIdList === "string")
                $util.base64.decode(object.roomIdList, message.roomIdList = $util.newBuffer($util.base64.length(object.roomIdList)), 0);
            else if (object.roomIdList.length >= 0)
                message.roomIdList = object.roomIdList;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_WITHROOMS_CLEAN_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @static
     * @param {DEVICE_WITHROOMS_CLEAN_REQ} message DEVICE_WITHROOMS_CLEAN_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_WITHROOMS_CLEAN_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cleanType = 0;
            object.ctrlValue = 0;
            object.roomNumber = 0;
            if (options.bytes === String)
                object.roomIdList = "";
            else {
                object.roomIdList = [];
                if (options.bytes !== Array)
                    object.roomIdList = $util.newBuffer(object.roomIdList);
            }
        }
        if (message.cleanType != null && message.hasOwnProperty("cleanType"))
            object.cleanType = message.cleanType;
        if (message.ctrlValue != null && message.hasOwnProperty("ctrlValue"))
            object.ctrlValue = message.ctrlValue;
        if (message.roomNumber != null && message.hasOwnProperty("roomNumber"))
            object.roomNumber = message.roomNumber;
        if (message.roomIdList != null && message.hasOwnProperty("roomIdList"))
            object.roomIdList = options.bytes === String ? $util.base64.encode(message.roomIdList, 0, message.roomIdList.length) : options.bytes === Array ? Array.prototype.slice.call(message.roomIdList) : message.roomIdList;
        return object;
    };

    /**
     * Converts this DEVICE_WITHROOMS_CLEAN_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_WITHROOMS_CLEAN_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_WITHROOMS_CLEAN_REQ
     * @function getTypeUrl
     * @memberof DEVICE_WITHROOMS_CLEAN_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_WITHROOMS_CLEAN_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_WITHROOMS_CLEAN_REQ";
    };

    return DEVICE_WITHROOMS_CLEAN_REQ;
})();

$root.DEVICE_WITHROOMS_CLEAN_RSP = (function() {

    /**
     * Properties of a DEVICE_WITHROOMS_CLEAN_RSP.
     * @exports IDEVICE_WITHROOMS_CLEAN_RSP
     * @interface IDEVICE_WITHROOMS_CLEAN_RSP
     * @property {number} result DEVICE_WITHROOMS_CLEAN_RSP result
     */

    /**
     * Constructs a new DEVICE_WITHROOMS_CLEAN_RSP.
     * @exports DEVICE_WITHROOMS_CLEAN_RSP
     * @classdesc Represents a DEVICE_WITHROOMS_CLEAN_RSP.
     * @implements IDEVICE_WITHROOMS_CLEAN_RSP
     * @constructor
     * @param {IDEVICE_WITHROOMS_CLEAN_RSP=} [properties] Properties to set
     */
    function DEVICE_WITHROOMS_CLEAN_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_WITHROOMS_CLEAN_RSP result.
     * @member {number} result
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @instance
     */
    DEVICE_WITHROOMS_CLEAN_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_WITHROOMS_CLEAN_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @static
     * @param {IDEVICE_WITHROOMS_CLEAN_RSP=} [properties] Properties to set
     * @returns {DEVICE_WITHROOMS_CLEAN_RSP} DEVICE_WITHROOMS_CLEAN_RSP instance
     */
    DEVICE_WITHROOMS_CLEAN_RSP.create = function create(properties) {
        return new DEVICE_WITHROOMS_CLEAN_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_WITHROOMS_CLEAN_RSP message. Does not implicitly {@link DEVICE_WITHROOMS_CLEAN_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @static
     * @param {IDEVICE_WITHROOMS_CLEAN_RSP} message DEVICE_WITHROOMS_CLEAN_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WITHROOMS_CLEAN_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_WITHROOMS_CLEAN_RSP message, length delimited. Does not implicitly {@link DEVICE_WITHROOMS_CLEAN_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @static
     * @param {IDEVICE_WITHROOMS_CLEAN_RSP} message DEVICE_WITHROOMS_CLEAN_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WITHROOMS_CLEAN_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_WITHROOMS_CLEAN_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_WITHROOMS_CLEAN_RSP} DEVICE_WITHROOMS_CLEAN_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WITHROOMS_CLEAN_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_WITHROOMS_CLEAN_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_WITHROOMS_CLEAN_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_WITHROOMS_CLEAN_RSP} DEVICE_WITHROOMS_CLEAN_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WITHROOMS_CLEAN_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_WITHROOMS_CLEAN_RSP message.
     * @function verify
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_WITHROOMS_CLEAN_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_WITHROOMS_CLEAN_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_WITHROOMS_CLEAN_RSP} DEVICE_WITHROOMS_CLEAN_RSP
     */
    DEVICE_WITHROOMS_CLEAN_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_WITHROOMS_CLEAN_RSP)
            return object;
        var message = new $root.DEVICE_WITHROOMS_CLEAN_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_WITHROOMS_CLEAN_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @static
     * @param {DEVICE_WITHROOMS_CLEAN_RSP} message DEVICE_WITHROOMS_CLEAN_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_WITHROOMS_CLEAN_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_WITHROOMS_CLEAN_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_WITHROOMS_CLEAN_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_WITHROOMS_CLEAN_RSP
     * @function getTypeUrl
     * @memberof DEVICE_WITHROOMS_CLEAN_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_WITHROOMS_CLEAN_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_WITHROOMS_CLEAN_RSP";
    };

    return DEVICE_WITHROOMS_CLEAN_RSP;
})();

$root.DEVICE_WLAN_INFO_GETTING_REQ = (function() {

    /**
     * Properties of a DEVICE_WLAN_INFO_GETTING_REQ.
     * @exports IDEVICE_WLAN_INFO_GETTING_REQ
     * @interface IDEVICE_WLAN_INFO_GETTING_REQ
     */

    /**
     * Constructs a new DEVICE_WLAN_INFO_GETTING_REQ.
     * @exports DEVICE_WLAN_INFO_GETTING_REQ
     * @classdesc Represents a DEVICE_WLAN_INFO_GETTING_REQ.
     * @implements IDEVICE_WLAN_INFO_GETTING_REQ
     * @constructor
     * @param {IDEVICE_WLAN_INFO_GETTING_REQ=} [properties] Properties to set
     */
    function DEVICE_WLAN_INFO_GETTING_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_WLAN_INFO_GETTING_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_WLAN_INFO_GETTING_REQ
     * @static
     * @param {IDEVICE_WLAN_INFO_GETTING_REQ=} [properties] Properties to set
     * @returns {DEVICE_WLAN_INFO_GETTING_REQ} DEVICE_WLAN_INFO_GETTING_REQ instance
     */
    DEVICE_WLAN_INFO_GETTING_REQ.create = function create(properties) {
        return new DEVICE_WLAN_INFO_GETTING_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_WLAN_INFO_GETTING_REQ message. Does not implicitly {@link DEVICE_WLAN_INFO_GETTING_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_WLAN_INFO_GETTING_REQ
     * @static
     * @param {IDEVICE_WLAN_INFO_GETTING_REQ} message DEVICE_WLAN_INFO_GETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WLAN_INFO_GETTING_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_WLAN_INFO_GETTING_REQ message, length delimited. Does not implicitly {@link DEVICE_WLAN_INFO_GETTING_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_WLAN_INFO_GETTING_REQ
     * @static
     * @param {IDEVICE_WLAN_INFO_GETTING_REQ} message DEVICE_WLAN_INFO_GETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WLAN_INFO_GETTING_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_WLAN_INFO_GETTING_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_WLAN_INFO_GETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_WLAN_INFO_GETTING_REQ} DEVICE_WLAN_INFO_GETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WLAN_INFO_GETTING_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_WLAN_INFO_GETTING_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_WLAN_INFO_GETTING_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_WLAN_INFO_GETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_WLAN_INFO_GETTING_REQ} DEVICE_WLAN_INFO_GETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WLAN_INFO_GETTING_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_WLAN_INFO_GETTING_REQ message.
     * @function verify
     * @memberof DEVICE_WLAN_INFO_GETTING_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_WLAN_INFO_GETTING_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_WLAN_INFO_GETTING_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_WLAN_INFO_GETTING_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_WLAN_INFO_GETTING_REQ} DEVICE_WLAN_INFO_GETTING_REQ
     */
    DEVICE_WLAN_INFO_GETTING_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_WLAN_INFO_GETTING_REQ)
            return object;
        return new $root.DEVICE_WLAN_INFO_GETTING_REQ();
    };

    /**
     * Creates a plain object from a DEVICE_WLAN_INFO_GETTING_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_WLAN_INFO_GETTING_REQ
     * @static
     * @param {DEVICE_WLAN_INFO_GETTING_REQ} message DEVICE_WLAN_INFO_GETTING_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_WLAN_INFO_GETTING_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_WLAN_INFO_GETTING_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_WLAN_INFO_GETTING_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_WLAN_INFO_GETTING_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_WLAN_INFO_GETTING_REQ
     * @function getTypeUrl
     * @memberof DEVICE_WLAN_INFO_GETTING_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_WLAN_INFO_GETTING_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_WLAN_INFO_GETTING_REQ";
    };

    return DEVICE_WLAN_INFO_GETTING_REQ;
})();

$root.DEVICE_WLAN_INFO_GETTING_RSP = (function() {

    /**
     * Properties of a DEVICE_WLAN_INFO_GETTING_RSP.
     * @exports IDEVICE_WLAN_INFO_GETTING_RSP
     * @interface IDEVICE_WLAN_INFO_GETTING_RSP
     * @property {number} result DEVICE_WLAN_INFO_GETTING_RSP result
     * @property {DEVICE_WLAN_INFO_GETTING_RSP.IBody} body DEVICE_WLAN_INFO_GETTING_RSP body
     */

    /**
     * Constructs a new DEVICE_WLAN_INFO_GETTING_RSP.
     * @exports DEVICE_WLAN_INFO_GETTING_RSP
     * @classdesc Represents a DEVICE_WLAN_INFO_GETTING_RSP.
     * @implements IDEVICE_WLAN_INFO_GETTING_RSP
     * @constructor
     * @param {IDEVICE_WLAN_INFO_GETTING_RSP=} [properties] Properties to set
     */
    function DEVICE_WLAN_INFO_GETTING_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_WLAN_INFO_GETTING_RSP result.
     * @member {number} result
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @instance
     */
    DEVICE_WLAN_INFO_GETTING_RSP.prototype.result = 0;

    /**
     * DEVICE_WLAN_INFO_GETTING_RSP body.
     * @member {DEVICE_WLAN_INFO_GETTING_RSP.IBody} body
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @instance
     */
    DEVICE_WLAN_INFO_GETTING_RSP.prototype.body = null;

    /**
     * Creates a new DEVICE_WLAN_INFO_GETTING_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @static
     * @param {IDEVICE_WLAN_INFO_GETTING_RSP=} [properties] Properties to set
     * @returns {DEVICE_WLAN_INFO_GETTING_RSP} DEVICE_WLAN_INFO_GETTING_RSP instance
     */
    DEVICE_WLAN_INFO_GETTING_RSP.create = function create(properties) {
        return new DEVICE_WLAN_INFO_GETTING_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_WLAN_INFO_GETTING_RSP message. Does not implicitly {@link DEVICE_WLAN_INFO_GETTING_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @static
     * @param {IDEVICE_WLAN_INFO_GETTING_RSP} message DEVICE_WLAN_INFO_GETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WLAN_INFO_GETTING_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        $root.DEVICE_WLAN_INFO_GETTING_RSP.Body.encode(message.body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_WLAN_INFO_GETTING_RSP message, length delimited. Does not implicitly {@link DEVICE_WLAN_INFO_GETTING_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @static
     * @param {IDEVICE_WLAN_INFO_GETTING_RSP} message DEVICE_WLAN_INFO_GETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_WLAN_INFO_GETTING_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_WLAN_INFO_GETTING_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_WLAN_INFO_GETTING_RSP} DEVICE_WLAN_INFO_GETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WLAN_INFO_GETTING_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_WLAN_INFO_GETTING_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.body = $root.DEVICE_WLAN_INFO_GETTING_RSP.Body.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("body"))
            throw $util.ProtocolError("missing required 'body'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_WLAN_INFO_GETTING_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_WLAN_INFO_GETTING_RSP} DEVICE_WLAN_INFO_GETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_WLAN_INFO_GETTING_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_WLAN_INFO_GETTING_RSP message.
     * @function verify
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_WLAN_INFO_GETTING_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        {
            var error = $root.DEVICE_WLAN_INFO_GETTING_RSP.Body.verify(message.body);
            if (error)
                return "body." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_WLAN_INFO_GETTING_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_WLAN_INFO_GETTING_RSP} DEVICE_WLAN_INFO_GETTING_RSP
     */
    DEVICE_WLAN_INFO_GETTING_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_WLAN_INFO_GETTING_RSP)
            return object;
        var message = new $root.DEVICE_WLAN_INFO_GETTING_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.body != null) {
            if (typeof object.body !== "object")
                throw TypeError(".DEVICE_WLAN_INFO_GETTING_RSP.body: object expected");
            message.body = $root.DEVICE_WLAN_INFO_GETTING_RSP.Body.fromObject(object.body);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_WLAN_INFO_GETTING_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @static
     * @param {DEVICE_WLAN_INFO_GETTING_RSP} message DEVICE_WLAN_INFO_GETTING_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_WLAN_INFO_GETTING_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.body = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.body != null && message.hasOwnProperty("body"))
            object.body = $root.DEVICE_WLAN_INFO_GETTING_RSP.Body.toObject(message.body, options);
        return object;
    };

    /**
     * Converts this DEVICE_WLAN_INFO_GETTING_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_WLAN_INFO_GETTING_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_WLAN_INFO_GETTING_RSP
     * @function getTypeUrl
     * @memberof DEVICE_WLAN_INFO_GETTING_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_WLAN_INFO_GETTING_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_WLAN_INFO_GETTING_RSP";
    };

    DEVICE_WLAN_INFO_GETTING_RSP.Body = (function() {

        /**
         * Properties of a Body.
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP
         * @interface IBody
         * @property {string} ipv4 Body ipv4
         * @property {string} ssid Body ssid
         * @property {number} port Body port
         * @property {string} mask Body mask
         * @property {string} mac Body mac
         */

        /**
         * Constructs a new Body.
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP
         * @classdesc Represents a Body.
         * @implements IBody
         * @constructor
         * @param {DEVICE_WLAN_INFO_GETTING_RSP.IBody=} [properties] Properties to set
         */
        function Body(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Body ipv4.
         * @member {string} ipv4
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @instance
         */
        Body.prototype.ipv4 = "";

        /**
         * Body ssid.
         * @member {string} ssid
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @instance
         */
        Body.prototype.ssid = "";

        /**
         * Body port.
         * @member {number} port
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @instance
         */
        Body.prototype.port = 0;

        /**
         * Body mask.
         * @member {string} mask
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @instance
         */
        Body.prototype.mask = "";

        /**
         * Body mac.
         * @member {string} mac
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @instance
         */
        Body.prototype.mac = "";

        /**
         * Creates a new Body instance using the specified properties.
         * @function create
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @static
         * @param {DEVICE_WLAN_INFO_GETTING_RSP.IBody=} [properties] Properties to set
         * @returns {DEVICE_WLAN_INFO_GETTING_RSP.Body} Body instance
         */
        Body.create = function create(properties) {
            return new Body(properties);
        };

        /**
         * Encodes the specified Body message. Does not implicitly {@link DEVICE_WLAN_INFO_GETTING_RSP.Body.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @static
         * @param {DEVICE_WLAN_INFO_GETTING_RSP.IBody} message Body message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Body.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ipv4);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.ssid);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.port);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.mask);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.mac);
            return writer;
        };

        /**
         * Encodes the specified Body message, length delimited. Does not implicitly {@link DEVICE_WLAN_INFO_GETTING_RSP.Body.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @static
         * @param {DEVICE_WLAN_INFO_GETTING_RSP.IBody} message Body message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Body.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Body message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_WLAN_INFO_GETTING_RSP.Body} Body
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Body.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_WLAN_INFO_GETTING_RSP.Body();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.ipv4 = reader.string();
                        break;
                    }
                case 2: {
                        message.ssid = reader.string();
                        break;
                    }
                case 3: {
                        message.port = reader.uint32();
                        break;
                    }
                case 4: {
                        message.mask = reader.string();
                        break;
                    }
                case 5: {
                        message.mac = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("ipv4"))
                throw $util.ProtocolError("missing required 'ipv4'", { instance: message });
            if (!message.hasOwnProperty("ssid"))
                throw $util.ProtocolError("missing required 'ssid'", { instance: message });
            if (!message.hasOwnProperty("port"))
                throw $util.ProtocolError("missing required 'port'", { instance: message });
            if (!message.hasOwnProperty("mask"))
                throw $util.ProtocolError("missing required 'mask'", { instance: message });
            if (!message.hasOwnProperty("mac"))
                throw $util.ProtocolError("missing required 'mac'", { instance: message });
            return message;
        };

        /**
         * Decodes a Body message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_WLAN_INFO_GETTING_RSP.Body} Body
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Body.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Body message.
         * @function verify
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Body.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.ipv4))
                return "ipv4: string expected";
            if (!$util.isString(message.ssid))
                return "ssid: string expected";
            if (!$util.isInteger(message.port))
                return "port: integer expected";
            if (!$util.isString(message.mask))
                return "mask: string expected";
            if (!$util.isString(message.mac))
                return "mac: string expected";
            return null;
        };

        /**
         * Creates a Body message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_WLAN_INFO_GETTING_RSP.Body} Body
         */
        Body.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_WLAN_INFO_GETTING_RSP.Body)
                return object;
            var message = new $root.DEVICE_WLAN_INFO_GETTING_RSP.Body();
            if (object.ipv4 != null)
                message.ipv4 = String(object.ipv4);
            if (object.ssid != null)
                message.ssid = String(object.ssid);
            if (object.port != null)
                message.port = object.port >>> 0;
            if (object.mask != null)
                message.mask = String(object.mask);
            if (object.mac != null)
                message.mac = String(object.mac);
            return message;
        };

        /**
         * Creates a plain object from a Body message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @static
         * @param {DEVICE_WLAN_INFO_GETTING_RSP.Body} message Body
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Body.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ipv4 = "";
                object.ssid = "";
                object.port = 0;
                object.mask = "";
                object.mac = "";
            }
            if (message.ipv4 != null && message.hasOwnProperty("ipv4"))
                object.ipv4 = message.ipv4;
            if (message.ssid != null && message.hasOwnProperty("ssid"))
                object.ssid = message.ssid;
            if (message.port != null && message.hasOwnProperty("port"))
                object.port = message.port;
            if (message.mask != null && message.hasOwnProperty("mask"))
                object.mask = message.mask;
            if (message.mac != null && message.hasOwnProperty("mac"))
                object.mac = message.mac;
            return object;
        };

        /**
         * Converts this Body to JSON.
         * @function toJSON
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Body.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Body
         * @function getTypeUrl
         * @memberof DEVICE_WLAN_INFO_GETTING_RSP.Body
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Body.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_WLAN_INFO_GETTING_RSP.Body";
        };

        return Body;
    })();

    return DEVICE_WLAN_INFO_GETTING_RSP;
})();

$root.DEVICE_MAPID_SELECT_MAP_PLAN_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_SELECT_MAP_PLAN_REQ.
     * @exports IDEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @interface IDEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @property {number} mapHeadId DEVICE_MAPID_SELECT_MAP_PLAN_REQ mapHeadId
     * @property {number|null} [planId] DEVICE_MAPID_SELECT_MAP_PLAN_REQ planId
     * @property {number} mode DEVICE_MAPID_SELECT_MAP_PLAN_REQ mode
     */

    /**
     * Constructs a new DEVICE_MAPID_SELECT_MAP_PLAN_REQ.
     * @exports DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @classdesc Represents a DEVICE_MAPID_SELECT_MAP_PLAN_REQ.
     * @implements IDEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @constructor
     * @param {IDEVICE_MAPID_SELECT_MAP_PLAN_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_SELECT_MAP_PLAN_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SELECT_MAP_PLAN_REQ mapHeadId.
     * @member {number} mapHeadId
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @instance
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.prototype.mapHeadId = 0;

    /**
     * DEVICE_MAPID_SELECT_MAP_PLAN_REQ planId.
     * @member {number} planId
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @instance
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.prototype.planId = 0;

    /**
     * DEVICE_MAPID_SELECT_MAP_PLAN_REQ mode.
     * @member {number} mode
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @instance
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.prototype.mode = 0;

    /**
     * Creates a new DEVICE_MAPID_SELECT_MAP_PLAN_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @static
     * @param {IDEVICE_MAPID_SELECT_MAP_PLAN_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SELECT_MAP_PLAN_REQ} DEVICE_MAPID_SELECT_MAP_PLAN_REQ instance
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.create = function create(properties) {
        return new DEVICE_MAPID_SELECT_MAP_PLAN_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SELECT_MAP_PLAN_REQ message. Does not implicitly {@link DEVICE_MAPID_SELECT_MAP_PLAN_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @static
     * @param {IDEVICE_MAPID_SELECT_MAP_PLAN_REQ} message DEVICE_MAPID_SELECT_MAP_PLAN_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mapHeadId);
        if (message.planId != null && Object.hasOwnProperty.call(message, "planId"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.planId);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.mode);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SELECT_MAP_PLAN_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_SELECT_MAP_PLAN_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @static
     * @param {IDEVICE_MAPID_SELECT_MAP_PLAN_REQ} message DEVICE_MAPID_SELECT_MAP_PLAN_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SELECT_MAP_PLAN_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SELECT_MAP_PLAN_REQ} DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SELECT_MAP_PLAN_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mapHeadId = reader.uint32();
                    break;
                }
            case 2: {
                    message.planId = reader.uint32();
                    break;
                }
            case 3: {
                    message.mode = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mapHeadId"))
            throw $util.ProtocolError("missing required 'mapHeadId'", { instance: message });
        if (!message.hasOwnProperty("mode"))
            throw $util.ProtocolError("missing required 'mode'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SELECT_MAP_PLAN_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SELECT_MAP_PLAN_REQ} DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SELECT_MAP_PLAN_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mapHeadId))
            return "mapHeadId: integer expected";
        if (message.planId != null && message.hasOwnProperty("planId"))
            if (!$util.isInteger(message.planId))
                return "planId: integer expected";
        if (!$util.isInteger(message.mode))
            return "mode: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SELECT_MAP_PLAN_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SELECT_MAP_PLAN_REQ} DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SELECT_MAP_PLAN_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_SELECT_MAP_PLAN_REQ();
        if (object.mapHeadId != null)
            message.mapHeadId = object.mapHeadId >>> 0;
        if (object.planId != null)
            message.planId = object.planId >>> 0;
        if (object.mode != null)
            message.mode = object.mode >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SELECT_MAP_PLAN_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @static
     * @param {DEVICE_MAPID_SELECT_MAP_PLAN_REQ} message DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.mapHeadId = 0;
            object.planId = 0;
            object.mode = 0;
        }
        if (message.mapHeadId != null && message.hasOwnProperty("mapHeadId"))
            object.mapHeadId = message.mapHeadId;
        if (message.planId != null && message.hasOwnProperty("planId"))
            object.planId = message.planId;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = message.mode;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SELECT_MAP_PLAN_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SELECT_MAP_PLAN_REQ";
    };

    return DEVICE_MAPID_SELECT_MAP_PLAN_REQ;
})();

$root.DEVICE_MAPID_SELECT_MAP_PLAN_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_SELECT_MAP_PLAN_RSP.
     * @exports IDEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @interface IDEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @property {number} result DEVICE_MAPID_SELECT_MAP_PLAN_RSP result
     * @property {number} unk1 DEVICE_MAPID_SELECT_MAP_PLAN_RSP unk1
     */

    /**
     * Constructs a new DEVICE_MAPID_SELECT_MAP_PLAN_RSP.
     * @exports DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @classdesc Represents a DEVICE_MAPID_SELECT_MAP_PLAN_RSP.
     * @implements IDEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @constructor
     * @param {IDEVICE_MAPID_SELECT_MAP_PLAN_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_SELECT_MAP_PLAN_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SELECT_MAP_PLAN_RSP result.
     * @member {number} result
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @instance
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.prototype.result = 0;

    /**
     * DEVICE_MAPID_SELECT_MAP_PLAN_RSP unk1.
     * @member {number} unk1
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @instance
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.prototype.unk1 = 0;

    /**
     * Creates a new DEVICE_MAPID_SELECT_MAP_PLAN_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @static
     * @param {IDEVICE_MAPID_SELECT_MAP_PLAN_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SELECT_MAP_PLAN_RSP} DEVICE_MAPID_SELECT_MAP_PLAN_RSP instance
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.create = function create(properties) {
        return new DEVICE_MAPID_SELECT_MAP_PLAN_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SELECT_MAP_PLAN_RSP message. Does not implicitly {@link DEVICE_MAPID_SELECT_MAP_PLAN_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @static
     * @param {IDEVICE_MAPID_SELECT_MAP_PLAN_RSP} message DEVICE_MAPID_SELECT_MAP_PLAN_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.unk1);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SELECT_MAP_PLAN_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_SELECT_MAP_PLAN_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @static
     * @param {IDEVICE_MAPID_SELECT_MAP_PLAN_RSP} message DEVICE_MAPID_SELECT_MAP_PLAN_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SELECT_MAP_PLAN_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SELECT_MAP_PLAN_RSP} DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SELECT_MAP_PLAN_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.unk1 = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("unk1"))
            throw $util.ProtocolError("missing required 'unk1'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SELECT_MAP_PLAN_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SELECT_MAP_PLAN_RSP} DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SELECT_MAP_PLAN_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        if (!$util.isInteger(message.unk1))
            return "unk1: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SELECT_MAP_PLAN_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SELECT_MAP_PLAN_RSP} DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SELECT_MAP_PLAN_RSP)
            return object;
        var message = new $root.DEVICE_MAPID_SELECT_MAP_PLAN_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.unk1 != null)
            message.unk1 = object.unk1 >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SELECT_MAP_PLAN_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @static
     * @param {DEVICE_MAPID_SELECT_MAP_PLAN_RSP} message DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.unk1 = 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.unk1 != null && message.hasOwnProperty("unk1"))
            object.unk1 = message.unk1;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SELECT_MAP_PLAN_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SELECT_MAP_PLAN_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SELECT_MAP_PLAN_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SELECT_MAP_PLAN_RSP";
    };

    return DEVICE_MAPID_SELECT_MAP_PLAN_RSP;
})();

$root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_PLAN_PARAMS_REQ.
     * @exports IDEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @interface IDEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @property {number} mapHeadId DEVICE_MAPID_SET_PLAN_PARAMS_REQ mapHeadId
     * @property {number} planId DEVICE_MAPID_SET_PLAN_PARAMS_REQ planId
     * @property {string} mapName DEVICE_MAPID_SET_PLAN_PARAMS_REQ mapName
     * @property {string} planName DEVICE_MAPID_SET_PLAN_PARAMS_REQ planName
     * @property {Array.<DEVICE_MAPID_SET_PLAN_PARAMS_REQ.IRoom>|null} [roomList] DEVICE_MAPID_SET_PLAN_PARAMS_REQ roomList
     * @property {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} areaInfo DEVICE_MAPID_SET_PLAN_PARAMS_REQ areaInfo
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_PLAN_PARAMS_REQ.
     * @exports DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @classdesc Represents a DEVICE_MAPID_SET_PLAN_PARAMS_REQ.
     * @implements IDEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @constructor
     * @param {IDEVICE_MAPID_SET_PLAN_PARAMS_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_PLAN_PARAMS_REQ(properties) {
        this.roomList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_PLAN_PARAMS_REQ mapHeadId.
     * @member {number} mapHeadId
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @instance
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.prototype.mapHeadId = 0;

    /**
     * DEVICE_MAPID_SET_PLAN_PARAMS_REQ planId.
     * @member {number} planId
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @instance
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.prototype.planId = 0;

    /**
     * DEVICE_MAPID_SET_PLAN_PARAMS_REQ mapName.
     * @member {string} mapName
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @instance
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.prototype.mapName = "";

    /**
     * DEVICE_MAPID_SET_PLAN_PARAMS_REQ planName.
     * @member {string} planName
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @instance
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.prototype.planName = "";

    /**
     * DEVICE_MAPID_SET_PLAN_PARAMS_REQ roomList.
     * @member {Array.<DEVICE_MAPID_SET_PLAN_PARAMS_REQ.IRoom>} roomList
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @instance
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.prototype.roomList = $util.emptyArray;

    /**
     * DEVICE_MAPID_SET_PLAN_PARAMS_REQ areaInfo.
     * @member {IDEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ} areaInfo
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @instance
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.prototype.areaInfo = null;

    /**
     * Creates a new DEVICE_MAPID_SET_PLAN_PARAMS_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_PLAN_PARAMS_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_REQ} DEVICE_MAPID_SET_PLAN_PARAMS_REQ instance
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.create = function create(properties) {
        return new DEVICE_MAPID_SET_PLAN_PARAMS_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_PLAN_PARAMS_REQ message. Does not implicitly {@link DEVICE_MAPID_SET_PLAN_PARAMS_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_PLAN_PARAMS_REQ} message DEVICE_MAPID_SET_PLAN_PARAMS_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mapHeadId);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.planId);
        writer.uint32(/* id 3, wireType 2 =*/26).string(message.mapName);
        writer.uint32(/* id 4, wireType 2 =*/34).string(message.planName);
        if (message.roomList != null && message.roomList.length)
            for (var i = 0; i < message.roomList.length; ++i)
                $root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room.encode(message.roomList[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.encode(message.areaInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_PLAN_PARAMS_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_PLAN_PARAMS_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_PLAN_PARAMS_REQ} message DEVICE_MAPID_SET_PLAN_PARAMS_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_PLAN_PARAMS_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_REQ} DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mapHeadId = reader.uint32();
                    break;
                }
            case 2: {
                    message.planId = reader.uint32();
                    break;
                }
            case 3: {
                    message.mapName = reader.string();
                    break;
                }
            case 4: {
                    message.planName = reader.string();
                    break;
                }
            case 5: {
                    if (!(message.roomList && message.roomList.length))
                        message.roomList = [];
                    message.roomList.push($root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room.decode(reader, reader.uint32()));
                    break;
                }
            case 6: {
                    message.areaInfo = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mapHeadId"))
            throw $util.ProtocolError("missing required 'mapHeadId'", { instance: message });
        if (!message.hasOwnProperty("planId"))
            throw $util.ProtocolError("missing required 'planId'", { instance: message });
        if (!message.hasOwnProperty("mapName"))
            throw $util.ProtocolError("missing required 'mapName'", { instance: message });
        if (!message.hasOwnProperty("planName"))
            throw $util.ProtocolError("missing required 'planName'", { instance: message });
        if (!message.hasOwnProperty("areaInfo"))
            throw $util.ProtocolError("missing required 'areaInfo'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_PLAN_PARAMS_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_REQ} DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_PLAN_PARAMS_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mapHeadId))
            return "mapHeadId: integer expected";
        if (!$util.isInteger(message.planId))
            return "planId: integer expected";
        if (!$util.isString(message.mapName))
            return "mapName: string expected";
        if (!$util.isString(message.planName))
            return "planName: string expected";
        if (message.roomList != null && message.hasOwnProperty("roomList")) {
            if (!Array.isArray(message.roomList))
                return "roomList: array expected";
            for (var i = 0; i < message.roomList.length; ++i) {
                var error = $root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room.verify(message.roomList[i]);
                if (error)
                    return "roomList." + error;
            }
        }
        {
            var error = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.verify(message.areaInfo);
            if (error)
                return "areaInfo." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_PLAN_PARAMS_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_REQ} DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ();
        if (object.mapHeadId != null)
            message.mapHeadId = object.mapHeadId >>> 0;
        if (object.planId != null)
            message.planId = object.planId >>> 0;
        if (object.mapName != null)
            message.mapName = String(object.mapName);
        if (object.planName != null)
            message.planName = String(object.planName);
        if (object.roomList) {
            if (!Array.isArray(object.roomList))
                throw TypeError(".DEVICE_MAPID_SET_PLAN_PARAMS_REQ.roomList: array expected");
            message.roomList = [];
            for (var i = 0; i < object.roomList.length; ++i) {
                if (typeof object.roomList[i] !== "object")
                    throw TypeError(".DEVICE_MAPID_SET_PLAN_PARAMS_REQ.roomList: object expected");
                message.roomList[i] = $root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room.fromObject(object.roomList[i]);
            }
        }
        if (object.areaInfo != null) {
            if (typeof object.areaInfo !== "object")
                throw TypeError(".DEVICE_MAPID_SET_PLAN_PARAMS_REQ.areaInfo: object expected");
            message.areaInfo = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.fromObject(object.areaInfo);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_PLAN_PARAMS_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @static
     * @param {DEVICE_MAPID_SET_PLAN_PARAMS_REQ} message DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.roomList = [];
        if (options.defaults) {
            object.mapHeadId = 0;
            object.planId = 0;
            object.mapName = "";
            object.planName = "";
            object.areaInfo = null;
        }
        if (message.mapHeadId != null && message.hasOwnProperty("mapHeadId"))
            object.mapHeadId = message.mapHeadId;
        if (message.planId != null && message.hasOwnProperty("planId"))
            object.planId = message.planId;
        if (message.mapName != null && message.hasOwnProperty("mapName"))
            object.mapName = message.mapName;
        if (message.planName != null && message.hasOwnProperty("planName"))
            object.planName = message.planName;
        if (message.roomList && message.roomList.length) {
            object.roomList = [];
            for (var j = 0; j < message.roomList.length; ++j)
                object.roomList[j] = $root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room.toObject(message.roomList[j], options);
        }
        if (message.areaInfo != null && message.hasOwnProperty("areaInfo"))
            object.areaInfo = $root.DEVICE_MAPID_SET_AREA_CLEAN_INFO_REQ.toObject(message.areaInfo, options);
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_PLAN_PARAMS_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_PLAN_PARAMS_REQ";
    };

    DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room = (function() {

        /**
         * Properties of a Room.
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
         * @interface IRoom
         * @property {number} roomId Room roomId
         * @property {string} roomName Room roomName
         * @property {boolean} enable Room enable
         */

        /**
         * Constructs a new Room.
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ
         * @classdesc Represents a Room.
         * @implements IRoom
         * @constructor
         * @param {DEVICE_MAPID_SET_PLAN_PARAMS_REQ.IRoom=} [properties] Properties to set
         */
        function Room(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Room roomId.
         * @member {number} roomId
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @instance
         */
        Room.prototype.roomId = 0;

        /**
         * Room roomName.
         * @member {string} roomName
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @instance
         */
        Room.prototype.roomName = "";

        /**
         * Room enable.
         * @member {boolean} enable
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @instance
         */
        Room.prototype.enable = false;

        /**
         * Creates a new Room instance using the specified properties.
         * @function create
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @static
         * @param {DEVICE_MAPID_SET_PLAN_PARAMS_REQ.IRoom=} [properties] Properties to set
         * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room} Room instance
         */
        Room.create = function create(properties) {
            return new Room(properties);
        };

        /**
         * Encodes the specified Room message. Does not implicitly {@link DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @static
         * @param {DEVICE_MAPID_SET_PLAN_PARAMS_REQ.IRoom} message Room message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Room.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.roomId);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.roomName);
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.enable);
            return writer;
        };

        /**
         * Encodes the specified Room message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @static
         * @param {DEVICE_MAPID_SET_PLAN_PARAMS_REQ.IRoom} message Room message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Room.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Room message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room} Room
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Room.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.roomId = reader.uint32();
                        break;
                    }
                case 3: {
                        message.roomName = reader.string();
                        break;
                    }
                case 4: {
                        message.enable = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("roomId"))
                throw $util.ProtocolError("missing required 'roomId'", { instance: message });
            if (!message.hasOwnProperty("roomName"))
                throw $util.ProtocolError("missing required 'roomName'", { instance: message });
            if (!message.hasOwnProperty("enable"))
                throw $util.ProtocolError("missing required 'enable'", { instance: message });
            return message;
        };

        /**
         * Decodes a Room message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room} Room
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Room.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Room message.
         * @function verify
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Room.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.roomId))
                return "roomId: integer expected";
            if (!$util.isString(message.roomName))
                return "roomName: string expected";
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
            return null;
        };

        /**
         * Creates a Room message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room} Room
         */
        Room.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room)
                return object;
            var message = new $root.DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room();
            if (object.roomId != null)
                message.roomId = object.roomId >>> 0;
            if (object.roomName != null)
                message.roomName = String(object.roomName);
            if (object.enable != null)
                message.enable = Boolean(object.enable);
            return message;
        };

        /**
         * Creates a plain object from a Room message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @static
         * @param {DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room} message Room
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Room.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomId = 0;
                object.roomName = "";
                object.enable = false;
            }
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.roomName != null && message.hasOwnProperty("roomName"))
                object.roomName = message.roomName;
            if (message.enable != null && message.hasOwnProperty("enable"))
                object.enable = message.enable;
            return object;
        };

        /**
         * Converts this Room to JSON.
         * @function toJSON
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Room.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Room
         * @function getTypeUrl
         * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Room.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_MAPID_SET_PLAN_PARAMS_REQ.Room";
        };

        return Room;
    })();

    return DEVICE_MAPID_SET_PLAN_PARAMS_REQ;
})();

$root.DEVICE_MAPID_SET_PLAN_PARAMS_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_PLAN_PARAMS_RSP.
     * @exports IDEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @interface IDEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @property {number} result DEVICE_MAPID_SET_PLAN_PARAMS_RSP result
     * @property {number} unk1 DEVICE_MAPID_SET_PLAN_PARAMS_RSP unk1
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_PLAN_PARAMS_RSP.
     * @exports DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @classdesc Represents a DEVICE_MAPID_SET_PLAN_PARAMS_RSP.
     * @implements IDEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @constructor
     * @param {IDEVICE_MAPID_SET_PLAN_PARAMS_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_PLAN_PARAMS_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_PLAN_PARAMS_RSP result.
     * @member {number} result
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @instance
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.prototype.result = 0;

    /**
     * DEVICE_MAPID_SET_PLAN_PARAMS_RSP unk1.
     * @member {number} unk1
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @instance
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.prototype.unk1 = 0;

    /**
     * Creates a new DEVICE_MAPID_SET_PLAN_PARAMS_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_PLAN_PARAMS_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_RSP} DEVICE_MAPID_SET_PLAN_PARAMS_RSP instance
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.create = function create(properties) {
        return new DEVICE_MAPID_SET_PLAN_PARAMS_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_PLAN_PARAMS_RSP message. Does not implicitly {@link DEVICE_MAPID_SET_PLAN_PARAMS_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_PLAN_PARAMS_RSP} message DEVICE_MAPID_SET_PLAN_PARAMS_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.unk1);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_PLAN_PARAMS_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_PLAN_PARAMS_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_PLAN_PARAMS_RSP} message DEVICE_MAPID_SET_PLAN_PARAMS_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_PLAN_PARAMS_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_RSP} DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_PLAN_PARAMS_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.unk1 = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("unk1"))
            throw $util.ProtocolError("missing required 'unk1'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_PLAN_PARAMS_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_RSP} DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_PLAN_PARAMS_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        if (!$util.isInteger(message.unk1))
            return "unk1: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_PLAN_PARAMS_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_PLAN_PARAMS_RSP} DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_PLAN_PARAMS_RSP)
            return object;
        var message = new $root.DEVICE_MAPID_SET_PLAN_PARAMS_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.unk1 != null)
            message.unk1 = object.unk1 >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_PLAN_PARAMS_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @static
     * @param {DEVICE_MAPID_SET_PLAN_PARAMS_RSP} message DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.unk1 = 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.unk1 != null && message.hasOwnProperty("unk1"))
            object.unk1 = message.unk1;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_PLAN_PARAMS_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_PLAN_PARAMS_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_PLAN_PARAMS_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_PLAN_PARAMS_RSP";
    };

    return DEVICE_MAPID_SET_PLAN_PARAMS_RSP;
})();

$root.DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.
     * @exports IDEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @interface IDEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @property {number} mapHeadId DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ mapHeadId
     * @property {number} type DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ type
     * @property {number} dataLen DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ dataLen
     * @property {Uint8Array} data DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ data
     * @property {number} roomId DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ roomId
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.
     * @exports DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @classdesc Represents a DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.
     * @implements IDEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @constructor
     * @param {IDEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ mapHeadId.
     * @member {number} mapHeadId
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.prototype.mapHeadId = 0;

    /**
     * DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ type.
     * @member {number} type
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.prototype.type = 0;

    /**
     * DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ dataLen.
     * @member {number} dataLen
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.prototype.dataLen = 0;

    /**
     * DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ data.
     * @member {Uint8Array} data
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.prototype.data = $util.newBuffer([]);

    /**
     * DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ roomId.
     * @member {number} roomId
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.prototype.roomId = 0;

    /**
     * Creates a new DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ} DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ instance
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.create = function create(properties) {
        return new DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ message. Does not implicitly {@link DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ} message DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mapHeadId);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.dataLen);
        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.data);
        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.roomId);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ} message DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ} DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mapHeadId = reader.uint32();
                    break;
                }
            case 2: {
                    message.type = reader.uint32();
                    break;
                }
            case 3: {
                    message.dataLen = reader.uint32();
                    break;
                }
            case 4: {
                    message.data = reader.bytes();
                    break;
                }
            case 5: {
                    message.roomId = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mapHeadId"))
            throw $util.ProtocolError("missing required 'mapHeadId'", { instance: message });
        if (!message.hasOwnProperty("type"))
            throw $util.ProtocolError("missing required 'type'", { instance: message });
        if (!message.hasOwnProperty("dataLen"))
            throw $util.ProtocolError("missing required 'dataLen'", { instance: message });
        if (!message.hasOwnProperty("data"))
            throw $util.ProtocolError("missing required 'data'", { instance: message });
        if (!message.hasOwnProperty("roomId"))
            throw $util.ProtocolError("missing required 'roomId'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ} DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mapHeadId))
            return "mapHeadId: integer expected";
        if (!$util.isInteger(message.type))
            return "type: integer expected";
        if (!$util.isInteger(message.dataLen))
            return "dataLen: integer expected";
        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
            return "data: buffer expected";
        if (!$util.isInteger(message.roomId))
            return "roomId: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ} DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ();
        if (object.mapHeadId != null)
            message.mapHeadId = object.mapHeadId >>> 0;
        if (object.type != null)
            message.type = object.type >>> 0;
        if (object.dataLen != null)
            message.dataLen = object.dataLen >>> 0;
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length >= 0)
                message.data = object.data;
        if (object.roomId != null)
            message.roomId = object.roomId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @static
     * @param {DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ} message DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.mapHeadId = 0;
            object.type = 0;
            object.dataLen = 0;
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
            object.roomId = 0;
        }
        if (message.mapHeadId != null && message.hasOwnProperty("mapHeadId"))
            object.mapHeadId = message.mapHeadId;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.dataLen != null && message.hasOwnProperty("dataLen"))
            object.dataLen = message.dataLen;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            object.roomId = message.roomId;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ";
    };

    return DEVICE_MAPID_SET_ARRANGEROOM_INFO_REQ;
})();

$root.DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.
     * @exports IDEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @interface IDEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @property {number} result DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP result
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.
     * @exports DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @classdesc Represents a DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.
     * @implements IDEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @constructor
     * @param {IDEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP result.
     * @member {number} result
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @instance
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP} DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP instance
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.create = function create(properties) {
        return new DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP message. Does not implicitly {@link DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP} message DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP} message DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP} DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP} DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP} DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP)
            return object;
        var message = new $root.DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @static
     * @param {DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP} message DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP";
    };

    return DEVICE_MAPID_SET_ARRANGEROOM_INFO_RSP;
})();

$root.DEVICE_VIRWALL_ALL_LIST_SETTING_RSP = (function() {

    /**
     * Properties of a DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.
     * @exports IDEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @interface IDEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @property {number} result DEVICE_VIRWALL_ALL_LIST_SETTING_RSP result
     * @property {string} unk1 DEVICE_VIRWALL_ALL_LIST_SETTING_RSP unk1
     * @property {number} unk2 DEVICE_VIRWALL_ALL_LIST_SETTING_RSP unk2
     */

    /**
     * Constructs a new DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.
     * @exports DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @classdesc Represents a DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.
     * @implements IDEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @constructor
     * @param {IDEVICE_VIRWALL_ALL_LIST_SETTING_RSP=} [properties] Properties to set
     */
    function DEVICE_VIRWALL_ALL_LIST_SETTING_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_VIRWALL_ALL_LIST_SETTING_RSP result.
     * @member {number} result
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @instance
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.prototype.result = 0;

    /**
     * DEVICE_VIRWALL_ALL_LIST_SETTING_RSP unk1.
     * @member {string} unk1
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @instance
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.prototype.unk1 = "";

    /**
     * DEVICE_VIRWALL_ALL_LIST_SETTING_RSP unk2.
     * @member {number} unk2
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @instance
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.prototype.unk2 = 0;

    /**
     * Creates a new DEVICE_VIRWALL_ALL_LIST_SETTING_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @static
     * @param {IDEVICE_VIRWALL_ALL_LIST_SETTING_RSP=} [properties] Properties to set
     * @returns {DEVICE_VIRWALL_ALL_LIST_SETTING_RSP} DEVICE_VIRWALL_ALL_LIST_SETTING_RSP instance
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.create = function create(properties) {
        return new DEVICE_VIRWALL_ALL_LIST_SETTING_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_VIRWALL_ALL_LIST_SETTING_RSP message. Does not implicitly {@link DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @static
     * @param {IDEVICE_VIRWALL_ALL_LIST_SETTING_RSP} message DEVICE_VIRWALL_ALL_LIST_SETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        writer.uint32(/* id 2, wireType 2 =*/18).string(message.unk1);
        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.unk2);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_VIRWALL_ALL_LIST_SETTING_RSP message, length delimited. Does not implicitly {@link DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @static
     * @param {IDEVICE_VIRWALL_ALL_LIST_SETTING_RSP} message DEVICE_VIRWALL_ALL_LIST_SETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_VIRWALL_ALL_LIST_SETTING_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_VIRWALL_ALL_LIST_SETTING_RSP} DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_VIRWALL_ALL_LIST_SETTING_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 2: {
                    message.unk1 = reader.string();
                    break;
                }
            case 3: {
                    message.unk2 = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("unk1"))
            throw $util.ProtocolError("missing required 'unk1'", { instance: message });
        if (!message.hasOwnProperty("unk2"))
            throw $util.ProtocolError("missing required 'unk2'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_VIRWALL_ALL_LIST_SETTING_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_VIRWALL_ALL_LIST_SETTING_RSP} DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_VIRWALL_ALL_LIST_SETTING_RSP message.
     * @function verify
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        if (!$util.isString(message.unk1))
            return "unk1: string expected";
        if (!$util.isInteger(message.unk2))
            return "unk2: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_VIRWALL_ALL_LIST_SETTING_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_VIRWALL_ALL_LIST_SETTING_RSP} DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_VIRWALL_ALL_LIST_SETTING_RSP)
            return object;
        var message = new $root.DEVICE_VIRWALL_ALL_LIST_SETTING_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.unk1 != null)
            message.unk1 = String(object.unk1);
        if (object.unk2 != null)
            message.unk2 = object.unk2 | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_VIRWALL_ALL_LIST_SETTING_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @static
     * @param {DEVICE_VIRWALL_ALL_LIST_SETTING_RSP} message DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.unk1 = "";
            object.unk2 = 0;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.unk1 != null && message.hasOwnProperty("unk1"))
            object.unk1 = message.unk1;
        if (message.unk2 != null && message.hasOwnProperty("unk2"))
            object.unk2 = message.unk2;
        return object;
    };

    /**
     * Converts this DEVICE_VIRWALL_ALL_LIST_SETTING_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @function getTypeUrl
     * @memberof DEVICE_VIRWALL_ALL_LIST_SETTING_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_VIRWALL_ALL_LIST_SETTING_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_VIRWALL_ALL_LIST_SETTING_RSP";
    };

    return DEVICE_VIRWALL_ALL_LIST_SETTING_RSP;
})();

$root.USER_SET_DEVICE_QUIETHOURS_REQ = (function() {

    /**
     * Properties of a USER_SET_DEVICE_QUIETHOURS_REQ.
     * @exports IUSER_SET_DEVICE_QUIETHOURS_REQ
     * @interface IUSER_SET_DEVICE_QUIETHOURS_REQ
     * @property {boolean} isOpen USER_SET_DEVICE_QUIETHOURS_REQ isOpen
     * @property {number} beginTime USER_SET_DEVICE_QUIETHOURS_REQ beginTime
     * @property {number} endTime USER_SET_DEVICE_QUIETHOURS_REQ endTime
     */

    /**
     * Constructs a new USER_SET_DEVICE_QUIETHOURS_REQ.
     * @exports USER_SET_DEVICE_QUIETHOURS_REQ
     * @classdesc Represents a USER_SET_DEVICE_QUIETHOURS_REQ.
     * @implements IUSER_SET_DEVICE_QUIETHOURS_REQ
     * @constructor
     * @param {IUSER_SET_DEVICE_QUIETHOURS_REQ=} [properties] Properties to set
     */
    function USER_SET_DEVICE_QUIETHOURS_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * USER_SET_DEVICE_QUIETHOURS_REQ isOpen.
     * @member {boolean} isOpen
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @instance
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.prototype.isOpen = false;

    /**
     * USER_SET_DEVICE_QUIETHOURS_REQ beginTime.
     * @member {number} beginTime
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @instance
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.prototype.beginTime = 0;

    /**
     * USER_SET_DEVICE_QUIETHOURS_REQ endTime.
     * @member {number} endTime
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @instance
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.prototype.endTime = 0;

    /**
     * Creates a new USER_SET_DEVICE_QUIETHOURS_REQ instance using the specified properties.
     * @function create
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {IUSER_SET_DEVICE_QUIETHOURS_REQ=} [properties] Properties to set
     * @returns {USER_SET_DEVICE_QUIETHOURS_REQ} USER_SET_DEVICE_QUIETHOURS_REQ instance
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.create = function create(properties) {
        return new USER_SET_DEVICE_QUIETHOURS_REQ(properties);
    };

    /**
     * Encodes the specified USER_SET_DEVICE_QUIETHOURS_REQ message. Does not implicitly {@link USER_SET_DEVICE_QUIETHOURS_REQ.verify|verify} messages.
     * @function encode
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {IUSER_SET_DEVICE_QUIETHOURS_REQ} message USER_SET_DEVICE_QUIETHOURS_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isOpen);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.beginTime);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.endTime);
        return writer;
    };

    /**
     * Encodes the specified USER_SET_DEVICE_QUIETHOURS_REQ message, length delimited. Does not implicitly {@link USER_SET_DEVICE_QUIETHOURS_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {IUSER_SET_DEVICE_QUIETHOURS_REQ} message USER_SET_DEVICE_QUIETHOURS_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a USER_SET_DEVICE_QUIETHOURS_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {USER_SET_DEVICE_QUIETHOURS_REQ} USER_SET_DEVICE_QUIETHOURS_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.USER_SET_DEVICE_QUIETHOURS_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.isOpen = reader.bool();
                    break;
                }
            case 2: {
                    message.beginTime = reader.uint32();
                    break;
                }
            case 3: {
                    message.endTime = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("isOpen"))
            throw $util.ProtocolError("missing required 'isOpen'", { instance: message });
        if (!message.hasOwnProperty("beginTime"))
            throw $util.ProtocolError("missing required 'beginTime'", { instance: message });
        if (!message.hasOwnProperty("endTime"))
            throw $util.ProtocolError("missing required 'endTime'", { instance: message });
        return message;
    };

    /**
     * Decodes a USER_SET_DEVICE_QUIETHOURS_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {USER_SET_DEVICE_QUIETHOURS_REQ} USER_SET_DEVICE_QUIETHOURS_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a USER_SET_DEVICE_QUIETHOURS_REQ message.
     * @function verify
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (typeof message.isOpen !== "boolean")
            return "isOpen: boolean expected";
        if (!$util.isInteger(message.beginTime))
            return "beginTime: integer expected";
        if (!$util.isInteger(message.endTime))
            return "endTime: integer expected";
        return null;
    };

    /**
     * Creates a USER_SET_DEVICE_QUIETHOURS_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {USER_SET_DEVICE_QUIETHOURS_REQ} USER_SET_DEVICE_QUIETHOURS_REQ
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.USER_SET_DEVICE_QUIETHOURS_REQ)
            return object;
        var message = new $root.USER_SET_DEVICE_QUIETHOURS_REQ();
        if (object.isOpen != null)
            message.isOpen = Boolean(object.isOpen);
        if (object.beginTime != null)
            message.beginTime = object.beginTime >>> 0;
        if (object.endTime != null)
            message.endTime = object.endTime >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a USER_SET_DEVICE_QUIETHOURS_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {USER_SET_DEVICE_QUIETHOURS_REQ} message USER_SET_DEVICE_QUIETHOURS_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.isOpen = false;
            object.beginTime = 0;
            object.endTime = 0;
        }
        if (message.isOpen != null && message.hasOwnProperty("isOpen"))
            object.isOpen = message.isOpen;
        if (message.beginTime != null && message.hasOwnProperty("beginTime"))
            object.beginTime = message.beginTime;
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            object.endTime = message.endTime;
        return object;
    };

    /**
     * Converts this USER_SET_DEVICE_QUIETHOURS_REQ to JSON.
     * @function toJSON
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for USER_SET_DEVICE_QUIETHOURS_REQ
     * @function getTypeUrl
     * @memberof USER_SET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    USER_SET_DEVICE_QUIETHOURS_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/USER_SET_DEVICE_QUIETHOURS_REQ";
    };

    return USER_SET_DEVICE_QUIETHOURS_REQ;
})();

$root.USER_SET_DEVICE_QUIETHOURS_RSP = (function() {

    /**
     * Properties of a USER_SET_DEVICE_QUIETHOURS_RSP.
     * @exports IUSER_SET_DEVICE_QUIETHOURS_RSP
     * @interface IUSER_SET_DEVICE_QUIETHOURS_RSP
     * @property {number} result USER_SET_DEVICE_QUIETHOURS_RSP result
     */

    /**
     * Constructs a new USER_SET_DEVICE_QUIETHOURS_RSP.
     * @exports USER_SET_DEVICE_QUIETHOURS_RSP
     * @classdesc Represents a USER_SET_DEVICE_QUIETHOURS_RSP.
     * @implements IUSER_SET_DEVICE_QUIETHOURS_RSP
     * @constructor
     * @param {IUSER_SET_DEVICE_QUIETHOURS_RSP=} [properties] Properties to set
     */
    function USER_SET_DEVICE_QUIETHOURS_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * USER_SET_DEVICE_QUIETHOURS_RSP result.
     * @member {number} result
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @instance
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.prototype.result = 0;

    /**
     * Creates a new USER_SET_DEVICE_QUIETHOURS_RSP instance using the specified properties.
     * @function create
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {IUSER_SET_DEVICE_QUIETHOURS_RSP=} [properties] Properties to set
     * @returns {USER_SET_DEVICE_QUIETHOURS_RSP} USER_SET_DEVICE_QUIETHOURS_RSP instance
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.create = function create(properties) {
        return new USER_SET_DEVICE_QUIETHOURS_RSP(properties);
    };

    /**
     * Encodes the specified USER_SET_DEVICE_QUIETHOURS_RSP message. Does not implicitly {@link USER_SET_DEVICE_QUIETHOURS_RSP.verify|verify} messages.
     * @function encode
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {IUSER_SET_DEVICE_QUIETHOURS_RSP} message USER_SET_DEVICE_QUIETHOURS_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified USER_SET_DEVICE_QUIETHOURS_RSP message, length delimited. Does not implicitly {@link USER_SET_DEVICE_QUIETHOURS_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {IUSER_SET_DEVICE_QUIETHOURS_RSP} message USER_SET_DEVICE_QUIETHOURS_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a USER_SET_DEVICE_QUIETHOURS_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {USER_SET_DEVICE_QUIETHOURS_RSP} USER_SET_DEVICE_QUIETHOURS_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.USER_SET_DEVICE_QUIETHOURS_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a USER_SET_DEVICE_QUIETHOURS_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {USER_SET_DEVICE_QUIETHOURS_RSP} USER_SET_DEVICE_QUIETHOURS_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a USER_SET_DEVICE_QUIETHOURS_RSP message.
     * @function verify
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a USER_SET_DEVICE_QUIETHOURS_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {USER_SET_DEVICE_QUIETHOURS_RSP} USER_SET_DEVICE_QUIETHOURS_RSP
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.USER_SET_DEVICE_QUIETHOURS_RSP)
            return object;
        var message = new $root.USER_SET_DEVICE_QUIETHOURS_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a USER_SET_DEVICE_QUIETHOURS_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {USER_SET_DEVICE_QUIETHOURS_RSP} message USER_SET_DEVICE_QUIETHOURS_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this USER_SET_DEVICE_QUIETHOURS_RSP to JSON.
     * @function toJSON
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for USER_SET_DEVICE_QUIETHOURS_RSP
     * @function getTypeUrl
     * @memberof USER_SET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    USER_SET_DEVICE_QUIETHOURS_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/USER_SET_DEVICE_QUIETHOURS_RSP";
    };

    return USER_SET_DEVICE_QUIETHOURS_RSP;
})();

$root.USER_SET_DEVICE_CLEANPREFERENCE_REQ = (function() {

    /**
     * Properties of a USER_SET_DEVICE_CLEANPREFERENCE_REQ.
     * @exports IUSER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @interface IUSER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @property {boolean|null} [ecoMode] USER_SET_DEVICE_CLEANPREFERENCE_REQ ecoMode
     * @property {boolean|null} [repeatClean] USER_SET_DEVICE_CLEANPREFERENCE_REQ repeatClean
     * @property {boolean|null} [cleanBroken] USER_SET_DEVICE_CLEANPREFERENCE_REQ cleanBroken
     * @property {boolean|null} [carpetTurbo] USER_SET_DEVICE_CLEANPREFERENCE_REQ carpetTurbo
     * @property {boolean|null} [historyMap] USER_SET_DEVICE_CLEANPREFERENCE_REQ historyMap
     * @property {number|null} [waterLevel] USER_SET_DEVICE_CLEANPREFERENCE_REQ waterLevel
     */

    /**
     * Constructs a new USER_SET_DEVICE_CLEANPREFERENCE_REQ.
     * @exports USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @classdesc Represents a USER_SET_DEVICE_CLEANPREFERENCE_REQ.
     * @implements IUSER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @constructor
     * @param {IUSER_SET_DEVICE_CLEANPREFERENCE_REQ=} [properties] Properties to set
     */
    function USER_SET_DEVICE_CLEANPREFERENCE_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * USER_SET_DEVICE_CLEANPREFERENCE_REQ ecoMode.
     * @member {boolean} ecoMode
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @instance
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.prototype.ecoMode = false;

    /**
     * USER_SET_DEVICE_CLEANPREFERENCE_REQ repeatClean.
     * @member {boolean} repeatClean
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @instance
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.prototype.repeatClean = false;

    /**
     * USER_SET_DEVICE_CLEANPREFERENCE_REQ cleanBroken.
     * @member {boolean} cleanBroken
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @instance
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.prototype.cleanBroken = false;

    /**
     * USER_SET_DEVICE_CLEANPREFERENCE_REQ carpetTurbo.
     * @member {boolean} carpetTurbo
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @instance
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.prototype.carpetTurbo = false;

    /**
     * USER_SET_DEVICE_CLEANPREFERENCE_REQ historyMap.
     * @member {boolean} historyMap
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @instance
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.prototype.historyMap = false;

    /**
     * USER_SET_DEVICE_CLEANPREFERENCE_REQ waterLevel.
     * @member {number} waterLevel
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @instance
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.prototype.waterLevel = 0;

    /**
     * Creates a new USER_SET_DEVICE_CLEANPREFERENCE_REQ instance using the specified properties.
     * @function create
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @static
     * @param {IUSER_SET_DEVICE_CLEANPREFERENCE_REQ=} [properties] Properties to set
     * @returns {USER_SET_DEVICE_CLEANPREFERENCE_REQ} USER_SET_DEVICE_CLEANPREFERENCE_REQ instance
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.create = function create(properties) {
        return new USER_SET_DEVICE_CLEANPREFERENCE_REQ(properties);
    };

    /**
     * Encodes the specified USER_SET_DEVICE_CLEANPREFERENCE_REQ message. Does not implicitly {@link USER_SET_DEVICE_CLEANPREFERENCE_REQ.verify|verify} messages.
     * @function encode
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @static
     * @param {IUSER_SET_DEVICE_CLEANPREFERENCE_REQ} message USER_SET_DEVICE_CLEANPREFERENCE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ecoMode != null && Object.hasOwnProperty.call(message, "ecoMode"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.ecoMode);
        if (message.repeatClean != null && Object.hasOwnProperty.call(message, "repeatClean"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.repeatClean);
        if (message.cleanBroken != null && Object.hasOwnProperty.call(message, "cleanBroken"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.cleanBroken);
        if (message.carpetTurbo != null && Object.hasOwnProperty.call(message, "carpetTurbo"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.carpetTurbo);
        if (message.historyMap != null && Object.hasOwnProperty.call(message, "historyMap"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.historyMap);
        if (message.waterLevel != null && Object.hasOwnProperty.call(message, "waterLevel"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.waterLevel);
        return writer;
    };

    /**
     * Encodes the specified USER_SET_DEVICE_CLEANPREFERENCE_REQ message, length delimited. Does not implicitly {@link USER_SET_DEVICE_CLEANPREFERENCE_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @static
     * @param {IUSER_SET_DEVICE_CLEANPREFERENCE_REQ} message USER_SET_DEVICE_CLEANPREFERENCE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a USER_SET_DEVICE_CLEANPREFERENCE_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {USER_SET_DEVICE_CLEANPREFERENCE_REQ} USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.USER_SET_DEVICE_CLEANPREFERENCE_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.ecoMode = reader.bool();
                    break;
                }
            case 2: {
                    message.repeatClean = reader.bool();
                    break;
                }
            case 3: {
                    message.cleanBroken = reader.bool();
                    break;
                }
            case 4: {
                    message.carpetTurbo = reader.bool();
                    break;
                }
            case 5: {
                    message.historyMap = reader.bool();
                    break;
                }
            case 6: {
                    message.waterLevel = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a USER_SET_DEVICE_CLEANPREFERENCE_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {USER_SET_DEVICE_CLEANPREFERENCE_REQ} USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a USER_SET_DEVICE_CLEANPREFERENCE_REQ message.
     * @function verify
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ecoMode != null && message.hasOwnProperty("ecoMode"))
            if (typeof message.ecoMode !== "boolean")
                return "ecoMode: boolean expected";
        if (message.repeatClean != null && message.hasOwnProperty("repeatClean"))
            if (typeof message.repeatClean !== "boolean")
                return "repeatClean: boolean expected";
        if (message.cleanBroken != null && message.hasOwnProperty("cleanBroken"))
            if (typeof message.cleanBroken !== "boolean")
                return "cleanBroken: boolean expected";
        if (message.carpetTurbo != null && message.hasOwnProperty("carpetTurbo"))
            if (typeof message.carpetTurbo !== "boolean")
                return "carpetTurbo: boolean expected";
        if (message.historyMap != null && message.hasOwnProperty("historyMap"))
            if (typeof message.historyMap !== "boolean")
                return "historyMap: boolean expected";
        if (message.waterLevel != null && message.hasOwnProperty("waterLevel"))
            if (!$util.isInteger(message.waterLevel))
                return "waterLevel: integer expected";
        return null;
    };

    /**
     * Creates a USER_SET_DEVICE_CLEANPREFERENCE_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {USER_SET_DEVICE_CLEANPREFERENCE_REQ} USER_SET_DEVICE_CLEANPREFERENCE_REQ
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.USER_SET_DEVICE_CLEANPREFERENCE_REQ)
            return object;
        var message = new $root.USER_SET_DEVICE_CLEANPREFERENCE_REQ();
        if (object.ecoMode != null)
            message.ecoMode = Boolean(object.ecoMode);
        if (object.repeatClean != null)
            message.repeatClean = Boolean(object.repeatClean);
        if (object.cleanBroken != null)
            message.cleanBroken = Boolean(object.cleanBroken);
        if (object.carpetTurbo != null)
            message.carpetTurbo = Boolean(object.carpetTurbo);
        if (object.historyMap != null)
            message.historyMap = Boolean(object.historyMap);
        if (object.waterLevel != null)
            message.waterLevel = object.waterLevel >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a USER_SET_DEVICE_CLEANPREFERENCE_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @static
     * @param {USER_SET_DEVICE_CLEANPREFERENCE_REQ} message USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.ecoMode = false;
            object.repeatClean = false;
            object.cleanBroken = false;
            object.carpetTurbo = false;
            object.historyMap = false;
            object.waterLevel = 0;
        }
        if (message.ecoMode != null && message.hasOwnProperty("ecoMode"))
            object.ecoMode = message.ecoMode;
        if (message.repeatClean != null && message.hasOwnProperty("repeatClean"))
            object.repeatClean = message.repeatClean;
        if (message.cleanBroken != null && message.hasOwnProperty("cleanBroken"))
            object.cleanBroken = message.cleanBroken;
        if (message.carpetTurbo != null && message.hasOwnProperty("carpetTurbo"))
            object.carpetTurbo = message.carpetTurbo;
        if (message.historyMap != null && message.hasOwnProperty("historyMap"))
            object.historyMap = message.historyMap;
        if (message.waterLevel != null && message.hasOwnProperty("waterLevel"))
            object.waterLevel = message.waterLevel;
        return object;
    };

    /**
     * Converts this USER_SET_DEVICE_CLEANPREFERENCE_REQ to JSON.
     * @function toJSON
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @function getTypeUrl
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    USER_SET_DEVICE_CLEANPREFERENCE_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/USER_SET_DEVICE_CLEANPREFERENCE_REQ";
    };

    return USER_SET_DEVICE_CLEANPREFERENCE_REQ;
})();

$root.USER_SET_DEVICE_CLEANPREFERENCE_RSP = (function() {

    /**
     * Properties of a USER_SET_DEVICE_CLEANPREFERENCE_RSP.
     * @exports IUSER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @interface IUSER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @property {number} result USER_SET_DEVICE_CLEANPREFERENCE_RSP result
     */

    /**
     * Constructs a new USER_SET_DEVICE_CLEANPREFERENCE_RSP.
     * @exports USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @classdesc Represents a USER_SET_DEVICE_CLEANPREFERENCE_RSP.
     * @implements IUSER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @constructor
     * @param {IUSER_SET_DEVICE_CLEANPREFERENCE_RSP=} [properties] Properties to set
     */
    function USER_SET_DEVICE_CLEANPREFERENCE_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * USER_SET_DEVICE_CLEANPREFERENCE_RSP result.
     * @member {number} result
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @instance
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.prototype.result = 0;

    /**
     * Creates a new USER_SET_DEVICE_CLEANPREFERENCE_RSP instance using the specified properties.
     * @function create
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @static
     * @param {IUSER_SET_DEVICE_CLEANPREFERENCE_RSP=} [properties] Properties to set
     * @returns {USER_SET_DEVICE_CLEANPREFERENCE_RSP} USER_SET_DEVICE_CLEANPREFERENCE_RSP instance
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.create = function create(properties) {
        return new USER_SET_DEVICE_CLEANPREFERENCE_RSP(properties);
    };

    /**
     * Encodes the specified USER_SET_DEVICE_CLEANPREFERENCE_RSP message. Does not implicitly {@link USER_SET_DEVICE_CLEANPREFERENCE_RSP.verify|verify} messages.
     * @function encode
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @static
     * @param {IUSER_SET_DEVICE_CLEANPREFERENCE_RSP} message USER_SET_DEVICE_CLEANPREFERENCE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified USER_SET_DEVICE_CLEANPREFERENCE_RSP message, length delimited. Does not implicitly {@link USER_SET_DEVICE_CLEANPREFERENCE_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @static
     * @param {IUSER_SET_DEVICE_CLEANPREFERENCE_RSP} message USER_SET_DEVICE_CLEANPREFERENCE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a USER_SET_DEVICE_CLEANPREFERENCE_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {USER_SET_DEVICE_CLEANPREFERENCE_RSP} USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.USER_SET_DEVICE_CLEANPREFERENCE_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a USER_SET_DEVICE_CLEANPREFERENCE_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {USER_SET_DEVICE_CLEANPREFERENCE_RSP} USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a USER_SET_DEVICE_CLEANPREFERENCE_RSP message.
     * @function verify
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a USER_SET_DEVICE_CLEANPREFERENCE_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {USER_SET_DEVICE_CLEANPREFERENCE_RSP} USER_SET_DEVICE_CLEANPREFERENCE_RSP
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.USER_SET_DEVICE_CLEANPREFERENCE_RSP)
            return object;
        var message = new $root.USER_SET_DEVICE_CLEANPREFERENCE_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a USER_SET_DEVICE_CLEANPREFERENCE_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @static
     * @param {USER_SET_DEVICE_CLEANPREFERENCE_RSP} message USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this USER_SET_DEVICE_CLEANPREFERENCE_RSP to JSON.
     * @function toJSON
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @function getTypeUrl
     * @memberof USER_SET_DEVICE_CLEANPREFERENCE_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    USER_SET_DEVICE_CLEANPREFERENCE_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/USER_SET_DEVICE_CLEANPREFERENCE_RSP";
    };

    return USER_SET_DEVICE_CLEANPREFERENCE_RSP;
})();

$root.DEVICE_ZERO_CALIBRATION_REQ = (function() {

    /**
     * Properties of a DEVICE_ZERO_CALIBRATION_REQ.
     * @exports IDEVICE_ZERO_CALIBRATION_REQ
     * @interface IDEVICE_ZERO_CALIBRATION_REQ
     * @property {number} unk1 DEVICE_ZERO_CALIBRATION_REQ unk1
     */

    /**
     * Constructs a new DEVICE_ZERO_CALIBRATION_REQ.
     * @exports DEVICE_ZERO_CALIBRATION_REQ
     * @classdesc Represents a DEVICE_ZERO_CALIBRATION_REQ.
     * @implements IDEVICE_ZERO_CALIBRATION_REQ
     * @constructor
     * @param {IDEVICE_ZERO_CALIBRATION_REQ=} [properties] Properties to set
     */
    function DEVICE_ZERO_CALIBRATION_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_ZERO_CALIBRATION_REQ unk1.
     * @member {number} unk1
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @instance
     */
    DEVICE_ZERO_CALIBRATION_REQ.prototype.unk1 = 0;

    /**
     * Creates a new DEVICE_ZERO_CALIBRATION_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @static
     * @param {IDEVICE_ZERO_CALIBRATION_REQ=} [properties] Properties to set
     * @returns {DEVICE_ZERO_CALIBRATION_REQ} DEVICE_ZERO_CALIBRATION_REQ instance
     */
    DEVICE_ZERO_CALIBRATION_REQ.create = function create(properties) {
        return new DEVICE_ZERO_CALIBRATION_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_ZERO_CALIBRATION_REQ message. Does not implicitly {@link DEVICE_ZERO_CALIBRATION_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @static
     * @param {IDEVICE_ZERO_CALIBRATION_REQ} message DEVICE_ZERO_CALIBRATION_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ZERO_CALIBRATION_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.unk1);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_ZERO_CALIBRATION_REQ message, length delimited. Does not implicitly {@link DEVICE_ZERO_CALIBRATION_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @static
     * @param {IDEVICE_ZERO_CALIBRATION_REQ} message DEVICE_ZERO_CALIBRATION_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ZERO_CALIBRATION_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_ZERO_CALIBRATION_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_ZERO_CALIBRATION_REQ} DEVICE_ZERO_CALIBRATION_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ZERO_CALIBRATION_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ZERO_CALIBRATION_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.unk1 = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("unk1"))
            throw $util.ProtocolError("missing required 'unk1'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_ZERO_CALIBRATION_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_ZERO_CALIBRATION_REQ} DEVICE_ZERO_CALIBRATION_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ZERO_CALIBRATION_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_ZERO_CALIBRATION_REQ message.
     * @function verify
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_ZERO_CALIBRATION_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.unk1))
            return "unk1: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_ZERO_CALIBRATION_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_ZERO_CALIBRATION_REQ} DEVICE_ZERO_CALIBRATION_REQ
     */
    DEVICE_ZERO_CALIBRATION_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_ZERO_CALIBRATION_REQ)
            return object;
        var message = new $root.DEVICE_ZERO_CALIBRATION_REQ();
        if (object.unk1 != null)
            message.unk1 = object.unk1 >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_ZERO_CALIBRATION_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @static
     * @param {DEVICE_ZERO_CALIBRATION_REQ} message DEVICE_ZERO_CALIBRATION_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_ZERO_CALIBRATION_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.unk1 = 0;
        if (message.unk1 != null && message.hasOwnProperty("unk1"))
            object.unk1 = message.unk1;
        return object;
    };

    /**
     * Converts this DEVICE_ZERO_CALIBRATION_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_ZERO_CALIBRATION_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_ZERO_CALIBRATION_REQ
     * @function getTypeUrl
     * @memberof DEVICE_ZERO_CALIBRATION_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_ZERO_CALIBRATION_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_ZERO_CALIBRATION_REQ";
    };

    return DEVICE_ZERO_CALIBRATION_REQ;
})();

$root.DEVICE_ZERO_CALIBRATION_RSP = (function() {

    /**
     * Properties of a DEVICE_ZERO_CALIBRATION_RSP.
     * @exports IDEVICE_ZERO_CALIBRATION_RSP
     * @interface IDEVICE_ZERO_CALIBRATION_RSP
     * @property {number} result DEVICE_ZERO_CALIBRATION_RSP result
     * @property {DEVICE_ZERO_CALIBRATION_RSP.IBody} body DEVICE_ZERO_CALIBRATION_RSP body
     */

    /**
     * Constructs a new DEVICE_ZERO_CALIBRATION_RSP.
     * @exports DEVICE_ZERO_CALIBRATION_RSP
     * @classdesc Represents a DEVICE_ZERO_CALIBRATION_RSP.
     * @implements IDEVICE_ZERO_CALIBRATION_RSP
     * @constructor
     * @param {IDEVICE_ZERO_CALIBRATION_RSP=} [properties] Properties to set
     */
    function DEVICE_ZERO_CALIBRATION_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_ZERO_CALIBRATION_RSP result.
     * @member {number} result
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @instance
     */
    DEVICE_ZERO_CALIBRATION_RSP.prototype.result = 0;

    /**
     * DEVICE_ZERO_CALIBRATION_RSP body.
     * @member {DEVICE_ZERO_CALIBRATION_RSP.IBody} body
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @instance
     */
    DEVICE_ZERO_CALIBRATION_RSP.prototype.body = null;

    /**
     * Creates a new DEVICE_ZERO_CALIBRATION_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @static
     * @param {IDEVICE_ZERO_CALIBRATION_RSP=} [properties] Properties to set
     * @returns {DEVICE_ZERO_CALIBRATION_RSP} DEVICE_ZERO_CALIBRATION_RSP instance
     */
    DEVICE_ZERO_CALIBRATION_RSP.create = function create(properties) {
        return new DEVICE_ZERO_CALIBRATION_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_ZERO_CALIBRATION_RSP message. Does not implicitly {@link DEVICE_ZERO_CALIBRATION_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @static
     * @param {IDEVICE_ZERO_CALIBRATION_RSP} message DEVICE_ZERO_CALIBRATION_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ZERO_CALIBRATION_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        $root.DEVICE_ZERO_CALIBRATION_RSP.Body.encode(message.body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_ZERO_CALIBRATION_RSP message, length delimited. Does not implicitly {@link DEVICE_ZERO_CALIBRATION_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @static
     * @param {IDEVICE_ZERO_CALIBRATION_RSP} message DEVICE_ZERO_CALIBRATION_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_ZERO_CALIBRATION_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_ZERO_CALIBRATION_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_ZERO_CALIBRATION_RSP} DEVICE_ZERO_CALIBRATION_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ZERO_CALIBRATION_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ZERO_CALIBRATION_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            case 3: {
                    message.body = $root.DEVICE_ZERO_CALIBRATION_RSP.Body.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        if (!message.hasOwnProperty("body"))
            throw $util.ProtocolError("missing required 'body'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_ZERO_CALIBRATION_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_ZERO_CALIBRATION_RSP} DEVICE_ZERO_CALIBRATION_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_ZERO_CALIBRATION_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_ZERO_CALIBRATION_RSP message.
     * @function verify
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_ZERO_CALIBRATION_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        {
            var error = $root.DEVICE_ZERO_CALIBRATION_RSP.Body.verify(message.body);
            if (error)
                return "body." + error;
        }
        return null;
    };

    /**
     * Creates a DEVICE_ZERO_CALIBRATION_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_ZERO_CALIBRATION_RSP} DEVICE_ZERO_CALIBRATION_RSP
     */
    DEVICE_ZERO_CALIBRATION_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_ZERO_CALIBRATION_RSP)
            return object;
        var message = new $root.DEVICE_ZERO_CALIBRATION_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        if (object.body != null) {
            if (typeof object.body !== "object")
                throw TypeError(".DEVICE_ZERO_CALIBRATION_RSP.body: object expected");
            message.body = $root.DEVICE_ZERO_CALIBRATION_RSP.Body.fromObject(object.body);
        }
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_ZERO_CALIBRATION_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @static
     * @param {DEVICE_ZERO_CALIBRATION_RSP} message DEVICE_ZERO_CALIBRATION_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_ZERO_CALIBRATION_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.result = 0;
            object.body = null;
        }
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.body != null && message.hasOwnProperty("body"))
            object.body = $root.DEVICE_ZERO_CALIBRATION_RSP.Body.toObject(message.body, options);
        return object;
    };

    /**
     * Converts this DEVICE_ZERO_CALIBRATION_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_ZERO_CALIBRATION_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_ZERO_CALIBRATION_RSP
     * @function getTypeUrl
     * @memberof DEVICE_ZERO_CALIBRATION_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_ZERO_CALIBRATION_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_ZERO_CALIBRATION_RSP";
    };

    DEVICE_ZERO_CALIBRATION_RSP.Body = (function() {

        /**
         * Properties of a Body.
         * @memberof DEVICE_ZERO_CALIBRATION_RSP
         * @interface IBody
         * @property {number} unk1 Body unk1
         */

        /**
         * Constructs a new Body.
         * @memberof DEVICE_ZERO_CALIBRATION_RSP
         * @classdesc Represents a Body.
         * @implements IBody
         * @constructor
         * @param {DEVICE_ZERO_CALIBRATION_RSP.IBody=} [properties] Properties to set
         */
        function Body(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Body unk1.
         * @member {number} unk1
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @instance
         */
        Body.prototype.unk1 = 0;

        /**
         * Creates a new Body instance using the specified properties.
         * @function create
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @static
         * @param {DEVICE_ZERO_CALIBRATION_RSP.IBody=} [properties] Properties to set
         * @returns {DEVICE_ZERO_CALIBRATION_RSP.Body} Body instance
         */
        Body.create = function create(properties) {
            return new Body(properties);
        };

        /**
         * Encodes the specified Body message. Does not implicitly {@link DEVICE_ZERO_CALIBRATION_RSP.Body.verify|verify} messages.
         * @function encode
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @static
         * @param {DEVICE_ZERO_CALIBRATION_RSP.IBody} message Body message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Body.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.unk1);
            return writer;
        };

        /**
         * Encodes the specified Body message, length delimited. Does not implicitly {@link DEVICE_ZERO_CALIBRATION_RSP.Body.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @static
         * @param {DEVICE_ZERO_CALIBRATION_RSP.IBody} message Body message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Body.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Body message from the specified reader or buffer.
         * @function decode
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DEVICE_ZERO_CALIBRATION_RSP.Body} Body
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Body.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_ZERO_CALIBRATION_RSP.Body();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.unk1 = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("unk1"))
                throw $util.ProtocolError("missing required 'unk1'", { instance: message });
            return message;
        };

        /**
         * Decodes a Body message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DEVICE_ZERO_CALIBRATION_RSP.Body} Body
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Body.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Body message.
         * @function verify
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Body.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.unk1))
                return "unk1: integer expected";
            return null;
        };

        /**
         * Creates a Body message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DEVICE_ZERO_CALIBRATION_RSP.Body} Body
         */
        Body.fromObject = function fromObject(object) {
            if (object instanceof $root.DEVICE_ZERO_CALIBRATION_RSP.Body)
                return object;
            var message = new $root.DEVICE_ZERO_CALIBRATION_RSP.Body();
            if (object.unk1 != null)
                message.unk1 = object.unk1 >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a Body message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @static
         * @param {DEVICE_ZERO_CALIBRATION_RSP.Body} message Body
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Body.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.unk1 = 0;
            if (message.unk1 != null && message.hasOwnProperty("unk1"))
                object.unk1 = message.unk1;
            return object;
        };

        /**
         * Converts this Body to JSON.
         * @function toJSON
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Body.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Body
         * @function getTypeUrl
         * @memberof DEVICE_ZERO_CALIBRATION_RSP.Body
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Body.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/DEVICE_ZERO_CALIBRATION_RSP.Body";
        };

        return Body;
    })();

    return DEVICE_ZERO_CALIBRATION_RSP;
})();

$root.DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ = (function() {

    /**
     * Properties of a DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.
     * @exports IDEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @interface IDEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     */

    /**
     * Constructs a new DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.
     * @exports DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @classdesc Represents a DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.
     * @implements IDEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @constructor
     * @param {IDEVICE_UPGRADE_GET_AUTO_INSTALL_REQ=} [properties] Properties to set
     */
    function DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @static
     * @param {IDEVICE_UPGRADE_GET_AUTO_INSTALL_REQ=} [properties] Properties to set
     * @returns {DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ} DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ instance
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.create = function create(properties) {
        return new DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ message. Does not implicitly {@link DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @static
     * @param {IDEVICE_UPGRADE_GET_AUTO_INSTALL_REQ} message DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ message, length delimited. Does not implicitly {@link DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @static
     * @param {IDEVICE_UPGRADE_GET_AUTO_INSTALL_REQ} message DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ} DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ} DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ message.
     * @function verify
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ} DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ)
            return object;
        return new $root.DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ();
    };

    /**
     * Creates a plain object from a DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @static
     * @param {DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ} message DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @function getTypeUrl
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ";
    };

    return DEVICE_UPGRADE_GET_AUTO_INSTALL_REQ;
})();

$root.DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP = (function() {

    /**
     * Properties of a DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.
     * @exports IDEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @interface IDEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @property {number} result DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP result
     */

    /**
     * Constructs a new DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.
     * @exports DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @classdesc Represents a DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.
     * @implements IDEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @constructor
     * @param {IDEVICE_UPGRADE_GET_AUTO_INSTALL_RSP=} [properties] Properties to set
     */
    function DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP result.
     * @member {number} result
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @instance
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @static
     * @param {IDEVICE_UPGRADE_GET_AUTO_INSTALL_RSP=} [properties] Properties to set
     * @returns {DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP} DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP instance
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.create = function create(properties) {
        return new DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP message. Does not implicitly {@link DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @static
     * @param {IDEVICE_UPGRADE_GET_AUTO_INSTALL_RSP} message DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP message, length delimited. Does not implicitly {@link DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @static
     * @param {IDEVICE_UPGRADE_GET_AUTO_INSTALL_RSP} message DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP} DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP} DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP message.
     * @function verify
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP} DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP)
            return object;
        var message = new $root.DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @static
     * @param {DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP} message DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @function getTypeUrl
     * @memberof DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP";
    };

    return DEVICE_UPGRADE_GET_AUTO_INSTALL_RSP;
})();

$root.DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ = (function() {

    /**
     * Properties of a DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.
     * @exports IDEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @interface IDEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @property {number} unk1 DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ unk1
     */

    /**
     * Constructs a new DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.
     * @exports DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @classdesc Represents a DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.
     * @implements IDEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @constructor
     * @param {IDEVICE_UPGRADE_SET_AUTO_INSTALL_REQ=} [properties] Properties to set
     */
    function DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ unk1.
     * @member {number} unk1
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @instance
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.prototype.unk1 = 0;

    /**
     * Creates a new DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @static
     * @param {IDEVICE_UPGRADE_SET_AUTO_INSTALL_REQ=} [properties] Properties to set
     * @returns {DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ} DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ instance
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.create = function create(properties) {
        return new DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ message. Does not implicitly {@link DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @static
     * @param {IDEVICE_UPGRADE_SET_AUTO_INSTALL_REQ} message DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.unk1);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ message, length delimited. Does not implicitly {@link DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @static
     * @param {IDEVICE_UPGRADE_SET_AUTO_INSTALL_REQ} message DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ} DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.unk1 = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("unk1"))
            throw $util.ProtocolError("missing required 'unk1'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ} DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ message.
     * @function verify
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.unk1))
            return "unk1: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ} DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ)
            return object;
        var message = new $root.DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ();
        if (object.unk1 != null)
            message.unk1 = object.unk1 >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @static
     * @param {DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ} message DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.unk1 = 0;
        if (message.unk1 != null && message.hasOwnProperty("unk1"))
            object.unk1 = message.unk1;
        return object;
    };

    /**
     * Converts this DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @function getTypeUrl
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ";
    };

    return DEVICE_UPGRADE_SET_AUTO_INSTALL_REQ;
})();

$root.DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP = (function() {

    /**
     * Properties of a DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.
     * @exports IDEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @interface IDEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @property {number} result DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP result
     */

    /**
     * Constructs a new DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.
     * @exports DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @classdesc Represents a DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.
     * @implements IDEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @constructor
     * @param {IDEVICE_UPGRADE_SET_AUTO_INSTALL_RSP=} [properties] Properties to set
     */
    function DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP result.
     * @member {number} result
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @instance
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @static
     * @param {IDEVICE_UPGRADE_SET_AUTO_INSTALL_RSP=} [properties] Properties to set
     * @returns {DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP} DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP instance
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.create = function create(properties) {
        return new DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP message. Does not implicitly {@link DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @static
     * @param {IDEVICE_UPGRADE_SET_AUTO_INSTALL_RSP} message DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP message, length delimited. Does not implicitly {@link DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @static
     * @param {IDEVICE_UPGRADE_SET_AUTO_INSTALL_RSP} message DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP} DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP} DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP message.
     * @function verify
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP} DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP)
            return object;
        var message = new $root.DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @static
     * @param {DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP} message DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @function getTypeUrl
     * @memberof DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP";
    };

    return DEVICE_UPGRADE_SET_AUTO_INSTALL_RSP;
})();

$root.USER_SET_DEVICE_CTRL_SETTING_REQ = (function() {

    /**
     * Properties of a USER_SET_DEVICE_CTRL_SETTING_REQ.
     * @exports IUSER_SET_DEVICE_CTRL_SETTING_REQ
     * @interface IUSER_SET_DEVICE_CTRL_SETTING_REQ
     * @property {boolean|null} [voiceMode] USER_SET_DEVICE_CTRL_SETTING_REQ voiceMode
     * @property {number|null} [volume] USER_SET_DEVICE_CTRL_SETTING_REQ volume
     */

    /**
     * Constructs a new USER_SET_DEVICE_CTRL_SETTING_REQ.
     * @exports USER_SET_DEVICE_CTRL_SETTING_REQ
     * @classdesc Represents a USER_SET_DEVICE_CTRL_SETTING_REQ.
     * @implements IUSER_SET_DEVICE_CTRL_SETTING_REQ
     * @constructor
     * @param {IUSER_SET_DEVICE_CTRL_SETTING_REQ=} [properties] Properties to set
     */
    function USER_SET_DEVICE_CTRL_SETTING_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * USER_SET_DEVICE_CTRL_SETTING_REQ voiceMode.
     * @member {boolean} voiceMode
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @instance
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.prototype.voiceMode = false;

    /**
     * USER_SET_DEVICE_CTRL_SETTING_REQ volume.
     * @member {number} volume
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @instance
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.prototype.volume = 0;

    /**
     * Creates a new USER_SET_DEVICE_CTRL_SETTING_REQ instance using the specified properties.
     * @function create
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @static
     * @param {IUSER_SET_DEVICE_CTRL_SETTING_REQ=} [properties] Properties to set
     * @returns {USER_SET_DEVICE_CTRL_SETTING_REQ} USER_SET_DEVICE_CTRL_SETTING_REQ instance
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.create = function create(properties) {
        return new USER_SET_DEVICE_CTRL_SETTING_REQ(properties);
    };

    /**
     * Encodes the specified USER_SET_DEVICE_CTRL_SETTING_REQ message. Does not implicitly {@link USER_SET_DEVICE_CTRL_SETTING_REQ.verify|verify} messages.
     * @function encode
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @static
     * @param {IUSER_SET_DEVICE_CTRL_SETTING_REQ} message USER_SET_DEVICE_CTRL_SETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.voiceMode != null && Object.hasOwnProperty.call(message, "voiceMode"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.voiceMode);
        if (message.volume != null && Object.hasOwnProperty.call(message, "volume"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.volume);
        return writer;
    };

    /**
     * Encodes the specified USER_SET_DEVICE_CTRL_SETTING_REQ message, length delimited. Does not implicitly {@link USER_SET_DEVICE_CTRL_SETTING_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @static
     * @param {IUSER_SET_DEVICE_CTRL_SETTING_REQ} message USER_SET_DEVICE_CTRL_SETTING_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a USER_SET_DEVICE_CTRL_SETTING_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {USER_SET_DEVICE_CTRL_SETTING_REQ} USER_SET_DEVICE_CTRL_SETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.USER_SET_DEVICE_CTRL_SETTING_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.voiceMode = reader.bool();
                    break;
                }
            case 2: {
                    message.volume = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a USER_SET_DEVICE_CTRL_SETTING_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {USER_SET_DEVICE_CTRL_SETTING_REQ} USER_SET_DEVICE_CTRL_SETTING_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a USER_SET_DEVICE_CTRL_SETTING_REQ message.
     * @function verify
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.voiceMode != null && message.hasOwnProperty("voiceMode"))
            if (typeof message.voiceMode !== "boolean")
                return "voiceMode: boolean expected";
        if (message.volume != null && message.hasOwnProperty("volume"))
            if (!$util.isInteger(message.volume))
                return "volume: integer expected";
        return null;
    };

    /**
     * Creates a USER_SET_DEVICE_CTRL_SETTING_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {USER_SET_DEVICE_CTRL_SETTING_REQ} USER_SET_DEVICE_CTRL_SETTING_REQ
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.USER_SET_DEVICE_CTRL_SETTING_REQ)
            return object;
        var message = new $root.USER_SET_DEVICE_CTRL_SETTING_REQ();
        if (object.voiceMode != null)
            message.voiceMode = Boolean(object.voiceMode);
        if (object.volume != null)
            message.volume = object.volume >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a USER_SET_DEVICE_CTRL_SETTING_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @static
     * @param {USER_SET_DEVICE_CTRL_SETTING_REQ} message USER_SET_DEVICE_CTRL_SETTING_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.voiceMode = false;
            object.volume = 0;
        }
        if (message.voiceMode != null && message.hasOwnProperty("voiceMode"))
            object.voiceMode = message.voiceMode;
        if (message.volume != null && message.hasOwnProperty("volume"))
            object.volume = message.volume;
        return object;
    };

    /**
     * Converts this USER_SET_DEVICE_CTRL_SETTING_REQ to JSON.
     * @function toJSON
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for USER_SET_DEVICE_CTRL_SETTING_REQ
     * @function getTypeUrl
     * @memberof USER_SET_DEVICE_CTRL_SETTING_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    USER_SET_DEVICE_CTRL_SETTING_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/USER_SET_DEVICE_CTRL_SETTING_REQ";
    };

    return USER_SET_DEVICE_CTRL_SETTING_REQ;
})();

$root.USER_SET_DEVICE_CTRL_SETTING_RSP = (function() {

    /**
     * Properties of a USER_SET_DEVICE_CTRL_SETTING_RSP.
     * @exports IUSER_SET_DEVICE_CTRL_SETTING_RSP
     * @interface IUSER_SET_DEVICE_CTRL_SETTING_RSP
     * @property {number} result USER_SET_DEVICE_CTRL_SETTING_RSP result
     */

    /**
     * Constructs a new USER_SET_DEVICE_CTRL_SETTING_RSP.
     * @exports USER_SET_DEVICE_CTRL_SETTING_RSP
     * @classdesc Represents a USER_SET_DEVICE_CTRL_SETTING_RSP.
     * @implements IUSER_SET_DEVICE_CTRL_SETTING_RSP
     * @constructor
     * @param {IUSER_SET_DEVICE_CTRL_SETTING_RSP=} [properties] Properties to set
     */
    function USER_SET_DEVICE_CTRL_SETTING_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * USER_SET_DEVICE_CTRL_SETTING_RSP result.
     * @member {number} result
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @instance
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.prototype.result = 0;

    /**
     * Creates a new USER_SET_DEVICE_CTRL_SETTING_RSP instance using the specified properties.
     * @function create
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @static
     * @param {IUSER_SET_DEVICE_CTRL_SETTING_RSP=} [properties] Properties to set
     * @returns {USER_SET_DEVICE_CTRL_SETTING_RSP} USER_SET_DEVICE_CTRL_SETTING_RSP instance
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.create = function create(properties) {
        return new USER_SET_DEVICE_CTRL_SETTING_RSP(properties);
    };

    /**
     * Encodes the specified USER_SET_DEVICE_CTRL_SETTING_RSP message. Does not implicitly {@link USER_SET_DEVICE_CTRL_SETTING_RSP.verify|verify} messages.
     * @function encode
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @static
     * @param {IUSER_SET_DEVICE_CTRL_SETTING_RSP} message USER_SET_DEVICE_CTRL_SETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified USER_SET_DEVICE_CTRL_SETTING_RSP message, length delimited. Does not implicitly {@link USER_SET_DEVICE_CTRL_SETTING_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @static
     * @param {IUSER_SET_DEVICE_CTRL_SETTING_RSP} message USER_SET_DEVICE_CTRL_SETTING_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a USER_SET_DEVICE_CTRL_SETTING_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {USER_SET_DEVICE_CTRL_SETTING_RSP} USER_SET_DEVICE_CTRL_SETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.USER_SET_DEVICE_CTRL_SETTING_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a USER_SET_DEVICE_CTRL_SETTING_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {USER_SET_DEVICE_CTRL_SETTING_RSP} USER_SET_DEVICE_CTRL_SETTING_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a USER_SET_DEVICE_CTRL_SETTING_RSP message.
     * @function verify
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a USER_SET_DEVICE_CTRL_SETTING_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {USER_SET_DEVICE_CTRL_SETTING_RSP} USER_SET_DEVICE_CTRL_SETTING_RSP
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.USER_SET_DEVICE_CTRL_SETTING_RSP)
            return object;
        var message = new $root.USER_SET_DEVICE_CTRL_SETTING_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a USER_SET_DEVICE_CTRL_SETTING_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @static
     * @param {USER_SET_DEVICE_CTRL_SETTING_RSP} message USER_SET_DEVICE_CTRL_SETTING_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this USER_SET_DEVICE_CTRL_SETTING_RSP to JSON.
     * @function toJSON
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for USER_SET_DEVICE_CTRL_SETTING_RSP
     * @function getTypeUrl
     * @memberof USER_SET_DEVICE_CTRL_SETTING_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    USER_SET_DEVICE_CTRL_SETTING_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/USER_SET_DEVICE_CTRL_SETTING_RSP";
    };

    return USER_SET_DEVICE_CTRL_SETTING_RSP;
})();

$root.DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.
     * @exports IDEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @interface IDEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @property {number} itemId DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ itemId
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.
     * @exports DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @classdesc Represents a DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.
     * @implements IDEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @constructor
     * @param {IDEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ itemId.
     * @member {number} itemId
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @instance
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.prototype.itemId = 0;

    /**
     * Creates a new DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ} DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ instance
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.create = function create(properties) {
        return new DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ message. Does not implicitly {@link DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ} message DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.itemId);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ} message DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ} DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.itemId = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("itemId"))
            throw $util.ProtocolError("missing required 'itemId'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ} DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.itemId))
            return "itemId: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ} DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ();
        if (object.itemId != null)
            message.itemId = object.itemId >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ} message DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.itemId = 0;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ";
    };

    return DEVICE_MAPID_SET_CONSUMABLES_PARAM_REQ;
})();

$root.DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.
     * @exports IDEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @interface IDEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @property {number} result DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP result
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.
     * @exports DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @classdesc Represents a DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.
     * @implements IDEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @constructor
     * @param {IDEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP result.
     * @member {number} result
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @instance
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP} DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP instance
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.create = function create(properties) {
        return new DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP message. Does not implicitly {@link DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP} message DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP} message DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP} DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP} DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP} DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP)
            return object;
        var message = new $root.DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP} message DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP";
    };

    return DEVICE_MAPID_SET_CONSUMABLES_PARAM_RSP;
})();

$root.USER_GET_DEVICE_QUIETHOURS_REQ = (function() {

    /**
     * Properties of a USER_GET_DEVICE_QUIETHOURS_REQ.
     * @exports IUSER_GET_DEVICE_QUIETHOURS_REQ
     * @interface IUSER_GET_DEVICE_QUIETHOURS_REQ
     */

    /**
     * Constructs a new USER_GET_DEVICE_QUIETHOURS_REQ.
     * @exports USER_GET_DEVICE_QUIETHOURS_REQ
     * @classdesc Represents a USER_GET_DEVICE_QUIETHOURS_REQ.
     * @implements IUSER_GET_DEVICE_QUIETHOURS_REQ
     * @constructor
     * @param {IUSER_GET_DEVICE_QUIETHOURS_REQ=} [properties] Properties to set
     */
    function USER_GET_DEVICE_QUIETHOURS_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new USER_GET_DEVICE_QUIETHOURS_REQ instance using the specified properties.
     * @function create
     * @memberof USER_GET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {IUSER_GET_DEVICE_QUIETHOURS_REQ=} [properties] Properties to set
     * @returns {USER_GET_DEVICE_QUIETHOURS_REQ} USER_GET_DEVICE_QUIETHOURS_REQ instance
     */
    USER_GET_DEVICE_QUIETHOURS_REQ.create = function create(properties) {
        return new USER_GET_DEVICE_QUIETHOURS_REQ(properties);
    };

    /**
     * Encodes the specified USER_GET_DEVICE_QUIETHOURS_REQ message. Does not implicitly {@link USER_GET_DEVICE_QUIETHOURS_REQ.verify|verify} messages.
     * @function encode
     * @memberof USER_GET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {IUSER_GET_DEVICE_QUIETHOURS_REQ} message USER_GET_DEVICE_QUIETHOURS_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_GET_DEVICE_QUIETHOURS_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified USER_GET_DEVICE_QUIETHOURS_REQ message, length delimited. Does not implicitly {@link USER_GET_DEVICE_QUIETHOURS_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof USER_GET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {IUSER_GET_DEVICE_QUIETHOURS_REQ} message USER_GET_DEVICE_QUIETHOURS_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_GET_DEVICE_QUIETHOURS_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a USER_GET_DEVICE_QUIETHOURS_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof USER_GET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {USER_GET_DEVICE_QUIETHOURS_REQ} USER_GET_DEVICE_QUIETHOURS_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_GET_DEVICE_QUIETHOURS_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.USER_GET_DEVICE_QUIETHOURS_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a USER_GET_DEVICE_QUIETHOURS_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof USER_GET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {USER_GET_DEVICE_QUIETHOURS_REQ} USER_GET_DEVICE_QUIETHOURS_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_GET_DEVICE_QUIETHOURS_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a USER_GET_DEVICE_QUIETHOURS_REQ message.
     * @function verify
     * @memberof USER_GET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    USER_GET_DEVICE_QUIETHOURS_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a USER_GET_DEVICE_QUIETHOURS_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof USER_GET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {USER_GET_DEVICE_QUIETHOURS_REQ} USER_GET_DEVICE_QUIETHOURS_REQ
     */
    USER_GET_DEVICE_QUIETHOURS_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.USER_GET_DEVICE_QUIETHOURS_REQ)
            return object;
        return new $root.USER_GET_DEVICE_QUIETHOURS_REQ();
    };

    /**
     * Creates a plain object from a USER_GET_DEVICE_QUIETHOURS_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof USER_GET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {USER_GET_DEVICE_QUIETHOURS_REQ} message USER_GET_DEVICE_QUIETHOURS_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    USER_GET_DEVICE_QUIETHOURS_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this USER_GET_DEVICE_QUIETHOURS_REQ to JSON.
     * @function toJSON
     * @memberof USER_GET_DEVICE_QUIETHOURS_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    USER_GET_DEVICE_QUIETHOURS_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for USER_GET_DEVICE_QUIETHOURS_REQ
     * @function getTypeUrl
     * @memberof USER_GET_DEVICE_QUIETHOURS_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    USER_GET_DEVICE_QUIETHOURS_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/USER_GET_DEVICE_QUIETHOURS_REQ";
    };

    return USER_GET_DEVICE_QUIETHOURS_REQ;
})();

$root.USER_GET_DEVICE_QUIETHOURS_RSP = (function() {

    /**
     * Properties of a USER_GET_DEVICE_QUIETHOURS_RSP.
     * @exports IUSER_GET_DEVICE_QUIETHOURS_RSP
     * @interface IUSER_GET_DEVICE_QUIETHOURS_RSP
     * @property {boolean} isOpen USER_GET_DEVICE_QUIETHOURS_RSP isOpen
     * @property {number} beginTime USER_GET_DEVICE_QUIETHOURS_RSP beginTime
     * @property {number} endTime USER_GET_DEVICE_QUIETHOURS_RSP endTime
     */

    /**
     * Constructs a new USER_GET_DEVICE_QUIETHOURS_RSP.
     * @exports USER_GET_DEVICE_QUIETHOURS_RSP
     * @classdesc Represents a USER_GET_DEVICE_QUIETHOURS_RSP.
     * @implements IUSER_GET_DEVICE_QUIETHOURS_RSP
     * @constructor
     * @param {IUSER_GET_DEVICE_QUIETHOURS_RSP=} [properties] Properties to set
     */
    function USER_GET_DEVICE_QUIETHOURS_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * USER_GET_DEVICE_QUIETHOURS_RSP isOpen.
     * @member {boolean} isOpen
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @instance
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.prototype.isOpen = false;

    /**
     * USER_GET_DEVICE_QUIETHOURS_RSP beginTime.
     * @member {number} beginTime
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @instance
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.prototype.beginTime = 0;

    /**
     * USER_GET_DEVICE_QUIETHOURS_RSP endTime.
     * @member {number} endTime
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @instance
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.prototype.endTime = 0;

    /**
     * Creates a new USER_GET_DEVICE_QUIETHOURS_RSP instance using the specified properties.
     * @function create
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {IUSER_GET_DEVICE_QUIETHOURS_RSP=} [properties] Properties to set
     * @returns {USER_GET_DEVICE_QUIETHOURS_RSP} USER_GET_DEVICE_QUIETHOURS_RSP instance
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.create = function create(properties) {
        return new USER_GET_DEVICE_QUIETHOURS_RSP(properties);
    };

    /**
     * Encodes the specified USER_GET_DEVICE_QUIETHOURS_RSP message. Does not implicitly {@link USER_GET_DEVICE_QUIETHOURS_RSP.verify|verify} messages.
     * @function encode
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {IUSER_GET_DEVICE_QUIETHOURS_RSP} message USER_GET_DEVICE_QUIETHOURS_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isOpen);
        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.beginTime);
        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.endTime);
        return writer;
    };

    /**
     * Encodes the specified USER_GET_DEVICE_QUIETHOURS_RSP message, length delimited. Does not implicitly {@link USER_GET_DEVICE_QUIETHOURS_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {IUSER_GET_DEVICE_QUIETHOURS_RSP} message USER_GET_DEVICE_QUIETHOURS_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a USER_GET_DEVICE_QUIETHOURS_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {USER_GET_DEVICE_QUIETHOURS_RSP} USER_GET_DEVICE_QUIETHOURS_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.USER_GET_DEVICE_QUIETHOURS_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.isOpen = reader.bool();
                    break;
                }
            case 2: {
                    message.beginTime = reader.uint32();
                    break;
                }
            case 3: {
                    message.endTime = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("isOpen"))
            throw $util.ProtocolError("missing required 'isOpen'", { instance: message });
        if (!message.hasOwnProperty("beginTime"))
            throw $util.ProtocolError("missing required 'beginTime'", { instance: message });
        if (!message.hasOwnProperty("endTime"))
            throw $util.ProtocolError("missing required 'endTime'", { instance: message });
        return message;
    };

    /**
     * Decodes a USER_GET_DEVICE_QUIETHOURS_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {USER_GET_DEVICE_QUIETHOURS_RSP} USER_GET_DEVICE_QUIETHOURS_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a USER_GET_DEVICE_QUIETHOURS_RSP message.
     * @function verify
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (typeof message.isOpen !== "boolean")
            return "isOpen: boolean expected";
        if (!$util.isInteger(message.beginTime))
            return "beginTime: integer expected";
        if (!$util.isInteger(message.endTime))
            return "endTime: integer expected";
        return null;
    };

    /**
     * Creates a USER_GET_DEVICE_QUIETHOURS_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {USER_GET_DEVICE_QUIETHOURS_RSP} USER_GET_DEVICE_QUIETHOURS_RSP
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.USER_GET_DEVICE_QUIETHOURS_RSP)
            return object;
        var message = new $root.USER_GET_DEVICE_QUIETHOURS_RSP();
        if (object.isOpen != null)
            message.isOpen = Boolean(object.isOpen);
        if (object.beginTime != null)
            message.beginTime = object.beginTime >>> 0;
        if (object.endTime != null)
            message.endTime = object.endTime >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a USER_GET_DEVICE_QUIETHOURS_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {USER_GET_DEVICE_QUIETHOURS_RSP} message USER_GET_DEVICE_QUIETHOURS_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.isOpen = false;
            object.beginTime = 0;
            object.endTime = 0;
        }
        if (message.isOpen != null && message.hasOwnProperty("isOpen"))
            object.isOpen = message.isOpen;
        if (message.beginTime != null && message.hasOwnProperty("beginTime"))
            object.beginTime = message.beginTime;
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            object.endTime = message.endTime;
        return object;
    };

    /**
     * Converts this USER_GET_DEVICE_QUIETHOURS_RSP to JSON.
     * @function toJSON
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for USER_GET_DEVICE_QUIETHOURS_RSP
     * @function getTypeUrl
     * @memberof USER_GET_DEVICE_QUIETHOURS_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    USER_GET_DEVICE_QUIETHOURS_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/USER_GET_DEVICE_QUIETHOURS_RSP";
    };

    return USER_GET_DEVICE_QUIETHOURS_RSP;
})();

$root.DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.
     * @exports IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @interface IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.
     * @exports DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @classdesc Represents a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.
     * @implements IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @constructor
     * @param {IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ} DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ instance
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.create = function create(properties) {
        return new DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ message. Does not implicitly {@link DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ} message DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @static
     * @param {IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ} message DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ} DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ} DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ} DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ)
            return object;
        return new $root.DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ();
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @static
     * @param {DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ} message DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ";
    };

    return DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_REQ;
})();

$root.DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.
     * @exports IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @interface IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     */

    /**
     * Constructs a new DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.
     * @exports DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @classdesc Represents a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.
     * @implements IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @constructor
     * @param {IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP} DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP instance
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.create = function create(properties) {
        return new DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP message. Does not implicitly {@link DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP} message DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @static
     * @param {IDEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP} message DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP} DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP} DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP} DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP)
            return object;
        return new $root.DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP();
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @static
     * @param {DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP} message DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP";
    };

    return DEVICE_MAPID_SET_HISTORY_MAP_ENABLE_RSP;
})();

$root.DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ = (function() {

    /**
     * Properties of a DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.
     * @exports IDEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @interface IDEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @property {number} mode DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ mode
     */

    /**
     * Constructs a new DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.
     * @exports DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @classdesc Represents a DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.
     * @implements IDEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @constructor
     * @param {IDEVICE_MAPID_INTO_MODEIDLE_INFO_REQ=} [properties] Properties to set
     */
    function DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ mode.
     * @member {number} mode
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @instance
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.prototype.mode = 0;

    /**
     * Creates a new DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_INTO_MODEIDLE_INFO_REQ=} [properties] Properties to set
     * @returns {DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ} DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ instance
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.create = function create(properties) {
        return new DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ message. Does not implicitly {@link DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_INTO_MODEIDLE_INFO_REQ} message DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mode);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ message, length delimited. Does not implicitly {@link DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @static
     * @param {IDEVICE_MAPID_INTO_MODEIDLE_INFO_REQ} message DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ} DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mode = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("mode"))
            throw $util.ProtocolError("missing required 'mode'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ} DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ message.
     * @function verify
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.mode))
            return "mode: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ} DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ)
            return object;
        var message = new $root.DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ();
        if (object.mode != null)
            message.mode = object.mode >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @static
     * @param {DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ} message DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.mode = 0;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = message.mode;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ";
    };

    return DEVICE_MAPID_INTO_MODEIDLE_INFO_REQ;
})();

$root.DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP = (function() {

    /**
     * Properties of a DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.
     * @exports IDEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @interface IDEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @property {number} result DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP result
     */

    /**
     * Constructs a new DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.
     * @exports DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @classdesc Represents a DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.
     * @implements IDEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @constructor
     * @param {IDEVICE_MAPID_INTO_MODEIDLE_INFO_RSP=} [properties] Properties to set
     */
    function DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP result.
     * @member {number} result
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @instance
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_INTO_MODEIDLE_INFO_RSP=} [properties] Properties to set
     * @returns {DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP} DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP instance
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.create = function create(properties) {
        return new DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP message. Does not implicitly {@link DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_INTO_MODEIDLE_INFO_RSP} message DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP message, length delimited. Does not implicitly {@link DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @static
     * @param {IDEVICE_MAPID_INTO_MODEIDLE_INFO_RSP} message DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP} DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP} DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP message.
     * @function verify
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP} DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP)
            return object;
        var message = new $root.DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @static
     * @param {DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP} message DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP";
    };

    return DEVICE_MAPID_INTO_MODEIDLE_INFO_RSP;
})();

$root.DEVICE_MOP_FLOOR_CLEAN_REQ = (function() {

    /**
     * Properties of a DEVICE_MOP_FLOOR_CLEAN_REQ.
     * @exports IDEVICE_MOP_FLOOR_CLEAN_REQ
     * @interface IDEVICE_MOP_FLOOR_CLEAN_REQ
     * @property {number} ctrlValue DEVICE_MOP_FLOOR_CLEAN_REQ ctrlValue
     */

    /**
     * Constructs a new DEVICE_MOP_FLOOR_CLEAN_REQ.
     * @exports DEVICE_MOP_FLOOR_CLEAN_REQ
     * @classdesc Represents a DEVICE_MOP_FLOOR_CLEAN_REQ.
     * @implements IDEVICE_MOP_FLOOR_CLEAN_REQ
     * @constructor
     * @param {IDEVICE_MOP_FLOOR_CLEAN_REQ=} [properties] Properties to set
     */
    function DEVICE_MOP_FLOOR_CLEAN_REQ(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MOP_FLOOR_CLEAN_REQ ctrlValue.
     * @member {number} ctrlValue
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @instance
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.prototype.ctrlValue = 0;

    /**
     * Creates a new DEVICE_MOP_FLOOR_CLEAN_REQ instance using the specified properties.
     * @function create
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @static
     * @param {IDEVICE_MOP_FLOOR_CLEAN_REQ=} [properties] Properties to set
     * @returns {DEVICE_MOP_FLOOR_CLEAN_REQ} DEVICE_MOP_FLOOR_CLEAN_REQ instance
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.create = function create(properties) {
        return new DEVICE_MOP_FLOOR_CLEAN_REQ(properties);
    };

    /**
     * Encodes the specified DEVICE_MOP_FLOOR_CLEAN_REQ message. Does not implicitly {@link DEVICE_MOP_FLOOR_CLEAN_REQ.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @static
     * @param {IDEVICE_MOP_FLOOR_CLEAN_REQ} message DEVICE_MOP_FLOOR_CLEAN_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ctrlValue);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MOP_FLOOR_CLEAN_REQ message, length delimited. Does not implicitly {@link DEVICE_MOP_FLOOR_CLEAN_REQ.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @static
     * @param {IDEVICE_MOP_FLOOR_CLEAN_REQ} message DEVICE_MOP_FLOOR_CLEAN_REQ message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MOP_FLOOR_CLEAN_REQ message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MOP_FLOOR_CLEAN_REQ} DEVICE_MOP_FLOOR_CLEAN_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MOP_FLOOR_CLEAN_REQ();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.ctrlValue = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("ctrlValue"))
            throw $util.ProtocolError("missing required 'ctrlValue'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MOP_FLOOR_CLEAN_REQ message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MOP_FLOOR_CLEAN_REQ} DEVICE_MOP_FLOOR_CLEAN_REQ
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MOP_FLOOR_CLEAN_REQ message.
     * @function verify
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.ctrlValue))
            return "ctrlValue: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MOP_FLOOR_CLEAN_REQ message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MOP_FLOOR_CLEAN_REQ} DEVICE_MOP_FLOOR_CLEAN_REQ
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MOP_FLOOR_CLEAN_REQ)
            return object;
        var message = new $root.DEVICE_MOP_FLOOR_CLEAN_REQ();
        if (object.ctrlValue != null)
            message.ctrlValue = object.ctrlValue >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MOP_FLOOR_CLEAN_REQ message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @static
     * @param {DEVICE_MOP_FLOOR_CLEAN_REQ} message DEVICE_MOP_FLOOR_CLEAN_REQ
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.ctrlValue = 0;
        if (message.ctrlValue != null && message.hasOwnProperty("ctrlValue"))
            object.ctrlValue = message.ctrlValue;
        return object;
    };

    /**
     * Converts this DEVICE_MOP_FLOOR_CLEAN_REQ to JSON.
     * @function toJSON
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MOP_FLOOR_CLEAN_REQ
     * @function getTypeUrl
     * @memberof DEVICE_MOP_FLOOR_CLEAN_REQ
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MOP_FLOOR_CLEAN_REQ.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MOP_FLOOR_CLEAN_REQ";
    };

    return DEVICE_MOP_FLOOR_CLEAN_REQ;
})();

$root.DEVICE_MOP_FLOOR_CLEAN_RSP = (function() {

    /**
     * Properties of a DEVICE_MOP_FLOOR_CLEAN_RSP.
     * @exports IDEVICE_MOP_FLOOR_CLEAN_RSP
     * @interface IDEVICE_MOP_FLOOR_CLEAN_RSP
     * @property {number} result DEVICE_MOP_FLOOR_CLEAN_RSP result
     */

    /**
     * Constructs a new DEVICE_MOP_FLOOR_CLEAN_RSP.
     * @exports DEVICE_MOP_FLOOR_CLEAN_RSP
     * @classdesc Represents a DEVICE_MOP_FLOOR_CLEAN_RSP.
     * @implements IDEVICE_MOP_FLOOR_CLEAN_RSP
     * @constructor
     * @param {IDEVICE_MOP_FLOOR_CLEAN_RSP=} [properties] Properties to set
     */
    function DEVICE_MOP_FLOOR_CLEAN_RSP(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DEVICE_MOP_FLOOR_CLEAN_RSP result.
     * @member {number} result
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @instance
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.prototype.result = 0;

    /**
     * Creates a new DEVICE_MOP_FLOOR_CLEAN_RSP instance using the specified properties.
     * @function create
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @static
     * @param {IDEVICE_MOP_FLOOR_CLEAN_RSP=} [properties] Properties to set
     * @returns {DEVICE_MOP_FLOOR_CLEAN_RSP} DEVICE_MOP_FLOOR_CLEAN_RSP instance
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.create = function create(properties) {
        return new DEVICE_MOP_FLOOR_CLEAN_RSP(properties);
    };

    /**
     * Encodes the specified DEVICE_MOP_FLOOR_CLEAN_RSP message. Does not implicitly {@link DEVICE_MOP_FLOOR_CLEAN_RSP.verify|verify} messages.
     * @function encode
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @static
     * @param {IDEVICE_MOP_FLOOR_CLEAN_RSP} message DEVICE_MOP_FLOOR_CLEAN_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified DEVICE_MOP_FLOOR_CLEAN_RSP message, length delimited. Does not implicitly {@link DEVICE_MOP_FLOOR_CLEAN_RSP.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @static
     * @param {IDEVICE_MOP_FLOOR_CLEAN_RSP} message DEVICE_MOP_FLOOR_CLEAN_RSP message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DEVICE_MOP_FLOOR_CLEAN_RSP message from the specified reader or buffer.
     * @function decode
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DEVICE_MOP_FLOOR_CLEAN_RSP} DEVICE_MOP_FLOOR_CLEAN_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DEVICE_MOP_FLOOR_CLEAN_RSP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.result = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        if (!message.hasOwnProperty("result"))
            throw $util.ProtocolError("missing required 'result'", { instance: message });
        return message;
    };

    /**
     * Decodes a DEVICE_MOP_FLOOR_CLEAN_RSP message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DEVICE_MOP_FLOOR_CLEAN_RSP} DEVICE_MOP_FLOOR_CLEAN_RSP
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DEVICE_MOP_FLOOR_CLEAN_RSP message.
     * @function verify
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (!$util.isInteger(message.result))
            return "result: integer expected";
        return null;
    };

    /**
     * Creates a DEVICE_MOP_FLOOR_CLEAN_RSP message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DEVICE_MOP_FLOOR_CLEAN_RSP} DEVICE_MOP_FLOOR_CLEAN_RSP
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.fromObject = function fromObject(object) {
        if (object instanceof $root.DEVICE_MOP_FLOOR_CLEAN_RSP)
            return object;
        var message = new $root.DEVICE_MOP_FLOOR_CLEAN_RSP();
        if (object.result != null)
            message.result = object.result | 0;
        return message;
    };

    /**
     * Creates a plain object from a DEVICE_MOP_FLOOR_CLEAN_RSP message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @static
     * @param {DEVICE_MOP_FLOOR_CLEAN_RSP} message DEVICE_MOP_FLOOR_CLEAN_RSP
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.result = 0;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };

    /**
     * Converts this DEVICE_MOP_FLOOR_CLEAN_RSP to JSON.
     * @function toJSON
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DEVICE_MOP_FLOOR_CLEAN_RSP
     * @function getTypeUrl
     * @memberof DEVICE_MOP_FLOOR_CLEAN_RSP
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DEVICE_MOP_FLOOR_CLEAN_RSP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DEVICE_MOP_FLOOR_CLEAN_RSP";
    };

    return DEVICE_MOP_FLOOR_CLEAN_RSP;
})();